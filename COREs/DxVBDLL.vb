Imports System.Runtime.InteropServices
Namespace DxVBDLL
    Public Class DX
        Private Const DX_DLL_32 As String = "DLLs\Core32.dll"
        Private Const DX_DLL_64 As String = "DLLs\Core64.dll"

		Public Const [TRUE] As Integer = 1
		Public Const [FALSE] As Integer = 0
		Public Const MAX_IMAGE_NUM As Integer = 32768
		Public Const MAX_2DSURFACE_NUM As Integer = 32768
		Public Const MAX_3DSURFACE_NUM As Integer = 65536
		Public Const MAX_IMAGE_DIVNUM As Integer = 64
		Public Const MAX_SURFACE_NUM As Integer = 65536
		Public Const MAX_SHADOWMAP_NUM As Integer = 8192
		Public Const MAX_SOFTIMAGE_NUM As Integer = 8192
		Public Const MAX_SOUND_NUM As Integer = 32768
		Public Const MAX_SOFTSOUND_NUM As Integer = 8192
		Public Const MAX_MUSIC_NUM As Integer = 256
		Public Const MAX_MOVIE_NUM As Integer = 100
		Public Const MAX_MASK_NUM As Integer = 512
		Public Const MAX_FONT_NUM As Integer = 40
		Public Const MAX_INPUT_NUM As Integer = 256
		Public Const MAX_SOCKET_NUM As Integer = 8192
		Public Const MAX_LIGHT_NUM As Integer = 4096
		Public Const MAX_SHADER_NUM As Integer = 4096
		Public Const MAX_MODEL_BASE_NUM As Integer = 32768
		Public Const MAX_MODEL_NUM As Integer = 32768
		Public Const MAX_VERTEX_BUFFER_NUM As Integer = 16384
		Public Const MAX_INDEX_BUFFER_NUM As Integer = 16384
		Public Const MAX_FILE_NUM As Integer = 32768
		Public Const MAX_JOYPAD_NUM As Integer = 16
		Public Const MAX_EVENTPROCESS_NUM As Integer = 5
		Public Const DEFAULT_SCREEN_SIZE_X As Integer = 640
		Public Const DEFAULT_SCREEN_SIZE_Y As Integer = 480
		Public Const DEFAULT_COLOR_BITDEPTH As Integer = 16
		Public Const DEFAULT_ZBUFFER_BITDEPTH As Integer = 16
		Public Const DX_DEFAULT_FONT_HANDLE As Integer = 2
		Public Const FONT_CACHE_MAXNUM As Integer = 2024
		Public Const FONT_CACHE_MEMORYSIZE As Integer = 327680
		Public Const FONT_CACHE_MAX_YLENGTH As Integer = 16384
		Public Const MAX_USERIMAGEREAD_FUNCNUM As Integer = 10
		Public Const DX_WINDOWSVERSION_31 As Integer = 0
		Public Const DX_WINDOWSVERSION_95 As Integer = 1
		Public Const DX_WINDOWSVERSION_98 As Integer = 2
		Public Const DX_WINDOWSVERSION_ME As Integer = 3
		Public Const DX_WINDOWSVERSION_NT31 As Integer = 260
		Public Const DX_WINDOWSVERSION_NT40 As Integer = 261
		Public Const DX_WINDOWSVERSION_2000 As Integer = 262
		Public Const DX_WINDOWSVERSION_XP As Integer = 263
		Public Const DX_WINDOWSVERSION_VISTA As Integer = 264
		Public Const DX_WINDOWSVERSION_7 As Integer = 265
		Public Const DX_WINDOWSVERSION_8 As Integer = 266
		Public Const DX_WINDOWSVERSION_8_1 As Integer = 267
		Public Const DX_WINDOWSVERSION_10 As Integer = 268
		Public Const DX_WINDOWSVERSION_NT_TYPE As Integer = 256
		Public Const DX_DIRECTXVERSION_NON As Integer = 0
		Public Const DX_DIRECTXVERSION_1 As Integer = 65536
		Public Const DX_DIRECTXVERSION_2 As Integer = 131072
		Public Const DX_DIRECTXVERSION_3 As Integer = 196608
		Public Const DX_DIRECTXVERSION_4 As Integer = 262144
		Public Const DX_DIRECTXVERSION_5 As Integer = 327680
		Public Const DX_DIRECTXVERSION_6 As Integer = 393216
		Public Const DX_DIRECTXVERSION_6_1 As Integer = 393472
		Public Const DX_DIRECTXVERSION_7 As Integer = 458752
		Public Const DX_DIRECTXVERSION_8 As Integer = 524288
		Public Const DX_DIRECTXVERSION_8_1 As Integer = 524544
		Public Const DX_CHARSET_DEFAULT As Integer = 0
		Public Const DX_CHARSET_SHFTJIS As Integer = 1
		Public Const DX_CHARSET_HANGEUL As Integer = 2
		Public Const DX_CHARSET_BIG5 As Integer = 3
		Public Const DX_CHARSET_GB2312 As Integer = 4
		Public Const DX_MIDIMODE_MCI As Integer = 0
		Public Const DX_MIDIMODE_DM As Integer = 1
		Public Const DX_DRAWMODE_NEAREST As Integer = 0
		Public Const DX_DRAWMODE_BILINEAR As Integer = 1
		Public Const DX_DRAWMODE_ANISOTROPIC As Integer = 2
		Public Const DX_DRAWMODE_OTHER As Integer = 3
		Public Const DX_DRAWMODE_NUM As Integer = 4
		Public Const DX_FONTTYPE_NORMAL As Integer = 0
		Public Const DX_FONTTYPE_EDGE As Integer = 1
		Public Const DX_FONTTYPE_ANTIALIASING As Integer = 2
		Public Const DX_FONTTYPE_ANTIALIASING_4X4 As Integer = 18
		Public Const DX_FONTTYPE_ANTIALIASING_8X8 As Integer = 34
		Public Const DX_FONTTYPE_ANTIALIASING_EDGE As Integer = 3
		Public Const DX_FONTTYPE_ANTIALIASING_EDGE_4X4 As Integer = 19
		Public Const DX_FONTTYPE_ANTIALIASING_EDGE_8X8 As Integer = 35
		Public Const DX_BLENDMODE_NOBLEND As Integer = 0
		Public Const DX_BLENDMODE_ALPHA As Integer = 1
		Public Const DX_BLENDMODE_ADD As Integer = 2
		Public Const DX_BLENDMODE_SUB As Integer = 3
		Public Const DX_BLENDMODE_MUL As Integer = 4
		Public Const DX_BLENDMODE_SUB2 As Integer = 5
		Public Const DX_BLENDMODE_XOR As Integer = 6
		Public Const DX_BLENDMODE_DESTCOLOR As Integer = 8
		Public Const DX_BLENDMODE_INVDESTCOLOR As Integer = 9
		Public Const DX_BLENDMODE_INVSRC As Integer = 10
		Public Const DX_BLENDMODE_MULA As Integer = 11
		Public Const DX_BLENDMODE_ALPHA_X4 As Integer = 12
		Public Const DX_BLENDMODE_ADD_X4 As Integer = 13
		Public Const DX_BLENDMODE_SRCCOLOR As Integer = 14
		Public Const DX_BLENDMODE_HALF_ADD As Integer = 15
		Public Const DX_BLENDMODE_SUB1 As Integer = 16
		Public Const DX_BLENDMODE_PMA_ALPHA As Integer = 17
		Public Const DX_BLENDMODE_PMA_ADD As Integer = 18
		Public Const DX_BLENDMODE_PMA_SUB As Integer = 19
		Public Const DX_BLENDMODE_PMA_INVSRC As Integer = 20
		Public Const DX_BLENDMODE_PMA_ALPHA_X4 As Integer = 21
		Public Const DX_BLENDMODE_PMA_ADD_X4 As Integer = 22
		Public Const DX_BLENDMODE_NUM As Integer = 23
		Public Const DX_BLENDGRAPHTYPE_NORMAL As Integer = 0
		Public Const DX_BLENDGRAPHTYPE_WIPE As Integer = 1
		Public Const DX_BLENDGRAPHTYPE_ALPHA As Integer = 2
		Public Const DX_GRAPH_FILTER_MONO As Integer = 0
		Public Const DX_GRAPH_FILTER_GAUSS As Integer = 1
		Public Const DX_GRAPH_FILTER_DOWN_SCALE As Integer = 2
		Public Const DX_GRAPH_FILTER_BRIGHT_CLIP As Integer = 3
		Public Const DX_GRAPH_FILTER_HSB As Integer = 4
		Public Const DX_GRAPH_FILTER_INVERT As Integer = 5
		Public Const DX_GRAPH_FILTER_LEVEL As Integer = 6
		Public Const DX_GRAPH_FILTER_TWO_COLOR As Integer = 7
		Public Const DX_GRAPH_FILTER_GRADIENT_MAP As Integer = 8
		Public Const DX_GRAPH_FILTER_PREMUL_ALPHA As Integer = 9
		Public Const DX_GRAPH_FILTER_INTERP_ALPHA As Integer = 10
		Public Const DX_GRAPH_FILTER_NUM As Integer = 11
		Public Const DX_GRAPH_BLEND_NORMAL As Integer = 0
		Public Const DX_GRAPH_BLEND_RGBA_SELECT_MIX As Integer = 1
		Public Const DX_GRAPH_BLEND_MULTIPLE As Integer = 2
		Public Const DX_GRAPH_BLEND_DIFFERENCE As Integer = 3
		Public Const DX_GRAPH_BLEND_ADD As Integer = 4
		Public Const DX_GRAPH_BLEND_SCREEN As Integer = 5
		Public Const DX_GRAPH_BLEND_OVERLAY As Integer = 6
		Public Const DX_GRAPH_BLEND_DODGE As Integer = 7
		Public Const DX_GRAPH_BLEND_BURN As Integer = 8
		Public Const DX_GRAPH_BLEND_DARKEN As Integer = 9
		Public Const DX_GRAPH_BLEND_LIGHTEN As Integer = 10
		Public Const DX_GRAPH_BLEND_SOFTLIGHT As Integer = 11
		Public Const DX_GRAPH_BLEND_HARDLIGHT As Integer = 12
		Public Const DX_GRAPH_BLEND_EXCLUSION As Integer = 13
		Public Const DX_GRAPH_BLEND_NORMAL_ALPHACH As Integer = 14
		Public Const DX_GRAPH_BLEND_ADD_ALPHACH As Integer = 15
		Public Const DX_GRAPH_BLEND_MULTIPLE_A_ONLY As Integer = 16
		Public Const DX_GRAPH_BLEND_PMA_MULTIPLE_A_ONLY As Integer = 17
		Public Const DX_GRAPH_BLEND_NUM As Integer = 18
		Public Const DX_RGBA_SELECT_SRC_R As Integer = 0
		Public Const DX_RGBA_SELECT_SRC_G As Integer = 1
		Public Const DX_RGBA_SELECT_SRC_B As Integer = 2
		Public Const DX_RGBA_SELECT_SRC_A As Integer = 3
		Public Const DX_RGBA_SELECT_BLEND_R As Integer = 4
		Public Const DX_RGBA_SELECT_BLEND_G As Integer = 5
		Public Const DX_RGBA_SELECT_BLEND_B As Integer = 6
		Public Const DX_RGBA_SELECT_BLEND_A As Integer = 7
		Public Const DX_FILL_WIREFRAME As Integer = 2
		Public Const DX_FILL_SOLID As Integer = 3
		Public Const DX_CULLING_NONE As Integer = 0
		Public Const DX_CULLING_LEFT As Integer = 1
		Public Const DX_CULLING_RIGHT As Integer = 2
		Public Const DX_CULLING_NUM As Integer = 3
		Public Const DX_CAMERACLIP_LEFT As Integer = 1
		Public Const DX_CAMERACLIP_RIGHT As Integer = 2
		Public Const DX_CAMERACLIP_BOTTOM As Integer = 4
		Public Const DX_CAMERACLIP_TOP As Integer = 8
		Public Const DX_CAMERACLIP_BACK As Integer = 16
		Public Const DX_CAMERACLIP_FRONT As Integer = 32
		Public Const DX_MV1_VERTEX_TYPE_1FRAME As Integer = 0
		Public Const DX_MV1_VERTEX_TYPE_4FRAME As Integer = 1
		Public Const DX_MV1_VERTEX_TYPE_8FRAME As Integer = 2
		Public Const DX_MV1_VERTEX_TYPE_FREE_FRAME As Integer = 3
		Public Const DX_MV1_VERTEX_TYPE_NMAP_1FRAME As Integer = 4
		Public Const DX_MV1_VERTEX_TYPE_NMAP_4FRAME As Integer = 5
		Public Const DX_MV1_VERTEX_TYPE_NMAP_8FRAME As Integer = 6
		Public Const DX_MV1_VERTEX_TYPE_NMAP_FREE_FRAME As Integer = 7
		Public Const DX_MV1_VERTEX_TYPE_NUM As Integer = 8
		Public Const DX_MV1_MESHCATEGORY_NORMAL As Integer = 0
		Public Const DX_MV1_MESHCATEGORY_OUTLINE As Integer = 1
		Public Const DX_MV1_MESHCATEGORY_OUTLINE_ORIG_SHADER As Integer = 2
		Public Const DX_MV1_MESHCATEGORY_NUM As Integer = 3
		Public Const MV1_SAVETYPE_MESH As Integer = 1
		Public Const MV1_SAVETYPE_ANIM As Integer = 2
		Public Const MV1_SAVETYPE_NORMAL As Integer = (MV1_SAVETYPE_MESH Or MV1_SAVETYPE_ANIM)
		Public Const MV1_ANIMKEY_DATATYPE_ROTATE As Integer = 0
		Public Const MV1_ANIMKEY_DATATYPE_ROTATE_X As Integer = 1
		Public Const MV1_ANIMKEY_DATATYPE_ROTATE_Y As Integer = 2
		Public Const MV1_ANIMKEY_DATATYPE_ROTATE_Z As Integer = 3
		Public Const MV1_ANIMKEY_DATATYPE_SCALE As Integer = 5
		Public Const MV1_ANIMKEY_DATATYPE_SCALE_X As Integer = 6
		Public Const MV1_ANIMKEY_DATATYPE_SCALE_Y As Integer = 7
		Public Const MV1_ANIMKEY_DATATYPE_SCALE_Z As Integer = 8
		Public Const MV1_ANIMKEY_DATATYPE_TRANSLATE As Integer = 10
		Public Const MV1_ANIMKEY_DATATYPE_TRANSLATE_X As Integer = 11
		Public Const MV1_ANIMKEY_DATATYPE_TRANSLATE_Y As Integer = 12
		Public Const MV1_ANIMKEY_DATATYPE_TRANSLATE_Z As Integer = 13
		Public Const MV1_ANIMKEY_DATATYPE_MATRIX4X4C As Integer = 15
		Public Const MV1_ANIMKEY_DATATYPE_MATRIX3X3 As Integer = 17
		Public Const MV1_ANIMKEY_DATATYPE_SHAPE As Integer = 18
		Public Const MV1_ANIMKEY_DATATYPE_OTHRE As Integer = 20
		Public Const MV1_ANIMKEY_TIME_TYPE_ONE As Integer = 0
		Public Const MV1_ANIMKEY_TIME_TYPE_KEY As Integer = 1
		Public Const MV1_ANIMKEY_TYPE_QUATERNION_X As Integer = 0
		Public Const MV1_ANIMKEY_TYPE_VECTOR As Integer = 1
		Public Const MV1_ANIMKEY_TYPE_MATRIX4X4C As Integer = 2
		Public Const MV1_ANIMKEY_TYPE_MATRIX3X3 As Integer = 3
		Public Const MV1_ANIMKEY_TYPE_FLAT As Integer = 4
		Public Const MV1_ANIMKEY_TYPE_LINEAR As Integer = 5
		Public Const MV1_ANIMKEY_TYPE_BLEND As Integer = 6
		Public Const MV1_ANIMKEY_TYPE_QUATERNION_VMD As Integer = 7
		Public Const DX_SCREEN_FRONT As Integer = -4
		Public Const DX_SCREEN_BACK As Integer = -2
		Public Const DX_SCREEN_WORK As Integer = -3
		Public Const DX_SCREEN_TEMPFRONT As Integer = -5
		Public Const DX_NONE_GRAPH As Integer = -5
		Public Const DX_SHAVEDMODE_NONE As Integer = 0
		Public Const DX_SHAVEDMODE_DITHER As Integer = 1
		Public Const DX_SHAVEDMODE_DIFFUS As Integer = 2
		Public Const DX_IMAGESAVETYPE_BMP As Integer = 0
		Public Const DX_IMAGESAVETYPE_JPEG As Integer = 1
		Public Const DX_IMAGESAVETYPE_PNG As Integer = 2
		Public Const DX_PLAYTYPE_LOOPBIT As Integer = 2
		Public Const DX_PLAYTYPE_BACKBIT As Integer = 1
		Public Const DX_PLAYTYPE_NORMAL As Integer = 0
		Public Const DX_PLAYTYPE_BACK As Integer = (DX_PLAYTYPE_BACKBIT)
		Public Const DX_PLAYTYPE_LOOP As Integer = (DX_PLAYTYPE_LOOPBIT Or DX_PLAYTYPE_BACKBIT)
		Public Const DX_MOVIEPLAYTYPE_BCANCEL As Integer = 0
		Public Const DX_MOVIEPLAYTYPE_NORMAL As Integer = 1
		Public Const DX_SOUNDTYPE_NORMAL As Integer = 0
		Public Const DX_SOUNDTYPE_STREAMSTYLE As Integer = 1
		Public Const DX_SOUNDDATATYPE_MEMNOPRESS As Integer = 0
		Public Const DX_SOUNDDATATYPE_MEMNOPRESS_PLUS As Integer = 1
		Public Const DX_SOUNDDATATYPE_MEMPRESS As Integer = 2
		Public Const DX_SOUNDDATATYPE_FILE As Integer = 3
		Public Const DX_READSOUNDFUNCTION_PCM As Integer = 1
		Public Const DX_READSOUNDFUNCTION_ACM As Integer = 2
		Public Const DX_READSOUNDFUNCTION_OGG As Integer = 4
		Public Const DX_READSOUNDFUNCTION_MP3 As Integer = 8
		Public Const DX_READSOUNDFUNCTION_DSMP3 As Integer = 16
		Public Const DX_REVERB_PRESET_DEFAULT As Integer = 0
		Public Const DX_REVERB_PRESET_GENERIC As Integer = 1
		Public Const DX_REVERB_PRESET_PADDEDCELL As Integer = 2
		Public Const DX_REVERB_PRESET_ROOM As Integer = 3
		Public Const DX_REVERB_PRESET_BATHROOM As Integer = 4
		Public Const DX_REVERB_PRESET_LIVINGROOM As Integer = 5
		Public Const DX_REVERB_PRESET_STONEROOM As Integer = 6
		Public Const DX_REVERB_PRESET_AUDITORIUM As Integer = 7
		Public Const DX_REVERB_PRESET_CONCERTHALL As Integer = 8
		Public Const DX_REVERB_PRESET_CAVE As Integer = 9
		Public Const DX_REVERB_PRESET_ARENA As Integer = 10
		Public Const DX_REVERB_PRESET_HANGAR As Integer = 11
		Public Const DX_REVERB_PRESET_CARPETEDHALLWAY As Integer = 12
		Public Const DX_REVERB_PRESET_HALLWAY As Integer = 13
		Public Const DX_REVERB_PRESET_STONECORRIDOR As Integer = 14
		Public Const DX_REVERB_PRESET_ALLEY As Integer = 15
		Public Const DX_REVERB_PRESET_FOREST As Integer = 16
		Public Const DX_REVERB_PRESET_CITY As Integer = 17
		Public Const DX_REVERB_PRESET_MOUNTAINS As Integer = 18
		Public Const DX_REVERB_PRESET_QUARRY As Integer = 19
		Public Const DX_REVERB_PRESET_PLAIN As Integer = 20
		Public Const DX_REVERB_PRESET_PARKINGLOT As Integer = 21
		Public Const DX_REVERB_PRESET_SEWERPIPE As Integer = 22
		Public Const DX_REVERB_PRESET_UNDERWATER As Integer = 23
		Public Const DX_REVERB_PRESET_SMALLROOM As Integer = 24
		Public Const DX_REVERB_PRESET_MEDIUMROOM As Integer = 25
		Public Const DX_REVERB_PRESET_LARGEROOM As Integer = 26
		Public Const DX_REVERB_PRESET_MEDIUMHALL As Integer = 27
		Public Const DX_REVERB_PRESET_LARGEHALL As Integer = 28
		Public Const DX_REVERB_PRESET_PLATE As Integer = 29
		Public Const DX_REVERB_PRESET_NUM As Integer = 30
		Public Const DX_MASKTRANS_WHITE As Integer = 0
		Public Const DX_MASKTRANS_BLACK As Integer = 1
		Public Const DX_MASKTRANS_NONE As Integer = 2
		Public Const DX_ZWRITE_MASK As Integer = 0
		Public Const DX_ZWRITE_CLEAR As Integer = 1
		Public Const DX_CMP_NEVER As Integer = 1
		Public Const DX_CMP_LESS As Integer = 2
		Public Const DX_CMP_EQUAL As Integer = 3
		Public Const DX_CMP_LESSEQUAL As Integer = 4
		Public Const DX_CMP_GREATER As Integer = 5
		Public Const DX_CMP_NOTEQUAL As Integer = 6
		Public Const DX_CMP_GREATEREQUAL As Integer = 7
		Public Const DX_CMP_ALWAYS As Integer = 8
		Public Const DX_ZCMP_DEFAULT As Integer = (DX_CMP_LESSEQUAL)
		Public Const DX_ZCMP_REVERSE As Integer = (DX_CMP_GREATEREQUAL)
		Public Const DX_SHADEMODE_FLAT As Integer = 1
		Public Const DX_SHADEMODE_GOURAUD As Integer = 2
		Public Const DX_FOGMODE_NONE As Integer = 0
		Public Const DX_FOGMODE_EXP As Integer = 1
		Public Const DX_FOGMODE_EXP2 As Integer = 2
		Public Const DX_FOGMODE_LINEAR As Integer = 3
		Public Const DX_MATERIAL_TYPE_NORMAL As Integer = 0
		Public Const DX_MATERIAL_TYPE_TOON As Integer = 1
		Public Const DX_MATERIAL_TYPE_TOON_2 As Integer = 2
		Public Const DX_MATERIAL_BLENDTYPE_TRANSLUCENT As Integer = 0
		Public Const DX_MATERIAL_BLENDTYPE_ADDITIVE As Integer = 1
		Public Const DX_MATERIAL_BLENDTYPE_MODULATE As Integer = 2
		Public Const DX_MATERIAL_BLENDTYPE_NONE As Integer = 3
		Public Const DX_TEXADDRESS_WRAP As Integer = 1
		Public Const DX_TEXADDRESS_MIRROR As Integer = 2
		Public Const DX_TEXADDRESS_CLAMP As Integer = 3
		Public Const DX_TEXADDRESS_BORDER As Integer = 4
		Public Const DX_TEXADDRESS_NUM As Integer = 5
		Public Const DX_VERTEX_TYPE_NORMAL_3D As Integer = 0
		Public Const DX_VERTEX_TYPE_SHADER_3D As Integer = 1
		Public Const DX_VERTEX_TYPE_NUM As Integer = 2
		Public Const DX_INDEX_TYPE_16BIT As Integer = 0
		Public Const DX_INDEX_TYPE_32BIT As Integer = 1
		Public Const DX_LOADMODEL_PHYSICS_DISABLE As Integer = 1
		Public Const DX_LOADMODEL_PHYSICS_LOADCALC As Integer = 0
		Public Const DX_LOADMODEL_PHYSICS_REALTIME As Integer = 2
		Public Const DX_SEMITRANSDRAWMODE_ALWAYS As Integer = 0
		Public Const DX_SEMITRANSDRAWMODE_SEMITRANS_ONLY As Integer = 1
		Public Const DX_SEMITRANSDRAWMODE_NOT_SEMITRANS_ONLY As Integer = 2
		Public Const DX_CUBEMAP_FACE_POSITIVE_X As Integer = 0
		Public Const DX_CUBEMAP_FACE_NEGATIVE_X As Integer = 1
		Public Const DX_CUBEMAP_FACE_POSITIVE_Y As Integer = 2
		Public Const DX_CUBEMAP_FACE_NEGATIVE_Y As Integer = 3
		Public Const DX_CUBEMAP_FACE_POSITIVE_Z As Integer = 4
		Public Const DX_CUBEMAP_FACE_NEGATIVE_Z As Integer = 5
		Public Const DX_PRIMTYPE_POINTLIST As Integer = 1
		Public Const DX_PRIMTYPE_LINELIST As Integer = 2
		Public Const DX_PRIMTYPE_LINESTRIP As Integer = 3
		Public Const DX_PRIMTYPE_TRIANGLELIST As Integer = 4
		Public Const DX_PRIMTYPE_TRIANGLESTRIP As Integer = 5
		Public Const DX_PRIMTYPE_TRIANGLEFAN As Integer = 6
		Public Const DX_LIGHTTYPE_D3DLIGHT_POINT As Integer = 1
		Public Const DX_LIGHTTYPE_D3DLIGHT_SPOT As Integer = 2
		Public Const DX_LIGHTTYPE_D3DLIGHT_DIRECTIONAL As Integer = 3
		Public Const DX_LIGHTTYPE_D3DLIGHT_FORCEDWORD As Integer = 2147483647
		Public Const DX_LIGHTTYPE_POINT As Integer = 1
		Public Const DX_LIGHTTYPE_SPOT As Integer = 2
		Public Const DX_LIGHTTYPE_DIRECTIONAL As Integer = 3
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_RGB16 As Integer = 0
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_RGB32 As Integer = 1
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_ALPHA_RGB16 As Integer = 2
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_ALPHA_RGB32 As Integer = 3
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_ALPHATEST_RGB16 As Integer = 4
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_ALPHATEST_RGB32 As Integer = 5
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DXT1 As Integer = 6
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DXT2 As Integer = 7
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DXT3 As Integer = 8
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DXT4 As Integer = 9
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DXT5 As Integer = 10
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_RGB16 As Integer = 11
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_RGB32 As Integer = 12
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ALPHA_RGB32 As Integer = 13
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ABGR_I16 As Integer = 14
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ABGR_F16 As Integer = 15
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ABGR_F32 As Integer = 16
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ONE_I8 As Integer = 17
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ONE_I16 As Integer = 18
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ONE_F16 As Integer = 19
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_ONE_F32 As Integer = 20
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_TWO_I8 As Integer = 21
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_TWO_I16 As Integer = 22
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_TWO_F16 As Integer = 23
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_DRAWVALID_TWO_F32 As Integer = 24
		Public Const DX_GRAPHICSIMAGE_FORMAT_3D_NUM As Integer = 25
		Public Const DX_GRAPHICSIMAGE_FORMAT_2D As Integer = 26
		Public Const DX_GRAPHICSIMAGE_FORMAT_R5G6B5 As Integer = 27
		Public Const DX_GRAPHICSIMAGE_FORMAT_X8A8R5G6B5 As Integer = 28
		Public Const DX_GRAPHICSIMAGE_FORMAT_X8R8G8B8 As Integer = 29
		Public Const DX_GRAPHICSIMAGE_FORMAT_A8R8G8B8 As Integer = 30
		Public Const DX_GRAPHICSIMAGE_FORMAT_NUM As Integer = 31
		Public Const DX_BASEIMAGE_FORMAT_NORMAL As Integer = 0
		Public Const DX_BASEIMAGE_FORMAT_DXT1 As Integer = 1
		Public Const DX_BASEIMAGE_FORMAT_DXT2 As Integer = 2
		Public Const DX_BASEIMAGE_FORMAT_DXT3 As Integer = 3
		Public Const DX_BASEIMAGE_FORMAT_DXT4 As Integer = 4
		Public Const DX_BASEIMAGE_FORMAT_DXT5 As Integer = 5
		Public Const DX_WIN_ZTYPE_NORMAL As Integer = 0
		Public Const DX_WIN_ZTYPE_BOTTOM As Integer = 1
		Public Const DX_WIN_ZTYPE_TOP As Integer = 2
		Public Const DX_WIN_ZTYPE_TOPMOST As Integer = 3
		Public Const TOOLBUTTON_STATE_ENABLE As Integer = 0
		Public Const TOOLBUTTON_STATE_PRESSED As Integer = 1
		Public Const TOOLBUTTON_STATE_DISABLE As Integer = 2
		Public Const TOOLBUTTON_STATE_PRESSED_DISABLE As Integer = 3
		Public Const TOOLBUTTON_STATE_NUM As Integer = 4
		Public Const TOOLBUTTON_TYPE_NORMAL As Integer = 0
		Public Const TOOLBUTTON_TYPE_CHECK As Integer = 1
		Public Const TOOLBUTTON_TYPE_GROUP As Integer = 2
		Public Const TOOLBUTTON_TYPE_SEP As Integer = 3
		Public Const TOOLBUTTON_TYPE_NUM As Integer = 4
		Public Const MENUITEM_IDTOP As Integer = -1414812757
		Public Const MENUITEM_ADD_CHILD As Integer = 0
		Public Const MENUITEM_ADD_INSERT As Integer = 1
		Public Const MENUITEM_MARK_NONE As Integer = 0
		Public Const MENUITEM_MARK_CHECK As Integer = 1
		Public Const MENUITEM_MARK_RADIO As Integer = 2
		Public Const DX_NUMMODE_10 As Integer = 0
		Public Const DX_NUMMODE_16 As Integer = 1
		Public Const DX_STRMODE_NOT0 As Integer = 2
		Public Const DX_STRMODE_USE0 As Integer = 3
		Public Const DX_CHECKINPUT_KEY As Integer = 1
		Public Const DX_CHECKINPUT_PAD As Integer = 2
		Public Const DX_CHECKINPUT_MOUSE As Integer = 4
		Public Const DX_CHECKINPUT_ALL As Integer = DX_CHECKINPUT_KEY
		Public Const DX_INPUT_KEY_PAD1 As Integer = 4097
		Public Const DX_INPUT_PAD1 As Integer = 1
		Public Const DX_INPUT_PAD2 As Integer = 2
		Public Const DX_INPUT_PAD3 As Integer = 3
		Public Const DX_INPUT_PAD4 As Integer = 4
		Public Const DX_INPUT_PAD5 As Integer = 5
		Public Const DX_INPUT_PAD6 As Integer = 6
		Public Const DX_INPUT_PAD7 As Integer = 7
		Public Const DX_INPUT_PAD8 As Integer = 8
		Public Const DX_INPUT_PAD9 As Integer = 9
		Public Const DX_INPUT_PAD10 As Integer = 10
		Public Const DX_INPUT_PAD11 As Integer = 11
		Public Const DX_INPUT_PAD12 As Integer = 12
		Public Const DX_INPUT_PAD13 As Integer = 13
		Public Const DX_INPUT_PAD14 As Integer = 14
		Public Const DX_INPUT_PAD15 As Integer = 15
		Public Const DX_INPUT_PAD16 As Integer = 16
		Public Const DX_INPUT_KEY As Integer = 4096
		Public Const DX_MOVIESURFACE_NORMAL As Integer = 0
		Public Const DX_MOVIESURFACE_OVERLAY As Integer = 1
		Public Const DX_MOVIESURFACE_FULLCOLOR As Integer = 2
		Public Const PAD_INPUT_DOWN As Integer = 1
		Public Const PAD_INPUT_LEFT As Integer = 2
		Public Const PAD_INPUT_RIGHT As Integer = 4
		Public Const PAD_INPUT_UP As Integer = 8
		Public Const PAD_INPUT_A As Integer = 16
		Public Const PAD_INPUT_B As Integer = 32
		Public Const PAD_INPUT_C As Integer = 64
		Public Const PAD_INPUT_X As Integer = 128
		Public Const PAD_INPUT_Y As Integer = 256
		Public Const PAD_INPUT_Z As Integer = 512
		Public Const PAD_INPUT_L As Integer = 1024
		Public Const PAD_INPUT_R As Integer = 2048
		Public Const PAD_INPUT_START As Integer = 4096
		Public Const PAD_INPUT_M As Integer = 8192
		Public Const PAD_INPUT_D As Integer = 16384
		Public Const PAD_INPUT_F As Integer = 32768
		Public Const PAD_INPUT_G As Integer = 65536
		Public Const PAD_INPUT_H As Integer = 131072
		Public Const PAD_INPUT_I As Integer = 262144
		Public Const PAD_INPUT_J As Integer = 524288
		Public Const PAD_INPUT_K As Integer = 1048576
		Public Const PAD_INPUT_LL As Integer = 2097152
		Public Const PAD_INPUT_N As Integer = 4194304
		Public Const PAD_INPUT_O As Integer = 8388608
		Public Const PAD_INPUT_P As Integer = 16777216
		Public Const PAD_INPUT_RR As Integer = 33554432
		Public Const PAD_INPUT_S As Integer = 67108864
		Public Const PAD_INPUT_T As Integer = 134217728
		Public Const PAD_INPUT_U As Integer = 268435456
		Public Const PAD_INPUT_V As Integer = 536870912
		Public Const PAD_INPUT_W As Integer = 1073741824
		Public Const PAD_INPUT_XX As Integer = -2147483648
		Public Const PAD_INPUT_1 As Integer = 16
		Public Const PAD_INPUT_2 As Integer = 32
		Public Const PAD_INPUT_3 As Integer = 64
		Public Const PAD_INPUT_4 As Integer = 128
		Public Const PAD_INPUT_5 As Integer = 256
		Public Const PAD_INPUT_6 As Integer = 512
		Public Const PAD_INPUT_7 As Integer = 1024
		Public Const PAD_INPUT_8 As Integer = 2048
		Public Const PAD_INPUT_9 As Integer = 4096
		Public Const PAD_INPUT_10 As Integer = 8192
		Public Const PAD_INPUT_11 As Integer = 16384
		Public Const PAD_INPUT_12 As Integer = 32768
		Public Const PAD_INPUT_13 As Integer = 65536
		Public Const PAD_INPUT_14 As Integer = 131072
		Public Const PAD_INPUT_15 As Integer = 262144
		Public Const PAD_INPUT_16 As Integer = 524288
		Public Const PAD_INPUT_17 As Integer = 1048576
		Public Const PAD_INPUT_18 As Integer = 2097152
		Public Const PAD_INPUT_19 As Integer = 4194304
		Public Const PAD_INPUT_20 As Integer = 8388608
		Public Const PAD_INPUT_21 As Integer = 16777216
		Public Const PAD_INPUT_22 As Integer = 33554432
		Public Const PAD_INPUT_23 As Integer = 67108864
		Public Const PAD_INPUT_24 As Integer = 134217728
		Public Const PAD_INPUT_25 As Integer = 268435456
		Public Const PAD_INPUT_26 As Integer = 536870912
		Public Const PAD_INPUT_27 As Integer = 1073741824
		Public Const PAD_INPUT_28 As Integer = -2147483648
		Public Const XINPUT_BUTTON_DPAD_UP As Integer = 0
		Public Const XINPUT_BUTTON_DPAD_DOWN As Integer = 1
		Public Const XINPUT_BUTTON_DPAD_LEFT As Integer = 2
		Public Const XINPUT_BUTTON_DPAD_RIGHT As Integer = 3
		Public Const XINPUT_BUTTON_START As Integer = 4
		Public Const XINPUT_BUTTON_BACK As Integer = 5
		Public Const XINPUT_BUTTON_LEFT_THUMB As Integer = 6
		Public Const XINPUT_BUTTON_RIGHT_THUMB As Integer = 7
		Public Const XINPUT_BUTTON_LEFT_SHOULDER As Integer = 8
		Public Const XINPUT_BUTTON_RIGHT_SHOULDER As Integer = 9
		Public Const XINPUT_BUTTON_A As Integer = 12
		Public Const XINPUT_BUTTON_B As Integer = 13
		Public Const XINPUT_BUTTON_X As Integer = 14
		Public Const XINPUT_BUTTON_Y As Integer = 15
		Public Const MOUSE_INPUT_LEFT As Integer = 1
		Public Const MOUSE_INPUT_RIGHT As Integer = 2
		Public Const MOUSE_INPUT_MIDDLE As Integer = 4
		Public Const MOUSE_INPUT_1 As Integer = 1
		Public Const MOUSE_INPUT_2 As Integer = 2
		Public Const MOUSE_INPUT_3 As Integer = 4
		Public Const MOUSE_INPUT_4 As Integer = 8
		Public Const MOUSE_INPUT_5 As Integer = 16
		Public Const MOUSE_INPUT_6 As Integer = 32
		Public Const MOUSE_INPUT_7 As Integer = 64
		Public Const MOUSE_INPUT_8 As Integer = 128
		Public Const KEY_INPUT_BACK As Integer = 14
		Public Const KEY_INPUT_TAB As Integer = 15
		Public Const KEY_INPUT_RETURN As Integer = 28
		Public Const KEY_INPUT_LSHIFT As Integer = 42
		Public Const KEY_INPUT_RSHIFT As Integer = 54
		Public Const KEY_INPUT_LCONTROL As Integer = 29
		Public Const KEY_INPUT_RCONTROL As Integer = 157
		Public Const KEY_INPUT_ESCAPE As Integer = 1
		Public Const KEY_INPUT_SPACE As Integer = 57
		Public Const KEY_INPUT_PGUP As Integer = 201
		Public Const KEY_INPUT_PGDN As Integer = 209
		Public Const KEY_INPUT_END As Integer = 207
		Public Const KEY_INPUT_HOME As Integer = 199
		Public Const KEY_INPUT_LEFT As Integer = 203
		Public Const KEY_INPUT_UP As Integer = 200
		Public Const KEY_INPUT_RIGHT As Integer = 205
		Public Const KEY_INPUT_DOWN As Integer = 208
		Public Const KEY_INPUT_INSERT As Integer = 210
		Public Const KEY_INPUT_DELETE As Integer = 211
		Public Const KEY_INPUT_MINUS As Integer = 12
		Public Const KEY_INPUT_YEN As Integer = 125
		Public Const KEY_INPUT_PREVTRACK As Integer = 144
		Public Const KEY_INPUT_PERIOD As Integer = 52
		Public Const KEY_INPUT_SLASH As Integer = 53
		Public Const KEY_INPUT_LALT As Integer = 56
		Public Const KEY_INPUT_RALT As Integer = 184
		Public Const KEY_INPUT_SCROLL As Integer = 70
		Public Const KEY_INPUT_SEMICOLON As Integer = 39
		Public Const KEY_INPUT_COLON As Integer = 146
		Public Const KEY_INPUT_LBRACKET As Integer = 26
		Public Const KEY_INPUT_RBRACKET As Integer = 27
		Public Const KEY_INPUT_AT As Integer = 145
		Public Const KEY_INPUT_BACKSLASH As Integer = 43
		Public Const KEY_INPUT_COMMA As Integer = 51
		Public Const KEY_INPUT_KANJI As Integer = 148
		Public Const KEY_INPUT_CONVERT As Integer = 121
		Public Const KEY_INPUT_NOCONVERT As Integer = 123
		Public Const KEY_INPUT_KANA As Integer = 112
		Public Const KEY_INPUT_APPS As Integer = 221
		Public Const KEY_INPUT_CAPSLOCK As Integer = 58
		Public Const KEY_INPUT_SYSRQ As Integer = 183
		Public Const KEY_INPUT_PAUSE As Integer = 197
		Public Const KEY_INPUT_LWIN As Integer = 219
		Public Const KEY_INPUT_RWIN As Integer = 220
		Public Const KEY_INPUT_NUMLOCK As Integer = 69
		Public Const KEY_INPUT_NUMPAD0 As Integer = 82
		Public Const KEY_INPUT_NUMPAD1 As Integer = 79
		Public Const KEY_INPUT_NUMPAD2 As Integer = 80
		Public Const KEY_INPUT_NUMPAD3 As Integer = 81
		Public Const KEY_INPUT_NUMPAD4 As Integer = 75
		Public Const KEY_INPUT_NUMPAD5 As Integer = 76
		Public Const KEY_INPUT_NUMPAD6 As Integer = 77
		Public Const KEY_INPUT_NUMPAD7 As Integer = 71
		Public Const KEY_INPUT_NUMPAD8 As Integer = 72
		Public Const KEY_INPUT_NUMPAD9 As Integer = 73
		Public Const KEY_INPUT_MULTIPLY As Integer = 55
		Public Const KEY_INPUT_ADD As Integer = 78
		Public Const KEY_INPUT_SUBTRACT As Integer = 74
		Public Const KEY_INPUT_DECIMAL As Integer = 83
		Public Const KEY_INPUT_DIVIDE As Integer = 181
		Public Const KEY_INPUT_NUMPADENTER As Integer = 156
		Public Const KEY_INPUT_F1 As Integer = 59
		Public Const KEY_INPUT_F2 As Integer = 60
		Public Const KEY_INPUT_F3 As Integer = 61
		Public Const KEY_INPUT_F4 As Integer = 62
		Public Const KEY_INPUT_F5 As Integer = 63
		Public Const KEY_INPUT_F6 As Integer = 64
		Public Const KEY_INPUT_F7 As Integer = 65
		Public Const KEY_INPUT_F8 As Integer = 66
		Public Const KEY_INPUT_F9 As Integer = 67
		Public Const KEY_INPUT_F10 As Integer = 68
		Public Const KEY_INPUT_F11 As Integer = 87
		Public Const KEY_INPUT_F12 As Integer = 88
		Public Const KEY_INPUT_A As Integer = 30
		Public Const KEY_INPUT_B As Integer = 48
		Public Const KEY_INPUT_C As Integer = 46
		Public Const KEY_INPUT_D As Integer = 32
		Public Const KEY_INPUT_E As Integer = 18
		Public Const KEY_INPUT_F As Integer = 33
		Public Const KEY_INPUT_G As Integer = 34
		Public Const KEY_INPUT_H As Integer = 35
		Public Const KEY_INPUT_I As Integer = 23
		Public Const KEY_INPUT_J As Integer = 36
		Public Const KEY_INPUT_K As Integer = 37
		Public Const KEY_INPUT_L As Integer = 38
		Public Const KEY_INPUT_M As Integer = 50
		Public Const KEY_INPUT_N As Integer = 49
		Public Const KEY_INPUT_O As Integer = 24
		Public Const KEY_INPUT_P As Integer = 25
		Public Const KEY_INPUT_Q As Integer = 16
		Public Const KEY_INPUT_R As Integer = 19
		Public Const KEY_INPUT_S As Integer = 31
		Public Const KEY_INPUT_T As Integer = 20
		Public Const KEY_INPUT_U As Integer = 22
		Public Const KEY_INPUT_V As Integer = 47
		Public Const KEY_INPUT_W As Integer = 17
		Public Const KEY_INPUT_X As Integer = 45
		Public Const KEY_INPUT_Y As Integer = 21
		Public Const KEY_INPUT_Z As Integer = 44
		Public Const KEY_INPUT_0 As Integer = 11
		Public Const KEY_INPUT_1 As Integer = 2
		Public Const KEY_INPUT_2 As Integer = 3
		Public Const KEY_INPUT_3 As Integer = 4
		Public Const KEY_INPUT_4 As Integer = 5
		Public Const KEY_INPUT_5 As Integer = 6
		Public Const KEY_INPUT_6 As Integer = 7
		Public Const KEY_INPUT_7 As Integer = 8
		Public Const KEY_INPUT_8 As Integer = 9
		Public Const KEY_INPUT_9 As Integer = 10
		Public Const CTRL_CODE_BS As Integer = 8
		Public Const CTRL_CODE_TAB As Integer = 9
		Public Const CTRL_CODE_CR As Integer = 13
		Public Const CTRL_CODE_DEL As Integer = 16
		Public Const CTRL_CODE_COPY As Integer = 3
		Public Const CTRL_CODE_PASTE As Integer = 22
		Public Const CTRL_CODE_CUT As Integer = 24
		Public Const CTRL_CODE_ALL As Integer = 1
		Public Const CTRL_CODE_LEFT As Integer = 29
		Public Const CTRL_CODE_RIGHT As Integer = 28
		Public Const CTRL_CODE_UP As Integer = 30
		Public Const CTRL_CODE_DOWN As Integer = 31
		Public Const CTRL_CODE_HOME As Integer = 26
		Public Const CTRL_CODE_END As Integer = 25
		Public Const CTRL_CODE_PAGE_UP As Integer = 23
		Public Const CTRL_CODE_PAGE_DOWN As Integer = 21
		Public Const CTRL_CODE_ESC As Integer = 27
		Public Const CTRL_CODE_CMP As Integer = 32
		Public Const DX_KEYINPSTRCOLOR_NORMAL_STR As Integer = 0
		Public Const DX_KEYINPSTRCOLOR_NORMAL_STR_EDGE As Integer = 1
		Public Const DX_KEYINPSTRCOLOR_NORMAL_CURSOR As Integer = 2
		Public Const DX_KEYINPSTRCOLOR_SELECT_STR As Integer = 3
		Public Const DX_KEYINPSTRCOLOR_SELECT_STR_EDGE As Integer = 4
		Public Const DX_KEYINPSTRCOLOR_SELECT_STR_BACK As Integer = 5
		Public Const DX_KEYINPSTRCOLOR_IME_STR As Integer = 6
		Public Const DX_KEYINPSTRCOLOR_IME_STR_EDGE As Integer = 7
		Public Const DX_KEYINPSTRCOLOR_IME_STR_BACK As Integer = 8
		Public Const DX_KEYINPSTRCOLOR_IME_CURSOR As Integer = 9
		Public Const DX_KEYINPSTRCOLOR_IME_LINE As Integer = 10
		Public Const DX_KEYINPSTRCOLOR_IME_SELECT_STR As Integer = 11
		Public Const DX_KEYINPSTRCOLOR_IME_SELECT_STR_EDGE As Integer = 12
		Public Const DX_KEYINPSTRCOLOR_IME_SELECT_STR_BACK As Integer = 13
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_STR As Integer = 14
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_STR_EDGE As Integer = 15
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_SELECT_STR As Integer = 16
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_SELECT_STR_EDGE As Integer = 17
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_SELECT_STR_BACK As Integer = 18
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_EDGE As Integer = 19
		Public Const DX_KEYINPSTRCOLOR_IME_CONV_WIN_BACK As Integer = 20
		Public Const DX_KEYINPSTRCOLOR_IME_MODE_STR As Integer = 21
		Public Const DX_KEYINPSTRCOLOR_IME_MODE_STR_EDGE As Integer = 22
		Public Const DX_KEYINPSTRCOLOR_NUM As Integer = 23
		Public Const DX_KEYINPSTR_ENDCHARAMODE_OVERWRITE As Integer = 0
		Public Const DX_KEYINPSTR_ENDCHARAMODE_NOTCHANGE As Integer = 1
		Public Const DX_FSRESOLUTIONMODE_NATIVE As Integer = 0
		Public Const DX_FSRESOLUTIONMODE_DESKTOP As Integer = 1
		Public Const DX_FSRESOLUTIONMODE_MAXIMUM As Integer = 2
		Public Const DX_FSSCALINGMODE_BILINEAR As Integer = 0
		Public Const DX_FSSCALINGMODE_NEAREST As Integer = 1
		Public Const DX_CHANGESCREEN_OK As Integer = 0
		Public Const DX_CHANGESCREEN_RETURN As Integer = 1
		Public Const DX_CHANGESCREEN_DEFAULT As Integer = 2
		Public Const DX_CHANGESCREEN_REFRESHNORMAL As Integer = 3
		Public Const LOADIMAGE_TYPE_FILE As Integer = 0
		Public Const LOADIMAGE_TYPE_MEM As Integer = 1
		Public Const LOADIMAGE_TYPE_NONE As Integer = 1
		Public Const HTTP_ERR_SERVER As Integer = 0
		Public Const HTTP_ERR_NOTFOUND As Integer = 1
		Public Const HTTP_ERR_MEMORY As Integer = 2
		Public Const HTTP_ERR_LOST As Integer = 3
		Public Const HTTP_ERR_NONE As Integer = 1
		Public Const HTTP_RES_COMPLETE As Integer = 0
		Public Const HTTP_RES_STOP As Integer = 1
		Public Const HTTP_RES_ERROR As Integer = 2
		Public Const HTTP_RES_NOW As Integer = 1

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure IPDATA_IPv6
			<FieldOffset(0)> _
			Public Byte00 As Byte
			<FieldOffset(1)> _
			Public Byte01 As Byte
			<FieldOffset(2)> _
			Public Byte02 As Byte
			<FieldOffset(3)> _
			Public Byte03 As Byte
			<FieldOffset(4)> _
			Public Byte04 As Byte
			<FieldOffset(5)> _
			Public Byte05 As Byte
			<FieldOffset(6)> _
			Public Byte06 As Byte
			<FieldOffset(7)> _
			Public Byte07 As Byte
			<FieldOffset(8)> _
			Public Byte08 As Byte
			<FieldOffset(9)> _
			Public Byte09 As Byte
			<FieldOffset(10)> _
			Public Byte10 As Byte
			<FieldOffset(11)> _
			Public Byte11 As Byte
			<FieldOffset(12)> _
			Public Byte12 As Byte
			<FieldOffset(13)> _
			Public Byte13 As Byte
			<FieldOffset(14)> _
			Public Byte14 As Byte
			<FieldOffset(15)> _
			Public Byte15 As Byte
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure RECT
			<FieldOffset(0)> _
			Public left As Integer
			<FieldOffset(4)> _
			Public top As Integer
			<FieldOffset(8)> _
			Public right As Integer
			<FieldOffset(12)> _
			Public bottom As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MATRIX
			<FieldOffset(0)> _
			Public m00 As Single
			<FieldOffset(4)> _
			Public m01 As Single
			<FieldOffset(8)> _
			Public m02 As Single
			<FieldOffset(12)> _
			Public m03 As Single
			<FieldOffset(16)> _
			Public m10 As Single
			<FieldOffset(20)> _
			Public m11 As Single
			<FieldOffset(24)> _
			Public m12 As Single
			<FieldOffset(28)> _
			Public m13 As Single
			<FieldOffset(32)> _
			Public m20 As Single
			<FieldOffset(36)> _
			Public m21 As Single
			<FieldOffset(40)> _
			Public m22 As Single
			<FieldOffset(44)> _
			Public m23 As Single
			<FieldOffset(48)> _
			Public m30 As Single
			<FieldOffset(52)> _
			Public m31 As Single
			<FieldOffset(56)> _
			Public m32 As Single
			<FieldOffset(60)> _
			Public m33 As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MATRIX_D
			<FieldOffset(0)> _
			Public m00 As Double
			<FieldOffset(8)> _
			Public m01 As Double
			<FieldOffset(16)> _
			Public m02 As Double
			<FieldOffset(24)> _
			Public m03 As Double
			<FieldOffset(32)> _
			Public m10 As Double
			<FieldOffset(40)> _
			Public m11 As Double
			<FieldOffset(48)> _
			Public m12 As Double
			<FieldOffset(56)> _
			Public m13 As Double
			<FieldOffset(64)> _
			Public m20 As Double
			<FieldOffset(72)> _
			Public m21 As Double
			<FieldOffset(80)> _
			Public m22 As Double
			<FieldOffset(88)> _
			Public m23 As Double
			<FieldOffset(96)> _
			Public m30 As Double
			<FieldOffset(104)> _
			Public m31 As Double
			<FieldOffset(112)> _
			Public m32 As Double
			<FieldOffset(120)> _
			Public m33 As Double
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure COLORDATA
			<FieldOffset(0)> _
			Public ColorBitDepth As Short
			<FieldOffset(2)> _
			Public PixelByte As Short
			<FieldOffset(4)> _
			Public RedWidth As Byte
			<FieldOffset(5)> _
			Public GreenWidth As Byte
			<FieldOffset(6)> _
			Public BlueWidth As Byte
			<FieldOffset(7)> _
			Public AlphaWidth As Byte
			<FieldOffset(8)> _
			Public RedLoc As Byte
			<FieldOffset(9)> _
			Public GreenLoc As Byte
			<FieldOffset(10)> _
			Public BlueLoc As Byte
			<FieldOffset(11)> _
			Public AlphaLoc As Byte
			<FieldOffset(12)> _
			Public RedMask As UInteger
			<FieldOffset(16)> _
			Public GreenMask As UInteger
			<FieldOffset(20)> _
			Public BlueMask As UInteger
			<FieldOffset(24)> _
			Public AlphaMask As UInteger
			<FieldOffset(28)> _
			Public NoneMask As UInteger
			<FieldOffset(32)> _
			Public Palette As COLORPALETTEDATA
			<FieldOffset(1056)> _
			Public NoneLoc As Byte
			<FieldOffset(1057)> _
			Public NoneWidth As Byte
			<FieldOffset(1060)> _
			Public Format As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MV1_COLL_RESULT_POLY
			<FieldOffset(0)> _
			Public HitFlag As Integer
			<FieldOffset(4)> _
			Public HitPosition As VECTOR
			<FieldOffset(16)> _
			Public FrameIndex As Integer
			<FieldOffset(20)> _
			Public PolyIndex As Integer
			<FieldOffset(24)> _
			Public MaterialIndex As Integer
			<FieldOffset(28)> _
			Public Position0 As VECTOR
			<FieldOffset(40)> _
			Public Position1 As VECTOR
			<FieldOffset(52)> _
			Public Position2 As VECTOR
			<FieldOffset(64)> _
			Public Normal As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MV1_REF_POLYGON
			<FieldOffset(0)> _
			Public FrameIndex As UShort
			<FieldOffset(2)> _
			Public MaterialIndex As UShort
			<FieldOffset(4)> _
			Public VIndexTarget As Integer
			<FieldOffset(8)> _
			Public VIndex0 As Integer
			<FieldOffset(12)> _
			Public VIndex1 As Integer
			<FieldOffset(16)> _
			Public VIndex2 As Integer
			<FieldOffset(20)> _
			Public MinPosition As VECTOR
			<FieldOffset(32)> _
			Public MaxPosition As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MV1_REF_VERTEX
			<FieldOffset(0)> _
			Public Position As VECTOR
			<FieldOffset(12)> _
			Public Normal As VECTOR
			<FieldOffset(24)> _
			Public TexCoord0 As FLOAT2
			<FieldOffset(32)> _
			Public TexCoord1 As FLOAT2
			<FieldOffset(40)> _
			Public DiffuseColor As COLOR_U8
			<FieldOffset(44)> _
			Public SpecularColor As COLOR_U8
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure DINPUT_JOYSTATE
			<FieldOffset(0)> _
			Public X As Integer
			<FieldOffset(4)> _
			Public Y As Integer
			<FieldOffset(8)> _
			Public Z As Integer
			<FieldOffset(12)> _
			Public Rx As Integer
			<FieldOffset(16)> _
			Public Ry As Integer
			<FieldOffset(20)> _
			Public Rz As Integer
			<FieldOffset(24)> _
			Public Slider0 As Integer
			<FieldOffset(28)> _
			Public Slider1 As Integer
			<FieldOffset(32)> _
			Public POV0 As UInteger
			<FieldOffset(36)> _
			Public POV1 As UInteger
			<FieldOffset(40)> _
			Public POV2 As UInteger
			<FieldOffset(44)> _
			Public POV3 As UInteger
			<FieldOffset(48)> _
			Public Buttons0 As Byte
			<FieldOffset(49)> _
			Public Buttons1 As Byte
			<FieldOffset(50)> _
			Public Buttons2 As Byte
			<FieldOffset(51)> _
			Public Buttons3 As Byte
			<FieldOffset(52)> _
			Public Buttons4 As Byte
			<FieldOffset(53)> _
			Public Buttons5 As Byte
			<FieldOffset(54)> _
			Public Buttons6 As Byte
			<FieldOffset(55)> _
			Public Buttons7 As Byte
			<FieldOffset(56)> _
			Public Buttons8 As Byte
			<FieldOffset(57)> _
			Public Buttons9 As Byte
			<FieldOffset(58)> _
			Public Buttons10 As Byte
			<FieldOffset(59)> _
			Public Buttons11 As Byte
			<FieldOffset(60)> _
			Public Buttons12 As Byte
			<FieldOffset(61)> _
			Public Buttons13 As Byte
			<FieldOffset(62)> _
			Public Buttons14 As Byte
			<FieldOffset(63)> _
			Public Buttons15 As Byte
			<FieldOffset(64)> _
			Public Buttons16 As Byte
			<FieldOffset(65)> _
			Public Buttons17 As Byte
			<FieldOffset(66)> _
			Public Buttons18 As Byte
			<FieldOffset(67)> _
			Public Buttons19 As Byte
			<FieldOffset(68)> _
			Public Buttons20 As Byte
			<FieldOffset(69)> _
			Public Buttons21 As Byte
			<FieldOffset(70)> _
			Public Buttons22 As Byte
			<FieldOffset(71)> _
			Public Buttons23 As Byte
			<FieldOffset(72)> _
			Public Buttons24 As Byte
			<FieldOffset(73)> _
			Public Buttons25 As Byte
			<FieldOffset(74)> _
			Public Buttons26 As Byte
			<FieldOffset(75)> _
			Public Buttons27 As Byte
			<FieldOffset(76)> _
			Public Buttons28 As Byte
			<FieldOffset(77)> _
			Public Buttons29 As Byte
			<FieldOffset(78)> _
			Public Buttons30 As Byte
			<FieldOffset(79)> _
			Public Buttons31 As Byte
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure XINPUT_STATE
			<FieldOffset(0)> _
			Public Buttons0 As Byte
			<FieldOffset(1)> _
			Public Buttons1 As Byte
			<FieldOffset(2)> _
			Public Buttons2 As Byte
			<FieldOffset(3)> _
			Public Buttons3 As Byte
			<FieldOffset(4)> _
			Public Buttons4 As Byte
			<FieldOffset(5)> _
			Public Buttons5 As Byte
			<FieldOffset(6)> _
			Public Buttons6 As Byte
			<FieldOffset(7)> _
			Public Buttons7 As Byte
			<FieldOffset(8)> _
			Public Buttons8 As Byte
			<FieldOffset(9)> _
			Public Buttons9 As Byte
			<FieldOffset(10)> _
			Public Buttons10 As Byte
			<FieldOffset(11)> _
			Public Buttons11 As Byte
			<FieldOffset(12)> _
			Public Buttons12 As Byte
			<FieldOffset(13)> _
			Public Buttons13 As Byte
			<FieldOffset(14)> _
			Public Buttons14 As Byte
			<FieldOffset(15)> _
			Public Buttons15 As Byte
			<FieldOffset(16)> _
			Public LeftTrigger As Byte
			<FieldOffset(17)> _
			Public RightTrigger As Byte
			<FieldOffset(18)> _
			Public ThumbLX As Short
			<FieldOffset(20)> _
			Public ThumbLY As Short
			<FieldOffset(22)> _
			Public ThumbRX As Short
			<FieldOffset(24)> _
			Public ThumbRY As Short
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure IMEINPUTCLAUSEDATA
			<FieldOffset(0)> _
			Public Position As Integer
			<FieldOffset(4)> _
			Public Length As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure IMEINPUTDATA
			<FieldOffset(0)> _
			Public InputString As UInteger
			<FieldOffset(4)> _
			Public CursorPosition As Integer
			<FieldOffset(8)> _
			Public ClauseData As UInteger
			<FieldOffset(12)> _
			Public ClauseNum As Integer
			<FieldOffset(16)> _
			Public SelectClause As Integer
			<FieldOffset(20)> _
			Public CandidateNum As Integer
			<FieldOffset(24)> _
			Public CandidateList As UInteger
			<FieldOffset(28)> _
			Public SelectCandidate As Integer
			<FieldOffset(32)> _
			Public ConvertFlag As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure DISPLAYMODEDATA
			<FieldOffset(0)> _
			Public Width As Integer
			<FieldOffset(4)> _
			Public Height As Integer
			<FieldOffset(8)> _
			Public ColorBitDepth As Integer
			<FieldOffset(12)> _
			Public RefreshRate As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure DATEDATA
			<FieldOffset(0)> _
			Public Year As Integer
			<FieldOffset(4)> _
			Public Mon As Integer
			<FieldOffset(8)> _
			Public Day As Integer
			<FieldOffset(12)> _
			Public Hour As Integer
			<FieldOffset(16)> _
			Public Min As Integer
			<FieldOffset(20)> _
			Public Sec As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VECTOR
			<FieldOffset(0)> _
			Public x As Single
			<FieldOffset(4)> _
			Public y As Single
			<FieldOffset(8)> _
			Public z As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VECTOR_D
			<FieldOffset(0)> _
			Public x As Double
			<FieldOffset(8)> _
			Public y As Double
			<FieldOffset(16)> _
			Public z As Double
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure FLOAT2
			<FieldOffset(0)> _
			Public u As Single
			<FieldOffset(4)> _
			Public v As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure COLOR_F
			<FieldOffset(0)> _
			Public r As Single
			<FieldOffset(4)> _
			Public g As Single
			<FieldOffset(8)> _
			Public b As Single
			<FieldOffset(12)> _
			Public a As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure COLOR_U8
			<FieldOffset(0)> _
			Public b As Byte
			<FieldOffset(1)> _
			Public g As Byte
			<FieldOffset(2)> _
			Public r As Byte
			<FieldOffset(3)> _
			Public a As Byte
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure FLOAT4
			<FieldOffset(0)> _
			Public x As Single
			<FieldOffset(4)> _
			Public y As Single
			<FieldOffset(8)> _
			Public z As Single
			<FieldOffset(12)> _
			Public w As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure DOUBLE4
			<FieldOffset(0)> _
			Public x As Double
			<FieldOffset(8)> _
			Public y As Double
			<FieldOffset(16)> _
			Public z As Double
			<FieldOffset(24)> _
			Public w As Double
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure INT4
			<FieldOffset(0)> _
			Public x As Integer
			<FieldOffset(4)> _
			Public y As Integer
			<FieldOffset(8)> _
			Public z As Integer
			<FieldOffset(12)> _
			Public w As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VERTEX2D
			<FieldOffset(0)> _
			Public pos As VECTOR
			<FieldOffset(12)> _
			Public rhw As Single
			<FieldOffset(16)> _
			Public dif As COLOR_U8
			<FieldOffset(20)> _
			Public u As Single
			<FieldOffset(24)> _
			Public v As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VERTEX2DSHADER
			<FieldOffset(0)> _
			Public pos As VECTOR
			<FieldOffset(12)> _
			Public rhw As Single
			<FieldOffset(16)> _
			Public dif As COLOR_U8
			<FieldOffset(20)> _
			Public spc As COLOR_U8
			<FieldOffset(24)> _
			Public u As Single
			<FieldOffset(28)> _
			Public v As Single
			<FieldOffset(32)> _
			Public su As Single
			<FieldOffset(36)> _
			Public sv As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VERTEX
			<FieldOffset(0)> _
			Public x As Single
			<FieldOffset(4)> _
			Public y As Single
			<FieldOffset(8)> _
			Public u As Single
			<FieldOffset(12)> _
			Public v As Single
			<FieldOffset(16)> _
			Public b As Byte
			<FieldOffset(17)> _
			Public g As Byte
			<FieldOffset(18)> _
			Public r As Byte
			<FieldOffset(19)> _
			Public a As Byte
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VERTEX_3D
			<FieldOffset(0)> _
			Public pos As VECTOR
			<FieldOffset(12)> _
			Public b As Byte
			<FieldOffset(13)> _
			Public g As Byte
			<FieldOffset(14)> _
			Public r As Byte
			<FieldOffset(15)> _
			Public a As Byte
			<FieldOffset(16)> _
			Public u As Single
			<FieldOffset(20)> _
			Public v As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VERTEX3D
			<FieldOffset(0)> _
			Public pos As VECTOR
			<FieldOffset(12)> _
			Public norm As VECTOR
			<FieldOffset(24)> _
			Public dif As COLOR_U8
			<FieldOffset(28)> _
			Public spc As COLOR_U8
			<FieldOffset(32)> _
			Public u As Single
			<FieldOffset(36)> _
			Public v As Single
			<FieldOffset(40)> _
			Public su As Single
			<FieldOffset(44)> _
			Public sv As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure VERTEX3DSHADER
			<FieldOffset(0)> _
			Public pos As VECTOR
			<FieldOffset(12)> _
			Public spos As FLOAT4
			<FieldOffset(28)> _
			Public norm As VECTOR
			<FieldOffset(40)> _
			Public tan As VECTOR
			<FieldOffset(52)> _
			Public binorm As VECTOR
			<FieldOffset(64)> _
			Public dif As COLOR_U8
			<FieldOffset(68)> _
			Public spc As COLOR_U8
			<FieldOffset(72)> _
			Public u As Single
			<FieldOffset(76)> _
			Public v As Single
			<FieldOffset(80)> _
			Public su As Single
			<FieldOffset(84)> _
			Public sv As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure LIGHTPARAM
			<FieldOffset(0)> _
			Public LightType As Integer
			<FieldOffset(4)> _
			Public Diffuse As COLOR_F
			<FieldOffset(20)> _
			Public Specular As COLOR_F
			<FieldOffset(36)> _
			Public Ambient As COLOR_F
			<FieldOffset(52)> _
			Public Position As VECTOR
			<FieldOffset(64)> _
			Public Direction As VECTOR
			<FieldOffset(76)> _
			Public Range As Single
			<FieldOffset(80)> _
			Public Falloff As Single
			<FieldOffset(84)> _
			Public Attenuation0 As Single
			<FieldOffset(88)> _
			Public Attenuation1 As Single
			<FieldOffset(92)> _
			Public Attenuation2 As Single
			<FieldOffset(96)> _
			Public Theta As Single
			<FieldOffset(100)> _
			Public Phi As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MATERIALPARAM
			<FieldOffset(0)> _
			Public Diffuse As COLOR_F
			<FieldOffset(16)> _
			Public Ambient As COLOR_F
			<FieldOffset(32)> _
			Public Specular As COLOR_F
			<FieldOffset(48)> _
			Public Emissive As COLOR_F
			<FieldOffset(64)> _
			Public Power As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure HITRESULT_LINE
			<FieldOffset(0)> _
			Public HitFlag As Integer
			<FieldOffset(4)> _
			Public Position As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure HITRESULT_LINE_D
			<FieldOffset(0)> _
			Public HitFlag As Integer
			<FieldOffset(4)> _
			Public Position As VECTOR_D
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SEGMENT_SEGMENT_RESULT
			<FieldOffset(0)> _
			Public SegA_SegB_MinDist_Square As Single
			<FieldOffset(4)> _
			Public SegA_MinDist_Pos1_Pos2_t As Single
			<FieldOffset(8)> _
			Public SegB_MinDist_Pos1_Pos2_t As Single
			<FieldOffset(12)> _
			Public SegA_MinDist_Pos As VECTOR
			<FieldOffset(24)> _
			Public SegB_MinDist_Pos As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SEGMENT_SEGMENT_RESULT_D
			<FieldOffset(0)> _
			Public SegA_SegB_MinDist_Square As Double
			<FieldOffset(8)> _
			Public SegA_MinDist_Pos1_Pos2_t As Double
			<FieldOffset(16)> _
			Public SegB_MinDist_Pos1_Pos2_t As Double
			<FieldOffset(24)> _
			Public SegA_MinDist_Pos As VECTOR_D
			<FieldOffset(48)> _
			Public SegB_MinDist_Pos As VECTOR_D
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SEGMENT_POINT_RESULT
			<FieldOffset(0)> _
			Public Seg_Point_MinDist_Square As Single
			<FieldOffset(4)> _
			Public Seg_MinDist_Pos1_Pos2_t As Single
			<FieldOffset(8)> _
			Public Seg_MinDist_Pos As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SEGMENT_POINT_RESULT_D
			<FieldOffset(0)> _
			Public Seg_Point_MinDist_Square As Double
			<FieldOffset(8)> _
			Public Seg_MinDist_Pos1_Pos2_t As Double
			<FieldOffset(16)> _
			Public Seg_MinDist_Pos As VECTOR_D
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SEGMENT_TRIANGLE_RESULT
			<FieldOffset(0)> _
			Public Seg_Tri_MinDist_Square As Single
			<FieldOffset(4)> _
			Public Seg_MinDist_Pos1_Pos2_t As Single
			<FieldOffset(8)> _
			Public Seg_MinDist_Pos As VECTOR
			<FieldOffset(20)> _
			Public Tri_MinDist_Pos1_w As Single
			<FieldOffset(24)> _
			Public Tri_MinDist_Pos2_w As Single
			<FieldOffset(28)> _
			Public Tri_MinDist_Pos3_w As Single
			<FieldOffset(32)> _
			Public Tri_MinDist_Pos As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SEGMENT_TRIANGLE_RESULT_D
			<FieldOffset(0)> _
			Public Seg_Tri_MinDist_Square As Double
			<FieldOffset(8)> _
			Public Seg_MinDist_Pos1_Pos2_t As Double
			<FieldOffset(16)> _
			Public Seg_MinDist_Pos As VECTOR_D
			<FieldOffset(40)> _
			Public Tri_MinDist_Pos1_w As Double
			<FieldOffset(48)> _
			Public Tri_MinDist_Pos2_w As Double
			<FieldOffset(56)> _
			Public Tri_MinDist_Pos3_w As Double
			<FieldOffset(64)> _
			Public Tri_MinDist_Pos As VECTOR_D
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure TRIANGLE_POINT_RESULT
			<FieldOffset(0)> _
			Public Tri_Pnt_MinDist_Square As Single
			<FieldOffset(4)> _
			Public Tri_MinDist_Pos1_w As Single
			<FieldOffset(8)> _
			Public Tri_MinDist_Pos2_w As Single
			<FieldOffset(12)> _
			Public Tri_MinDist_Pos3_w As Single
			<FieldOffset(16)> _
			Public Tri_MinDist_Pos As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure TRIANGLE_POINT_RESULT_D
			<FieldOffset(0)> _
			Public Tri_Pnt_MinDist_Square As Double
			<FieldOffset(8)> _
			Public Tri_MinDist_Pos1_w As Double
			<FieldOffset(16)> _
			Public Tri_MinDist_Pos2_w As Double
			<FieldOffset(24)> _
			Public Tri_MinDist_Pos3_w As Double
			<FieldOffset(32)> _
			Public Tri_MinDist_Pos As VECTOR_D
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure PLANE_POINT_RESULT
			<FieldOffset(0)> _
			Public Pnt_Plane_Normal_Side As Integer
			<FieldOffset(4)> _
			Public Plane_Pnt_MinDist_Square As Single
			<FieldOffset(8)> _
			Public Plane_MinDist_Pos As VECTOR
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure PLANE_POINT_RESULT_D
			<FieldOffset(0)> _
			Public Pnt_Plane_Normal_Side As Integer
			<FieldOffset(4)> _
			Public Plane_Pnt_MinDist_Square As Double
			<FieldOffset(12)> _
			Public Plane_MinDist_Pos As VECTOR_D
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MV1_COLL_RESULT_POLY_DIM
			<FieldOffset(0)> _
			Public HitNum As Integer
			<FieldOffset(4)> _
			Public [Dim] As UInteger
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure MV1_REF_POLYGONLIST
			<FieldOffset(0)> _
			Public PolygonNum As Integer
			<FieldOffset(4)> _
			Public VertexNum As Integer
			<FieldOffset(8)> _
			Public MinPosition As VECTOR
			<FieldOffset(20)> _
			Public MaxPosition As VECTOR
			<FieldOffset(32)> _
			Public Polygons As UInteger
			<FieldOffset(36)> _
			Public Vertexs As UInteger
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure SOUND3D_REVERB_PARAM
			<FieldOffset(0)> _
			Public WetDryMix As Single
			<FieldOffset(4)> _
			Public ReflectionsDelay As UInteger
			<FieldOffset(8)> _
			Public ReverbDelay As Byte
			<FieldOffset(9)> _
			Public RearDelay As Byte
			<FieldOffset(10)> _
			Public PositionLeft As Byte
			<FieldOffset(11)> _
			Public PositionRight As Byte
			<FieldOffset(12)> _
			Public PositionMatrixLeft As Byte
			<FieldOffset(13)> _
			Public PositionMatrixRight As Byte
			<FieldOffset(14)> _
			Public EarlyDiffusion As Byte
			<FieldOffset(15)> _
			Public LateDiffusion As Byte
			<FieldOffset(16)> _
			Public LowEQGain As Byte
			<FieldOffset(17)> _
			Public LowEQCutoff As Byte
			<FieldOffset(18)> _
			Public HighEQGain As Byte
			<FieldOffset(19)> _
			Public HighEQCutoff As Byte
			<FieldOffset(20)> _
			Public RoomFilterFreq As Single
			<FieldOffset(24)> _
			Public RoomFilterMain As Single
			<FieldOffset(28)> _
			Public RoomFilterHF As Single
			<FieldOffset(32)> _
			Public ReflectionsGain As Single
			<FieldOffset(36)> _
			Public ReverbGain As Single
			<FieldOffset(40)> _
			Public DecayTime As Single
			<FieldOffset(44)> _
			Public Density As Single
			<FieldOffset(48)> _
			Public RoomSize As Single
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure COLORPALETTEDATA
			<FieldOffset(0)> _
			Public Blue As Byte
			<FieldOffset(1)> _
			Public Green As Byte
			<FieldOffset(2)> _
			Public Red As Byte
			<FieldOffset(3)> _
			Public Alpha As Byte
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure BASEIMAGE
			<FieldOffset(0)> _
			Public ColorData As COLORDATA
			<FieldOffset(1064)> _
			Public Width As Integer
			<FieldOffset(1068)> _
			Public Height As Integer
			<FieldOffset(1072)> _
			Public Pitch As Integer
			<FieldOffset(1076)> _
			Public GraphData As UInteger
			<FieldOffset(1080)> _
			Public MipMapCount As Integer
			<FieldOffset(1084)> _
			Public GraphDataCount As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure LINEDATA
			<FieldOffset(0)> _
			Public x1 As Integer
			<FieldOffset(4)> _
			Public y1 As Integer
			<FieldOffset(8)> _
			Public x2 As Integer
			<FieldOffset(12)> _
			Public y2 As Integer
			<FieldOffset(16)> _
			Public color As Integer
			<FieldOffset(20)> _
			Public pal As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure POINTDATA
			<FieldOffset(0)> _
			Public x As Integer
			<FieldOffset(4)> _
			Public y As Integer
			<FieldOffset(8)> _
			Public color As Integer
			<FieldOffset(12)> _
			Public pal As Integer
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure IMAGEFORMATDESC
			<FieldOffset(0)> _
			Public TextureFlag As Byte
			<FieldOffset(1)> _
			Public CubeMapTextureFlag As Byte
			<FieldOffset(2)> _
			Public AlphaChFlag As Byte
			<FieldOffset(3)> _
			Public DrawValidFlag As Byte
			<FieldOffset(4)> _
			Public SystemMemFlag As Byte
			<FieldOffset(5)> _
			Public UseManagedTextureFlag As Byte
			<FieldOffset(6)> _
			Public BaseFormat As Byte
			<FieldOffset(7)> _
			Public MipMapCount As Byte
			<FieldOffset(8)> _
			Public AlphaTestFlag As Byte
			<FieldOffset(9)> _
			Public FloatTypeFlag As Byte
			<FieldOffset(10)> _
			Public ColorBitDepth As Byte
			<FieldOffset(11)> _
			Public ChannelNum As Byte
			<FieldOffset(12)> _
			Public ChannelBitDepth As Byte
			<FieldOffset(13)> _
			Public BlendGraphFlag As Byte
			<FieldOffset(14)> _
			Public UsePaletteFlag As Byte
			<FieldOffset(15)> _
			Public MSSamples As Byte
			<FieldOffset(16)> _
			Public MSQuality As Byte
		End Structure

		<StructLayout(LayoutKind.Explicit)> _
		Public Structure IPDATA
			<FieldOffset(0)> _
			Public d1 As Byte
			<FieldOffset(1)> _
			Public d2 As Byte
			<FieldOffset(2)> _
			Public d3 As Byte
			<FieldOffset(3)> _
			Public d4 As Byte
		End Structure


		Public Shared Function VConvFtoD([In] As VECTOR) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = [In].x
			Result.y = [In].y
			Result.z = [In].z
			Return Result
		End Function

		Public Shared Function VConvDtoF([In] As VECTOR_D) As VECTOR
			Dim Result As VECTOR
            Result.x = [In].x
            Result.y = [In].y
            Result.z = [In].z
			Return Result
		End Function

		Public Shared Function VGet(x As Single, y As Single, z As Single) As VECTOR
			Dim Result As VECTOR
			Result.x = x
			Result.y = y
			Result.z = z
			Return Result
		End Function

		Public Shared Function VGetD(x As Double, y As Double, z As Double) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = x
			Result.y = y
			Result.z = z
			Return Result
		End Function

		Public Shared Function VAdd(In1 As VECTOR, In2 As VECTOR) As VECTOR
			Dim Result As VECTOR
			Result.x = In1.x + In2.x
			Result.y = In1.y + In2.y
			Result.z = In1.z + In2.z
			Return Result
		End Function

		Public Shared Function VAddD(In1 As VECTOR_D, In2 As VECTOR_D) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = In1.x + In2.x
			Result.y = In1.y + In2.y
			Result.z = In1.z + In2.z
			Return Result
		End Function

		Public Shared Function VSub(In1 As VECTOR, In2 As VECTOR) As VECTOR
			Dim Result As VECTOR
			Result.x = In1.x - In2.x
			Result.y = In1.y - In2.y
			Result.z = In1.z - In2.z
			Return Result
		End Function

		Public Shared Function VSubD(In1 As VECTOR_D, In2 As VECTOR_D) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = In1.x - In2.x
			Result.y = In1.y - In2.y
			Result.z = In1.z - In2.z
			Return Result
		End Function

		Public Shared Function VDot(In1 As VECTOR, In2 As VECTOR) As Single
			Return In1.x * In2.x + In1.y * In2.y + In1.z * In2.z
		End Function

		Public Shared Function VDotD(In1 As VECTOR_D, In2 As VECTOR_D) As Double
			Return In1.x * In2.x + In1.y * In2.y + In1.z * In2.z
		End Function

		Public Shared Function VCross(In1 As VECTOR, In2 As VECTOR) As VECTOR
			Dim Result As VECTOR
			Result.x = In1.y * In2.z - In1.z * In2.y
			Result.y = In1.z * In2.x - In1.x * In2.z
			Result.z = In1.x * In2.y - In1.y * In2.x
			Return Result
		End Function

		Public Shared Function VCrossD(In1 As VECTOR_D, In2 As VECTOR_D) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = In1.y * In2.z - In1.z * In2.y
			Result.y = In1.z * In2.x - In1.x * In2.z
			Result.z = In1.x * In2.y - In1.y * In2.x
			Return Result
		End Function

		Public Shared Function VScale([In] As VECTOR, Scale As Single) As VECTOR
			Dim Result As VECTOR
			Result.x = [In].x * Scale
			Result.y = [In].y * Scale
			Result.z = [In].z * Scale
			Return Result
		End Function

		Public Shared Function VScaleD([In] As VECTOR_D, Scale As Double) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = [In].x * Scale
			Result.y = [In].y * Scale
			Result.z = [In].z * Scale
			Return Result
		End Function

		Public Shared Function VSquareSize([In] As VECTOR) As Single
			Return [In].x * [In].x + [In].y * [In].y + [In].z * [In].z
		End Function

		Public Shared Function VSquareSizeD([In] As VECTOR_D) As Double
			Return [In].x * [In].x + [In].y * [In].y + [In].z * [In].z
		End Function

		Public Shared Function VTransform(InV As VECTOR, InM As MATRIX) As VECTOR
			Dim Result As VECTOR
			Result.x = InV.x * InM.m00 + InV.y * InM.m10 + InV.z * InM.m20 + InM.m30
			Result.y = InV.x * InM.m01 + InV.y * InM.m11 + InV.z * InM.m21 + InM.m31
			Result.z = InV.x * InM.m02 + InV.y * InM.m12 + InV.z * InM.m22 + InM.m32
			Return Result
		End Function

		Public Shared Function VTransformD(InV As VECTOR_D, InM As MATRIX_D) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = InV.x * InM.m00 + InV.y * InM.m10 + InV.z * InM.m20 + InM.m30
			Result.y = InV.x * InM.m01 + InV.y * InM.m11 + InV.z * InM.m21 + InM.m31
			Result.z = InV.x * InM.m02 + InV.y * InM.m12 + InV.z * InM.m22 + InM.m32
			Return Result
		End Function

		Public Shared Function VTransformSR(InV As VECTOR, InM As MATRIX) As VECTOR
			Dim Result As VECTOR
			Result.x = InV.x * InM.m00 + InV.y * InM.m10 + InV.z * InM.m20
			Result.y = InV.x * InM.m01 + InV.y * InM.m11 + InV.z * InM.m21
			Result.z = InV.x * InM.m02 + InV.y * InM.m12 + InV.z * InM.m22
			Return Result
		End Function

		Public Shared Function VTransformSRD(InV As VECTOR_D, InM As MATRIX_D) As VECTOR_D
			Dim Result As VECTOR_D
			Result.x = InV.x * InM.m00 + InV.y * InM.m10 + InV.z * InM.m20
			Result.y = InV.x * InM.m01 + InV.y * InM.m11 + InV.z * InM.m21
			Result.z = InV.x * InM.m02 + InV.y * InM.m12 + InV.z * InM.m22
			Return Result
		End Function



		#if DX_USE_UNSAFE Then
		<UnmanagedFunctionPointer(CallingConvention.Cdecl)> _
		Public Delegate Function SetActiveStateChangeCallBackFunctionCallback(ActiveState As Integer, UserData As System.Void*) As Integer
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetActiveStateChangeCallBackFunction")> _
		Shared Function dx_SetActiveStateChangeCallBackFunction_x86(Callback As SetActiveStateChangeCallBackFunctionCallback, UserData As System.Void*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetActiveStateChangeCallBackFunction")> _
		Shared Function dx_SetActiveStateChangeCallBackFunction_x64(Callback As SetActiveStateChangeCallBackFunctionCallback, UserData As System.Void*) As Integer
		End Function
		Public Shared Function SetActiveStateChangeCallBackFunction(Callback As SetActiveStateChangeCallBackFunctionCallback, UserData As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetActiveStateChangeCallBackFunction_x86(Callback, UserData)
			Else
				Return dx_SetActiveStateChangeCallBackFunction_x64(Callback, UserData)
			End If
		End Function

		<UnmanagedFunctionPointer(CallingConvention.Cdecl)> _
		Public Delegate Sub SetUseASyncChangeWindowModeFunctionCallback(Data As System.Void*)
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseASyncChangeWindowModeFunction")> _
		Shared Function dx_SetUseASyncChangeWindowModeFunction_x86(Flag As Integer, CallBackFunction As SetUseASyncChangeWindowModeFunctionCallback, Data As System.Void*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseASyncChangeWindowModeFunction")> _
		Shared Function dx_SetUseASyncChangeWindowModeFunction_x64(Flag As Integer, CallBackFunction As SetUseASyncChangeWindowModeFunctionCallback, Data As System.Void*) As Integer
		End Function
		Public Shared Function SetUseASyncChangeWindowModeFunction(Flag As Integer, CallBackFunction As SetUseASyncChangeWindowModeFunctionCallback, Data As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseASyncChangeWindowModeFunction_x86(Flag, CallBackFunction, Data)
			Else
				Return dx_SetUseASyncChangeWindowModeFunction_x64(Flag, CallBackFunction, Data)
			End If
		End Function
		#End If
		<UnmanagedFunctionPointer(CallingConvention.Cdecl)> _
		Public Delegate Sub SetMenuItemSelectCallBackFunctionCallback(ItemName As String, ItemID As Integer)
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemSelectCallBackFunction")> _
		Shared Function dx_SetMenuItemSelectCallBackFunction_x86(CallBackFunction As SetMenuItemSelectCallBackFunctionCallback) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemSelectCallBackFunction")> _
		Shared Function dx_SetMenuItemSelectCallBackFunction_x64(CallBackFunction As SetMenuItemSelectCallBackFunctionCallback) As Integer
		End Function
		Public Shared Function SetMenuItemSelectCallBackFunction(CallBackFunction As SetMenuItemSelectCallBackFunctionCallback) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemSelectCallBackFunction_x86(CallBackFunction)
			Else
				Return dx_SetMenuItemSelectCallBackFunction_x64(CallBackFunction)
			End If
		End Function

		<UnmanagedFunctionPointer(CallingConvention.Cdecl)> _
		Public Delegate Sub SetWindowMenuCallback(ID As UShort)
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowMenu")> _
		Shared Function dx_SetWindowMenu_x86(MenuID As Integer, MenuProc As SetWindowMenuCallback) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowMenu")> _
		Shared Function dx_SetWindowMenu_x64(MenuID As Integer, MenuProc As SetWindowMenuCallback) As Integer
		End Function
		Public Shared Function SetWindowMenu(MenuID As Integer, MenuProc As SetWindowMenuCallback) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowMenu_x86(MenuID, MenuProc)
			Else
				Return dx_SetWindowMenu_x64(MenuID, MenuProc)
			End If
		End Function

		<UnmanagedFunctionPointer(CallingConvention.Cdecl)> _
		Public Delegate Sub SetRestoreShredPointCallback()
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetRestoreShredPoint")> _
		Shared Function dx_SetRestoreShredPoint_x86(ShredPoint As SetRestoreShredPointCallback) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetRestoreShredPoint")> _
		Shared Function dx_SetRestoreShredPoint_x64(ShredPoint As SetRestoreShredPointCallback) As Integer
		End Function
		Public Shared Function SetRestoreShredPoint(ShredPoint As SetRestoreShredPointCallback) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetRestoreShredPoint_x86(ShredPoint)
			Else
				Return dx_SetRestoreShredPoint_x64(ShredPoint)
			End If
		End Function

		<UnmanagedFunctionPointer(CallingConvention.Cdecl)> _
		Public Delegate Sub SetRestoreGraphCallbackCallback()
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetRestoreGraphCallback")> _
		Shared Function dx_SetRestoreGraphCallback_x86(Callback As SetRestoreGraphCallbackCallback) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetRestoreGraphCallback")> _
		Shared Function dx_SetRestoreGraphCallback_x64(Callback As SetRestoreGraphCallbackCallback) As Integer
		End Function
		Public Shared Function SetRestoreGraphCallback(Callback As SetRestoreGraphCallbackCallback) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetRestoreGraphCallback_x86(Callback)
			Else
				Return dx_SetRestoreGraphCallback_x64(Callback)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClearDrawScreen")> _
		Shared Function dx_ClearDrawScreen_x86(ByRef ClearRect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClearDrawScreen")> _
		Shared Function dx_ClearDrawScreen_x64(ByRef ClearRect As RECT) As Integer
		End Function
		Public Shared Function ClearDrawScreen(ByRef ClearRect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClearDrawScreen_x86(ClearRect)
			Else
				Return dx_ClearDrawScreen_x64(ClearRect)
			End If
		End Function
		Public Shared Function ClearDrawScreen() As Integer
			Dim temp As RECT

			temp.left = -1
			temp.top = -1
			temp.right = -1
			temp.bottom = -1
			If System.IntPtr.Size = 4 Then
				Return dx_ClearDrawScreen_x86(temp)
			Else
				Return dx_ClearDrawScreen_x64(temp)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClearDrawScreenZBuffer")> _
		Shared Function dx_ClearDrawScreenZBuffer_x86(ByRef ClearRect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClearDrawScreenZBuffer")> _
		Shared Function dx_ClearDrawScreenZBuffer_x64(ByRef ClearRect As RECT) As Integer
		End Function
		Public Shared Function ClearDrawScreenZBuffer(ByRef ClearRect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClearDrawScreenZBuffer_x86(ClearRect)
			Else
				Return dx_ClearDrawScreenZBuffer_x64(ClearRect)
			End If
		End Function
		Public Shared Function ClearDrawScreenZBuffer() As Integer
			Dim temp As RECT

			temp.left = -1
			temp.top = -1
			temp.right = -1
			temp.bottom = -1
			If System.IntPtr.Size = 4 Then
				Return dx_ClearDrawScreenZBuffer_x86(temp)
			Else
				Return dx_ClearDrawScreenZBuffer_x64(temp)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputStringColor")> _
		Shared Function dx_SetKeyInputStringColor_x86(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong, IMESelectWinF As ULong, _
			SelectStrBackColor As ULong, SelectStrColor As ULong, SelectStrEdgeColor As ULong) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputStringColor")> _
		Shared Function dx_SetKeyInputStringColor_x64(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong, IMESelectWinF As ULong, _
			SelectStrBackColor As ULong, SelectStrColor As ULong, SelectStrEdgeColor As ULong) As Integer
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, 0, 0, 0, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, 0, 0, 0, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, 0, 0, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, 0, 0, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, 0, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, 0, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, &HffffffffffffffffUL, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, &HffffffffffffffffUL, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong, IMESelectWinF As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					&HffffffffffffffffUL, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong, IMESelectWinF As ULong, _
			SelectStrBackColor As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					SelectStrBackColor, &HffffffffffffffffUL, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					SelectStrBackColor, &HffffffffffffffffUL, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong, IMESelectWinF As ULong, _
			SelectStrBackColor As ULong, SelectStrColor As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					SelectStrBackColor, SelectStrColor, &HffffffffffffffffUL)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					SelectStrBackColor, SelectStrColor, &HffffffffffffffffUL)
			End If
		End Function
		Public Shared Function SetKeyInputStringColor(NmlStr As ULong, NmlCur As ULong, IMEStr As ULong, IMECur As ULong, IMELine As ULong, IMESelectStr As ULong, _
			IMEModeStr As ULong, NmlStrE As ULong, IMESelectStrE As ULong, IMEModeStrE As ULong, IMESelectWinE As ULong, IMESelectWinF As ULong, _
			SelectStrBackColor As ULong, SelectStrColor As ULong, SelectStrEdgeColor As ULong) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor_x86(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					SelectStrBackColor, SelectStrColor, SelectStrEdgeColor)
			Else
				Return dx_SetKeyInputStringColor_x64(NmlStr, NmlCur, IMEStr, IMECur, IMELine, IMESelectStr, _
					IMEModeStr, NmlStrE, IMESelectStrE, IMEModeStrE, IMESelectWinE, IMESelectWinF, _
					SelectStrBackColor, SelectStrColor, SelectStrEdgeColor)
			End If
		End Function


		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphFilterS")> _
		Shared Function dx_GraphFilterS_x86(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer, Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphFilterS")> _
		Shared Function dx_GraphFilterS_x64(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer, Param5 As Integer) As Integer
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer, Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, Param0, Param1, Param2, Param3, _
					Param4, Param5)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, Param0, Param1, Param2, Param3, _
					Param4, Param5)
			End If
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, Param0, Param1, Param2, Param3, _
					Param4, 0)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, Param0, Param1, Param2, Param3, _
					Param4, 0)
			End If
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, Param0, Param1, Param2, Param3, _
					0, 0)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, Param0, Param1, Param2, Param3, _
					0, 0)
			End If
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, Param0, Param1, Param2, 0, _
					0, 0)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, Param0, Param1, Param2, 0, _
					0, 0)
			End If
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, Param0, Param1, 0, 0, _
					0, 0)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, Param0, Param1, 0, 0, _
					0, 0)
			End If
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, Param0, 0, 0, 0, _
					0, 0)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, Param0, 0, 0, 0, _
					0, 0)
			End If
		End Function
		Public Shared Function GraphFilter(GrHandle As Integer, FilterType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterS_x86(GrHandle, FilterType, 0, 0, 0, 0, _
					0, 0)
			Else
				Return dx_GraphFilterS_x64(GrHandle, FilterType, 0, 0, 0, 0, _
					0, 0)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphFilterBltS")> _
		Shared Function dx_GraphFilterBltS_x86(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphFilterBltS")> _
		Shared Function dx_GraphFilterBltS_x64(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					Param3, Param4, Param5)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					Param3, Param4, Param5)
			End If
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					Param3, Param4, 0)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					Param3, Param4, 0)
			End If
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					Param3, 0, 0)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					Param3, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					0, 0, 0)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, Param2, _
					0, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, 0, _
					0, 0, 0)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, Param0, Param1, 0, _
					0, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, Param0, 0, 0, _
					0, 0, 0)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, Param0, 0, 0, _
					0, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterBlt(SrcGrHandle As Integer, DestGrHandle As Integer, FilterType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterBltS_x86(SrcGrHandle, DestGrHandle, FilterType, 0, 0, 0, _
					0, 0, 0)
			Else
				Return dx_GraphFilterBltS_x64(SrcGrHandle, DestGrHandle, FilterType, 0, 0, 0, _
					0, 0, 0)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphFilterRectBltS")> _
		Shared Function dx_GraphFilterRectBltS_x86(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphFilterRectBltS")> _
		Shared Function dx_GraphFilterRectBltS_x64(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					Param3, Param4, Param5)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					Param3, Param4, Param5)
			End If
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer, Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					Param3, Param4, 0)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					Param3, Param4, 0)
			End If
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, _
			Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					Param3, 0, 0)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					Param3, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					0, 0, 0)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, Param2, _
					0, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer, Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, 0, _
					0, 0, 0)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, Param1, 0, _
					0, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, 0, 0, _
					0, 0, 0)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, Param0, 0, 0, _
					0, 0, 0)
			End If
		End Function
		Public Shared Function GraphFilterRectBlt(SrcGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, SrcY2 As Integer, _
			DestX As Integer, DestY As Integer, FilterType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphFilterRectBltS_x86(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, 0, 0, 0, _
					0, 0, 0)
			Else
				Return dx_GraphFilterRectBltS_x64(SrcGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, SrcY2, _
					DestX, DestY, FilterType, 0, 0, 0, _
					0, 0, 0)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphBlendS")> _
		Shared Function dx_GraphBlendS_x86(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, _
			Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphBlendS")> _
		Shared Function dx_GraphBlendS_x64(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, _
			Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, _
			Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, Param3, Param4, Param5)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, Param3, Param4, Param5)
			End If
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, _
			Param2 As Integer, Param3 As Integer, Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, Param3, Param4, 0)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, Param3, Param4, 0)
			End If
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, _
			Param2 As Integer, Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, Param3, 0, 0)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, Param3, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, _
			Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, 0, 0, 0)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					Param2, 0, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					0, 0, 0, 0)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, Param1, _
					0, 0, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, 0, _
					0, 0, 0, 0)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, Param0, 0, _
					0, 0, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlend(GrHandle As Integer, BlendGrHandle As Integer, BlendRatio As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendS_x86(GrHandle, BlendGrHandle, BlendRatio, BlendType, 0, 0, _
					0, 0, 0, 0)
			Else
				Return dx_GraphBlendS_x64(GrHandle, BlendGrHandle, BlendRatio, BlendType, 0, 0, _
					0, 0, 0, 0)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphBlendBltS")> _
		Shared Function dx_GraphBlendBltS_x86(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphBlendBltS")> _
		Shared Function dx_GraphBlendBltS_x64(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, Param3, Param4, Param5)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, Param3, Param4, Param5)
			End If
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, Param3, Param4, 0)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, Param3, Param4, 0)
			End If
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer, Param2 As Integer, Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, Param3, 0, 0)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, Param3, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer, Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, 0, 0, 0)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, Param2, 0, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer, _
			Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, 0, 0, 0, 0)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					Param1, 0, 0, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					0, 0, 0, 0, 0)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, Param0, _
					0, 0, 0, 0, 0)
			End If
		End Function
		Public Shared Function GraphBlendBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, BlendRatio As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, 0, _
					0, 0, 0, 0, 0)
			Else
				Return dx_GraphBlendBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, BlendRatio, BlendType, 0, _
					0, 0, 0, 0, 0)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphBlendRectBltS")> _
		Shared Function dx_GraphBlendRectBltS_x86(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, _
			Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphBlendRectBltS")> _
		Shared Function dx_GraphBlendRectBltS_x64(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, _
			Param5 As Integer) As Integer
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer, _
			Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, Param3, Param4, _
					Param5)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, Param3, Param4, _
					Param5)
			End If
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, Param3, Param4, _
					0)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, Param3, Param4, _
					0)
			End If
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, Param3, 0, _
					0)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, Param3, 0, _
					0)
			End If
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, 0, 0, _
					0)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, Param2, 0, 0, _
					0)
			End If
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer, Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, 0, 0, 0, _
					0)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, Param1, 0, 0, 0, _
					0)
			End If
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, 0, 0, 0, 0, _
					0)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, Param0, 0, 0, 0, 0, _
					0)
			End If
		End Function
		Public Shared Function GraphBlendRectBlt(SrcGrHandle As Integer, BlendGrHandle As Integer, DestGrHandle As Integer, SrcX1 As Integer, SrcY1 As Integer, SrcX2 As Integer, _
			SrcY2 As Integer, BlendX As Integer, BlendY As Integer, DestX As Integer, DestY As Integer, BlendRatio As Integer, _
			BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphBlendRectBltS_x86(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, 0, 0, 0, 0, 0, _
					0)
			Else
				Return dx_GraphBlendRectBltS_x64(SrcGrHandle, BlendGrHandle, DestGrHandle, SrcX1, SrcY1, SrcX2, _
					SrcY2, BlendX, BlendY, DestX, DestY, BlendRatio, _
					BlendType, 0, 0, 0, 0, 0, _
					0)
			End If
		End Function


		<DllImport(DX_DLL_32, EntryPoint := "dx_SetBlendGraphParamS")> _
		Shared Function dx_SetBlendGraphParamS_x86(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer, Param5 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetBlendGraphParamS")> _
		Shared Function dx_SetBlendGraphParamS_x64(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer, Param5 As Integer) As Integer
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer, Param5 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, Param0, Param1, Param2, Param3, _
					Param4, Param5)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, Param0, Param1, Param2, Param3, _
					Param4, Param5)
			End If
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer, _
			Param4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, Param0, Param1, Param2, Param3, _
					Param4, 0)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, Param0, Param1, Param2, Param3, _
					Param4, 0)
			End If
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer, Param3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, Param0, Param1, Param2, Param3, _
					0, 0)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, Param0, Param1, Param2, Param3, _
					0, 0)
			End If
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer, Param2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, Param0, Param1, Param2, 0, _
					0, 0)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, Param0, Param1, Param2, 0, _
					0, 0)
			End If
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer, Param0 As Integer, Param1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, Param0, Param1, 0, 0, _
					0, 0)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, Param0, Param1, 0, 0, _
					0, 0)
			End If
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer, Param0 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, Param0, 0, 0, 0, _
					0, 0)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, Param0, 0, 0, 0, _
					0, 0)
			End If
		End Function
		Public Shared Function SetBlendGraphParam(BlendGraph As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphParamS_x86(BlendGraph, BlendType, 0, 0, 0, 0, _
					0, 0)
			Else
				Return dx_SetBlendGraphParamS_x64(BlendGraph, BlendType, 0, 0, 0, 0, _
					0, 0)
			End If
		End Function



		<DllImport(DX_DLL_32, EntryPoint := "dx_DxLib_Init")> _
		Shared Function dx_DxLib_Init_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxLib_Init")> _
		Shared Function dx_DxLib_Init_x64() As Integer
		End Function
		Public Shared Function DxLib_Init() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxLib_Init_x86()
			Else
				Return dx_DxLib_Init_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxLib_End")> _
		Shared Function dx_DxLib_End_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxLib_End")> _
		Shared Function dx_DxLib_End_x64() As Integer
		End Function
		Public Shared Function DxLib_End() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxLib_End_x86()
			Else
				Return dx_DxLib_End_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxLib_GlobalStructInitialize")> _
		Shared Function dx_DxLib_GlobalStructInitialize_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxLib_GlobalStructInitialize")> _
		Shared Function dx_DxLib_GlobalStructInitialize_x64() As Integer
		End Function
		Public Shared Function DxLib_GlobalStructInitialize() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxLib_GlobalStructInitialize_x86()
			Else
				Return dx_DxLib_GlobalStructInitialize_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxLib_IsInit")> _
		Shared Function dx_DxLib_IsInit_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxLib_IsInit")> _
		Shared Function dx_DxLib_IsInit_x64() As Integer
		End Function
		Public Shared Function DxLib_IsInit() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxLib_IsInit_x86()
			Else
				Return dx_DxLib_IsInit_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ProcessMessage")> _
		Shared Function dx_ProcessMessage_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ProcessMessage")> _
		Shared Function dx_ProcessMessage_x64() As Integer
		End Function
		Public Shared Function ProcessMessage() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessMessage_x86()
			Else
				Return dx_ProcessMessage_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_WaitTimer")> _
		Shared Function dx_WaitTimer_x86(WaitTime As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_WaitTimer")> _
		Shared Function dx_WaitTimer_x64(WaitTime As Integer) As Integer
		End Function
		Public Shared Function WaitTimer(WaitTime As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_WaitTimer_x86(WaitTime)
			Else
				Return dx_WaitTimer_x64(WaitTime)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_WaitKey")> _
		Shared Function dx_WaitKey_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_WaitKey")> _
		Shared Function dx_WaitKey_x64() As Integer
		End Function
		Public Shared Function WaitKey() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_WaitKey_x86()
			Else
				Return dx_WaitKey_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNowCount")> _
		Shared Function dx_GetNowCount_x86(UseRDTSCFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNowCount")> _
		Shared Function dx_GetNowCount_x64(UseRDTSCFlag As Integer) As Integer
		End Function
		Public Shared Function GetNowCount() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNowCount_x86([FALSE])
			Else
				Return dx_GetNowCount_x64([FALSE])
			End If
		End Function
		Public Shared Function GetNowCount(UseRDTSCFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNowCount_x86(UseRDTSCFlag)
			Else
				Return dx_GetNowCount_x64(UseRDTSCFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNowHiPerformanceCount")> _
		Shared Function dx_GetNowHiPerformanceCount_x86(UseRDTSCFlag As Integer) As Long
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNowHiPerformanceCount")> _
		Shared Function dx_GetNowHiPerformanceCount_x64(UseRDTSCFlag As Integer) As Long
		End Function
		Public Shared Function GetNowHiPerformanceCount() As Long
			If System.IntPtr.Size = 4 Then
				Return dx_GetNowHiPerformanceCount_x86([FALSE])
			Else
				Return dx_GetNowHiPerformanceCount_x64([FALSE])
			End If
		End Function
		Public Shared Function GetNowHiPerformanceCount(UseRDTSCFlag As Integer) As Long
			If System.IntPtr.Size = 4 Then
				Return dx_GetNowHiPerformanceCount_x86(UseRDTSCFlag)
			Else
				Return dx_GetNowHiPerformanceCount_x64(UseRDTSCFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDateTime")> _
		Shared Function dx_GetDateTime_x86(ByRef DateBuf As DATEDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDateTime")> _
		Shared Function dx_GetDateTime_x64(ByRef DateBuf As DATEDATA) As Integer
		End Function
		Public Shared Function GetDateTime(ByRef DateBuf As DATEDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDateTime_x86(DateBuf)
			Else
				Return dx_GetDateTime_x64(DateBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetRand")> _
		Shared Function dx_GetRand_x86(RandMax As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetRand")> _
		Shared Function dx_GetRand_x64(RandMax As Integer) As Integer
		End Function
		Public Shared Function GetRand(RandMax As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetRand_x86(RandMax)
			Else
				Return dx_GetRand_x64(RandMax)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SRand")> _
		Shared Function dx_SRand_x86(Seed As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SRand")> _
		Shared Function dx_SRand_x64(Seed As Integer) As Integer
		End Function
		Public Shared Function SRand(Seed As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SRand_x86(Seed)
			Else
				Return dx_SRand_x64(Seed)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ErrorLogAdd")> _
		Shared Function dx_ErrorLogAdd_x86(ErrorStr As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ErrorLogAdd")> _
		Shared Function dx_ErrorLogAdd_x64(ErrorStr As String) As Integer
		End Function
		Public Shared Function ErrorLogAdd(ErrorStr As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ErrorLogAdd_x86(ErrorStr)
			Else
				Return dx_ErrorLogAdd_x64(ErrorStr)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ErrorLogTabAdd")> _
		Shared Function dx_ErrorLogTabAdd_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ErrorLogTabAdd")> _
		Shared Function dx_ErrorLogTabAdd_x64() As Integer
		End Function
		Public Shared Function ErrorLogTabAdd() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ErrorLogTabAdd_x86()
			Else
				Return dx_ErrorLogTabAdd_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ErrorLogTabSub")> _
		Shared Function dx_ErrorLogTabSub_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ErrorLogTabSub")> _
		Shared Function dx_ErrorLogTabSub_x64() As Integer
		End Function
		Public Shared Function ErrorLogTabSub() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ErrorLogTabSub_x86()
			Else
				Return dx_ErrorLogTabSub_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseTimeStampFlag")> _
		Shared Function dx_SetUseTimeStampFlag_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseTimeStampFlag")> _
		Shared Function dx_SetUseTimeStampFlag_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetUseTimeStampFlag(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseTimeStampFlag_x86(UseFlag)
			Else
				Return dx_SetUseTimeStampFlag_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLogDrawOutFlag")> _
		Shared Function dx_SetLogDrawOutFlag_x86(DrawFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLogDrawOutFlag")> _
		Shared Function dx_SetLogDrawOutFlag_x64(DrawFlag As Integer) As Integer
		End Function
		Public Shared Function SetLogDrawOutFlag(DrawFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLogDrawOutFlag_x86(DrawFlag)
			Else
				Return dx_SetLogDrawOutFlag_x64(DrawFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLogDrawFlag")> _
		Shared Function dx_GetLogDrawFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLogDrawFlag")> _
		Shared Function dx_GetLogDrawFlag_x64() As Integer
		End Function
		Public Shared Function GetLogDrawFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLogDrawFlag_x86()
			Else
				Return dx_GetLogDrawFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLogFontSize")> _
		Shared Function dx_SetLogFontSize_x86(Size As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLogFontSize")> _
		Shared Function dx_SetLogFontSize_x64(Size As Integer) As Integer
		End Function
		Public Shared Function SetLogFontSize(Size As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLogFontSize_x86(Size)
			Else
				Return dx_SetLogFontSize_x64(Size)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_clsDx")> _
		Shared Function dx_clsDx_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_clsDx")> _
		Shared Function dx_clsDx_x64() As Integer
		End Function
		Public Shared Function clsDx() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_clsDx_x86()
			Else
				Return dx_clsDx_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseASyncLoadFlag")> _
		Shared Function dx_SetUseASyncLoadFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseASyncLoadFlag")> _
		Shared Function dx_SetUseASyncLoadFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseASyncLoadFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseASyncLoadFlag_x86(Flag)
			Else
				Return dx_SetUseASyncLoadFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckHandleASyncLoad")> _
		Shared Function dx_CheckHandleASyncLoad_x86(Handle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckHandleASyncLoad")> _
		Shared Function dx_CheckHandleASyncLoad_x64(Handle As Integer) As Integer
		End Function
		Public Shared Function CheckHandleASyncLoad(Handle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckHandleASyncLoad_x86(Handle)
			Else
				Return dx_CheckHandleASyncLoad_x64(Handle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetHandleASyncLoadResult")> _
		Shared Function dx_GetHandleASyncLoadResult_x86(Handle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetHandleASyncLoadResult")> _
		Shared Function dx_GetHandleASyncLoadResult_x64(Handle As Integer) As Integer
		End Function
		Public Shared Function GetHandleASyncLoadResult(Handle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetHandleASyncLoadResult_x86(Handle)
			Else
				Return dx_GetHandleASyncLoadResult_x64(Handle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetASyncLoadNum")> _
		Shared Function dx_GetASyncLoadNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetASyncLoadNum")> _
		Shared Function dx_GetASyncLoadNum_x64() As Integer
		End Function
		Public Shared Function GetASyncLoadNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetASyncLoadNum_x86()
			Else
				Return dx_GetASyncLoadNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDeleteHandleFlag")> _
		Shared Function dx_SetDeleteHandleFlag_x86(Handle As Integer, ByRef DeleteFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDeleteHandleFlag")> _
		Shared Function dx_SetDeleteHandleFlag_x64(Handle As Integer, ByRef DeleteFlag As Integer) As Integer
		End Function
		Public Shared Function SetDeleteHandleFlag(Handle As Integer, ByRef DeleteFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDeleteHandleFlag_x86(Handle, DeleteFlag)
			Else
				Return dx_SetDeleteHandleFlag_x64(Handle, DeleteFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowCRect")> _
		Shared Function dx_GetWindowCRect_x86(ByRef RectBuf As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowCRect")> _
		Shared Function dx_GetWindowCRect_x64(ByRef RectBuf As RECT) As Integer
		End Function
		Public Shared Function GetWindowCRect(ByRef RectBuf As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowCRect_x86(RectBuf)
			Else
				Return dx_GetWindowCRect_x64(RectBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowActiveFlag")> _
		Shared Function dx_GetWindowActiveFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowActiveFlag")> _
		Shared Function dx_GetWindowActiveFlag_x64() As Integer
		End Function
		Public Shared Function GetWindowActiveFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowActiveFlag_x86()
			Else
				Return dx_GetWindowActiveFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowMinSizeFlag")> _
		Shared Function dx_GetWindowMinSizeFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowMinSizeFlag")> _
		Shared Function dx_GetWindowMinSizeFlag_x64() As Integer
		End Function
		Public Shared Function GetWindowMinSizeFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowMinSizeFlag_x86()
			Else
				Return dx_GetWindowMinSizeFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowMaxSizeFlag")> _
		Shared Function dx_GetWindowMaxSizeFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowMaxSizeFlag")> _
		Shared Function dx_GetWindowMaxSizeFlag_x64() As Integer
		End Function
		Public Shared Function GetWindowMaxSizeFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowMaxSizeFlag_x86()
			Else
				Return dx_GetWindowMaxSizeFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetActiveFlag")> _
		Shared Function dx_GetActiveFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetActiveFlag")> _
		Shared Function dx_GetActiveFlag_x64() As Integer
		End Function
		Public Shared Function GetActiveFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetActiveFlag_x86()
			Else
				Return dx_GetActiveFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowModeFlag")> _
		Shared Function dx_GetWindowModeFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowModeFlag")> _
		Shared Function dx_GetWindowModeFlag_x64() As Integer
		End Function
		Public Shared Function GetWindowModeFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowModeFlag_x86()
			Else
				Return dx_GetWindowModeFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDefaultState")> _
		Shared Function dx_GetDefaultState_x86(ByRef SizeX As Integer, ByRef SizeY As Integer, ByRef ColorBitDepth As Integer, ByRef RefreshRate As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDefaultState")> _
		Shared Function dx_GetDefaultState_x64(ByRef SizeX As Integer, ByRef SizeY As Integer, ByRef ColorBitDepth As Integer, ByRef RefreshRate As Integer) As Integer
		End Function
		Public Shared Function GetDefaultState(ByRef SizeX As Integer, ByRef SizeY As Integer, ByRef ColorBitDepth As Integer, ByRef RefreshRate As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDefaultState_x86(SizeX, SizeY, ColorBitDepth, RefreshRate)
			Else
				Return dx_GetDefaultState_x64(SizeX, SizeY, ColorBitDepth, RefreshRate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNoActiveState")> _
		Shared Function dx_GetNoActiveState_x86(ResetFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNoActiveState")> _
		Shared Function dx_GetNoActiveState_x64(ResetFlag As Integer) As Integer
		End Function
		Public Shared Function GetNoActiveState() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNoActiveState_x86([TRUE])
			Else
				Return dx_GetNoActiveState_x64([TRUE])
			End If
		End Function
		Public Shared Function GetNoActiveState(ResetFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNoActiveState_x86(ResetFlag)
			Else
				Return dx_GetNoActiveState_x64(ResetFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseDispFlag")> _
		Shared Function dx_GetMouseDispFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseDispFlag")> _
		Shared Function dx_GetMouseDispFlag_x64() As Integer
		End Function
		Public Shared Function GetMouseDispFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseDispFlag_x86()
			Else
				Return dx_GetMouseDispFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetAlwaysRunFlag")> _
		Shared Function dx_GetAlwaysRunFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetAlwaysRunFlag")> _
		Shared Function dx_GetAlwaysRunFlag_x64() As Integer
		End Function
		Public Shared Function GetAlwaysRunFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetAlwaysRunFlag_x86()
			Else
				Return dx_GetAlwaysRunFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx__GetSystemInfo")> _
		Shared Function dx__GetSystemInfo_x86(ByRef DxLibVer As Integer, ByRef DirectXVer As Integer, ByRef WindowsVer As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx__GetSystemInfo")> _
		Shared Function dx__GetSystemInfo_x64(ByRef DxLibVer As Integer, ByRef DirectXVer As Integer, ByRef WindowsVer As Integer) As Integer
		End Function
		Public Shared Function _GetSystemInfo(ByRef DxLibVer As Integer, ByRef DirectXVer As Integer, ByRef WindowsVer As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx__GetSystemInfo_x86(DxLibVer, DirectXVer, WindowsVer)
			Else
				Return dx__GetSystemInfo_x64(DxLibVer, DirectXVer, WindowsVer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPcInfo")> _
		Shared Function dx_GetPcInfo_x86(OSString As System.Text.StringBuilder, DirectXString As System.Text.StringBuilder, CPUString As System.Text.StringBuilder, ByRef CPUSpeed As Integer, ByRef FreeMemorySize As Double, ByRef TotalMemorySize As Double, _
			VideoDriverFileName As System.Text.StringBuilder, VideoDriverString As System.Text.StringBuilder, ByRef FreeVideoMemorySize As Double, ByRef TotalVideoMemorySize As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPcInfo")> _
		Shared Function dx_GetPcInfo_x64(OSString As System.Text.StringBuilder, DirectXString As System.Text.StringBuilder, CPUString As System.Text.StringBuilder, ByRef CPUSpeed As Integer, ByRef FreeMemorySize As Double, ByRef TotalMemorySize As Double, _
			VideoDriverFileName As System.Text.StringBuilder, VideoDriverString As System.Text.StringBuilder, ByRef FreeVideoMemorySize As Double, ByRef TotalVideoMemorySize As Double) As Integer
		End Function
		Public Shared Function GetPcInfo(OSString As System.Text.StringBuilder, DirectXString As System.Text.StringBuilder, CPUString As System.Text.StringBuilder, ByRef CPUSpeed As Integer, ByRef FreeMemorySize As Double, ByRef TotalMemorySize As Double, _
			VideoDriverFileName As System.Text.StringBuilder, VideoDriverString As System.Text.StringBuilder, ByRef FreeVideoMemorySize As Double, ByRef TotalVideoMemorySize As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPcInfo_x86(OSString, DirectXString, CPUString, CPUSpeed, FreeMemorySize, TotalMemorySize, _
					VideoDriverFileName, VideoDriverString, FreeVideoMemorySize, TotalVideoMemorySize)
			Else
				Return dx_GetPcInfo_x64(OSString, DirectXString, CPUString, CPUSpeed, FreeMemorySize, TotalMemorySize, _
					VideoDriverFileName, VideoDriverString, FreeVideoMemorySize, TotalVideoMemorySize)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseMMXFlag")> _
		Shared Function dx_GetUseMMXFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseMMXFlag")> _
		Shared Function dx_GetUseMMXFlag_x64() As Integer
		End Function
		Public Shared Function GetUseMMXFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseMMXFlag_x86()
			Else
				Return dx_GetUseMMXFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseSSEFlag")> _
		Shared Function dx_GetUseSSEFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseSSEFlag")> _
		Shared Function dx_GetUseSSEFlag_x64() As Integer
		End Function
		Public Shared Function GetUseSSEFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseSSEFlag_x86()
			Else
				Return dx_GetUseSSEFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseSSE2Flag")> _
		Shared Function dx_GetUseSSE2Flag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseSSE2Flag")> _
		Shared Function dx_GetUseSSE2Flag_x64() As Integer
		End Function
		Public Shared Function GetUseSSE2Flag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseSSE2Flag_x86()
			Else
				Return dx_GetUseSSE2Flag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowCloseFlag")> _
		Shared Function dx_GetWindowCloseFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowCloseFlag")> _
		Shared Function dx_GetWindowCloseFlag_x64() As Integer
		End Function
		Public Shared Function GetWindowCloseFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowCloseFlag_x86()
			Else
				Return dx_GetWindowCloseFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseWindowRgnFlag")> _
		Shared Function dx_GetUseWindowRgnFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseWindowRgnFlag")> _
		Shared Function dx_GetUseWindowRgnFlag_x64() As Integer
		End Function
		Public Shared Function GetUseWindowRgnFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseWindowRgnFlag_x86()
			Else
				Return dx_GetUseWindowRgnFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowSize")> _
		Shared Function dx_GetWindowSize_x86(ByRef Width As Integer, ByRef Height As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowSize")> _
		Shared Function dx_GetWindowSize_x64(ByRef Width As Integer, ByRef Height As Integer) As Integer
		End Function
		Public Shared Function GetWindowSize(ByRef Width As Integer, ByRef Height As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowSize_x86(Width, Height)
			Else
				Return dx_GetWindowSize_x64(Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowPosition")> _
		Shared Function dx_GetWindowPosition_x86(ByRef x As Integer, ByRef y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowPosition")> _
		Shared Function dx_GetWindowPosition_x64(ByRef x As Integer, ByRef y As Integer) As Integer
		End Function
		Public Shared Function GetWindowPosition(ByRef x As Integer, ByRef y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowPosition_x86(x, y)
			Else
				Return dx_GetWindowPosition_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWindowUserCloseFlag")> _
		Shared Function dx_GetWindowUserCloseFlag_x86(StateResetFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWindowUserCloseFlag")> _
		Shared Function dx_GetWindowUserCloseFlag_x64(StateResetFlag As Integer) As Integer
		End Function
		Public Shared Function GetWindowUserCloseFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowUserCloseFlag_x86([FALSE])
			Else
				Return dx_GetWindowUserCloseFlag_x64([FALSE])
			End If
		End Function
		Public Shared Function GetWindowUserCloseFlag(StateResetFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWindowUserCloseFlag_x86(StateResetFlag)
			Else
				Return dx_GetWindowUserCloseFlag_x64(StateResetFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNotDrawFlag")> _
		Shared Function dx_GetNotDrawFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNotDrawFlag")> _
		Shared Function dx_GetNotDrawFlag_x64() As Integer
		End Function
		Public Shared Function GetNotDrawFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNotDrawFlag_x86()
			Else
				Return dx_GetNotDrawFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPaintMessageFlag")> _
		Shared Function dx_GetPaintMessageFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPaintMessageFlag")> _
		Shared Function dx_GetPaintMessageFlag_x64() As Integer
		End Function
		Public Shared Function GetPaintMessageFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPaintMessageFlag_x86()
			Else
				Return dx_GetPaintMessageFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetValidHiPerformanceCounter")> _
		Shared Function dx_GetValidHiPerformanceCounter_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetValidHiPerformanceCounter")> _
		Shared Function dx_GetValidHiPerformanceCounter_x64() As Integer
		End Function
		Public Shared Function GetValidHiPerformanceCounter() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetValidHiPerformanceCounter_x86()
			Else
				Return dx_GetValidHiPerformanceCounter_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeWindowMode")> _
		Shared Function dx_ChangeWindowMode_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeWindowMode")> _
		Shared Function dx_ChangeWindowMode_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function ChangeWindowMode(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeWindowMode_x86(Flag)
			Else
				Return dx_ChangeWindowMode_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseCharSet")> _
		Shared Function dx_SetUseCharSet_x86(CharSet As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseCharSet")> _
		Shared Function dx_SetUseCharSet_x64(CharSet As Integer) As Integer
		End Function
		Public Shared Function SetUseCharSet(CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseCharSet_x86(CharSet)
			Else
				Return dx_SetUseCharSet_x64(CharSet)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadPauseGraph")> _
		Shared Function dx_LoadPauseGraph_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadPauseGraph")> _
		Shared Function dx_LoadPauseGraph_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadPauseGraph(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadPauseGraph_x86(FileName)
			Else
				Return dx_LoadPauseGraph_x64(FileName)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadPauseGraphFromMem")> _
		Shared Function dx_LoadPauseGraphFromMem_x86(MemImage As System.Void*, MemImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadPauseGraphFromMem")> _
		Shared Function dx_LoadPauseGraphFromMem_x64(MemImage As System.Void*, MemImageSize As Integer) As Integer
		End Function
		Public Shared Function LoadPauseGraphFromMem(MemImage As System.Void*, MemImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadPauseGraphFromMem_x86(MemImage, MemImageSize)
			Else
				Return dx_LoadPauseGraphFromMem_x64(MemImage, MemImageSize)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowText")> _
		Shared Function dx_SetWindowText_x86(WindowText As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowText")> _
		Shared Function dx_SetWindowText_x64(WindowText As String) As Integer
		End Function
		Public Shared Function SetWindowText(WindowText As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowText_x86(WindowText)
			Else
				Return dx_SetWindowText_x64(WindowText)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMainWindowText")> _
		Shared Function dx_SetMainWindowText_x86(WindowText As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMainWindowText")> _
		Shared Function dx_SetMainWindowText_x64(WindowText As String) As Integer
		End Function
		Public Shared Function SetMainWindowText(WindowText As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMainWindowText_x86(WindowText)
			Else
				Return dx_SetMainWindowText_x64(WindowText)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMainWindowClassName")> _
		Shared Function dx_SetMainWindowClassName_x86(ClassName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMainWindowClassName")> _
		Shared Function dx_SetMainWindowClassName_x64(ClassName As String) As Integer
		End Function
		Public Shared Function SetMainWindowClassName(ClassName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMainWindowClassName_x86(ClassName)
			Else
				Return dx_SetMainWindowClassName_x64(ClassName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetOutApplicationLogValidFlag")> _
		Shared Function dx_SetOutApplicationLogValidFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetOutApplicationLogValidFlag")> _
		Shared Function dx_SetOutApplicationLogValidFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetOutApplicationLogValidFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetOutApplicationLogValidFlag_x86(Flag)
			Else
				Return dx_SetOutApplicationLogValidFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetApplicationLogSaveDirectory")> _
		Shared Function dx_SetApplicationLogSaveDirectory_x86(DirectoryPath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetApplicationLogSaveDirectory")> _
		Shared Function dx_SetApplicationLogSaveDirectory_x64(DirectoryPath As String) As Integer
		End Function
		Public Shared Function SetApplicationLogSaveDirectory(DirectoryPath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetApplicationLogSaveDirectory_x86(DirectoryPath)
			Else
				Return dx_SetApplicationLogSaveDirectory_x64(DirectoryPath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDateNameLogFile")> _
		Shared Function dx_SetUseDateNameLogFile_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDateNameLogFile")> _
		Shared Function dx_SetUseDateNameLogFile_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDateNameLogFile(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDateNameLogFile_x86(Flag)
			Else
				Return dx_SetUseDateNameLogFile_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetAlwaysRunFlag")> _
		Shared Function dx_SetAlwaysRunFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetAlwaysRunFlag")> _
		Shared Function dx_SetAlwaysRunFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetAlwaysRunFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetAlwaysRunFlag_x86(Flag)
			Else
				Return dx_SetAlwaysRunFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowIconID")> _
		Shared Function dx_SetWindowIconID_x86(ID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowIconID")> _
		Shared Function dx_SetWindowIconID_x64(ID As Integer) As Integer
		End Function
		Public Shared Function SetWindowIconID(ID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowIconID_x86(ID)
			Else
				Return dx_SetWindowIconID_x64(ID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowIconHandle")> _
		Shared Function dx_SetWindowIconHandle_x86(Icon As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowIconHandle")> _
		Shared Function dx_SetWindowIconHandle_x64(Icon As System.IntPtr) As Integer
		End Function
		Public Shared Function SetWindowIconHandle(Icon As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowIconHandle_x86(Icon)
			Else
				Return dx_SetWindowIconHandle_x64(Icon)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowStyleMode")> _
		Shared Function dx_SetWindowStyleMode_x86(Mode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowStyleMode")> _
		Shared Function dx_SetWindowStyleMode_x64(Mode As Integer) As Integer
		End Function
		Public Shared Function SetWindowStyleMode(Mode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowStyleMode_x86(Mode)
			Else
				Return dx_SetWindowStyleMode_x64(Mode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowZOrder")> _
		Shared Function dx_SetWindowZOrder_x86(ZType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowZOrder")> _
		Shared Function dx_SetWindowZOrder_x64(ZType As Integer) As Integer
		End Function
		Public Shared Function SetWindowZOrder(ZType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowZOrder_x86(ZType)
			Else
				Return dx_SetWindowZOrder_x64(ZType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowSizeChangeEnableFlag")> _
		Shared Function dx_SetWindowSizeChangeEnableFlag_x86(Flag As Integer, FitScreen As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowSizeChangeEnableFlag")> _
		Shared Function dx_SetWindowSizeChangeEnableFlag_x64(Flag As Integer, FitScreen As Integer) As Integer
		End Function
		Public Shared Function SetWindowSizeChangeEnableFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowSizeChangeEnableFlag_x86(Flag, [TRUE])
			Else
				Return dx_SetWindowSizeChangeEnableFlag_x64(Flag, [TRUE])
			End If
		End Function
		Public Shared Function SetWindowSizeChangeEnableFlag(Flag As Integer, FitScreen As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowSizeChangeEnableFlag_x86(Flag, FitScreen)
			Else
				Return dx_SetWindowSizeChangeEnableFlag_x64(Flag, FitScreen)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowSizeExtendRate")> _
		Shared Function dx_SetWindowSizeExtendRate_x86(ExRateX As Double, ExRateY As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowSizeExtendRate")> _
		Shared Function dx_SetWindowSizeExtendRate_x64(ExRateX As Double, ExRateY As Double) As Integer
		End Function
		Public Shared Function SetWindowSizeExtendRate(ExRateX As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowSizeExtendRate_x86(ExRateX, -1.0)
			Else
				Return dx_SetWindowSizeExtendRate_x64(ExRateX, -1.0)
			End If
		End Function
		Public Shared Function SetWindowSizeExtendRate(ExRateX As Double, ExRateY As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowSizeExtendRate_x86(ExRateX, ExRateY)
			Else
				Return dx_SetWindowSizeExtendRate_x64(ExRateX, ExRateY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowSize")> _
		Shared Function dx_SetWindowSize_x86(Width As Integer, Height As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowSize")> _
		Shared Function dx_SetWindowSize_x64(Width As Integer, Height As Integer) As Integer
		End Function
		Public Shared Function SetWindowSize(Width As Integer, Height As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowSize_x86(Width, Height)
			Else
				Return dx_SetWindowSize_x64(Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowPosition")> _
		Shared Function dx_SetWindowPosition_x86(x As Integer, y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowPosition")> _
		Shared Function dx_SetWindowPosition_x64(x As Integer, y As Integer) As Integer
		End Function
		Public Shared Function SetWindowPosition(x As Integer, y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowPosition_x86(x, y)
			Else
				Return dx_SetWindowPosition_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetSysCommandOffFlag")> _
		Shared Function dx_SetSysCommandOffFlag_x86(Flag As Integer, HookDllPath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetSysCommandOffFlag")> _
		Shared Function dx_SetSysCommandOffFlag_x64(Flag As Integer, HookDllPath As String) As Integer
		End Function
		Public Shared Function SetSysCommandOffFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetSysCommandOffFlag_x86(Flag, Nothing)
			Else
				Return dx_SetSysCommandOffFlag_x64(Flag, Nothing)
			End If
		End Function
		Public Shared Function SetSysCommandOffFlag(Flag As Integer, HookDllPath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetSysCommandOffFlag_x86(Flag, HookDllPath)
			Else
				Return dx_SetSysCommandOffFlag_x64(Flag, HookDllPath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseHookWinProcReturnValue")> _
		Shared Function dx_SetUseHookWinProcReturnValue_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseHookWinProcReturnValue")> _
		Shared Function dx_SetUseHookWinProcReturnValue_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetUseHookWinProcReturnValue(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseHookWinProcReturnValue_x86(UseFlag)
			Else
				Return dx_SetUseHookWinProcReturnValue_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDoubleStartValidFlag")> _
		Shared Function dx_SetDoubleStartValidFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDoubleStartValidFlag")> _
		Shared Function dx_SetDoubleStartValidFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDoubleStartValidFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDoubleStartValidFlag_x86(Flag)
			Else
				Return dx_SetDoubleStartValidFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMessageTakeOverWindow")> _
		Shared Function dx_AddMessageTakeOverWindow_x86(Window As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMessageTakeOverWindow")> _
		Shared Function dx_AddMessageTakeOverWindow_x64(Window As System.IntPtr) As Integer
		End Function
		Public Shared Function AddMessageTakeOverWindow(Window As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMessageTakeOverWindow_x86(Window)
			Else
				Return dx_AddMessageTakeOverWindow_x64(Window)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SubMessageTakeOverWindow")> _
		Shared Function dx_SubMessageTakeOverWindow_x86(Window As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SubMessageTakeOverWindow")> _
		Shared Function dx_SubMessageTakeOverWindow_x64(Window As System.IntPtr) As Integer
		End Function
		Public Shared Function SubMessageTakeOverWindow(Window As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SubMessageTakeOverWindow_x86(Window)
			Else
				Return dx_SubMessageTakeOverWindow_x64(Window)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowInitPosition")> _
		Shared Function dx_SetWindowInitPosition_x86(x As Integer, y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowInitPosition")> _
		Shared Function dx_SetWindowInitPosition_x64(x As Integer, y As Integer) As Integer
		End Function
		Public Shared Function SetWindowInitPosition(x As Integer, y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowInitPosition_x86(x, y)
			Else
				Return dx_SetWindowInitPosition_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNotWinFlag")> _
		Shared Function dx_SetNotWinFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNotWinFlag")> _
		Shared Function dx_SetNotWinFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetNotWinFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNotWinFlag_x86(Flag)
			Else
				Return dx_SetNotWinFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNotDrawFlag")> _
		Shared Function dx_SetNotDrawFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNotDrawFlag")> _
		Shared Function dx_SetNotDrawFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetNotDrawFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNotDrawFlag_x86(Flag)
			Else
				Return dx_SetNotDrawFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNotSoundFlag")> _
		Shared Function dx_SetNotSoundFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNotSoundFlag")> _
		Shared Function dx_SetNotSoundFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetNotSoundFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNotSoundFlag_x86(Flag)
			Else
				Return dx_SetNotSoundFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNotInputFlag")> _
		Shared Function dx_SetNotInputFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNotInputFlag")> _
		Shared Function dx_SetNotInputFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetNotInputFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNotInputFlag_x86(Flag)
			Else
				Return dx_SetNotInputFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDialogBoxHandle")> _
		Shared Function dx_SetDialogBoxHandle_x86(WindowHandle As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDialogBoxHandle")> _
		Shared Function dx_SetDialogBoxHandle_x64(WindowHandle As System.IntPtr) As Integer
		End Function
		Public Shared Function SetDialogBoxHandle(WindowHandle As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDialogBoxHandle_x86(WindowHandle)
			Else
				Return dx_SetDialogBoxHandle_x64(WindowHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowVisibleFlag")> _
		Shared Function dx_SetWindowVisibleFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowVisibleFlag")> _
		Shared Function dx_SetWindowVisibleFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetWindowVisibleFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowVisibleFlag_x86(Flag)
			Else
				Return dx_SetWindowVisibleFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowMinimizeFlag")> _
		Shared Function dx_SetWindowMinimizeFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowMinimizeFlag")> _
		Shared Function dx_SetWindowMinimizeFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetWindowMinimizeFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowMinimizeFlag_x86(Flag)
			Else
				Return dx_SetWindowMinimizeFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowUserCloseEnableFlag")> _
		Shared Function dx_SetWindowUserCloseEnableFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowUserCloseEnableFlag")> _
		Shared Function dx_SetWindowUserCloseEnableFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetWindowUserCloseEnableFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowUserCloseEnableFlag_x86(Flag)
			Else
				Return dx_SetWindowUserCloseEnableFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDxLibEndPostQuitMessageFlag")> _
		Shared Function dx_SetDxLibEndPostQuitMessageFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDxLibEndPostQuitMessageFlag")> _
		Shared Function dx_SetDxLibEndPostQuitMessageFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDxLibEndPostQuitMessageFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDxLibEndPostQuitMessageFlag_x86(Flag)
			Else
				Return dx_SetDxLibEndPostQuitMessageFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUserWindow")> _
		Shared Function dx_SetUserWindow_x86(WindowHandle As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUserWindow")> _
		Shared Function dx_SetUserWindow_x64(WindowHandle As System.IntPtr) As Integer
		End Function
		Public Shared Function SetUserWindow(WindowHandle As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUserWindow_x86(WindowHandle)
			Else
				Return dx_SetUserWindow_x64(WindowHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUserChildWindow")> _
		Shared Function dx_SetUserChildWindow_x86(WindowHandle As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUserChildWindow")> _
		Shared Function dx_SetUserChildWindow_x64(WindowHandle As System.IntPtr) As Integer
		End Function
		Public Shared Function SetUserChildWindow(WindowHandle As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUserChildWindow_x86(WindowHandle)
			Else
				Return dx_SetUserChildWindow_x64(WindowHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUserWindowMessageProcessDXLibFlag")> _
		Shared Function dx_SetUserWindowMessageProcessDXLibFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUserWindowMessageProcessDXLibFlag")> _
		Shared Function dx_SetUserWindowMessageProcessDXLibFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUserWindowMessageProcessDXLibFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUserWindowMessageProcessDXLibFlag_x86(Flag)
			Else
				Return dx_SetUserWindowMessageProcessDXLibFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseFPUPreserveFlag")> _
		Shared Function dx_SetUseFPUPreserveFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseFPUPreserveFlag")> _
		Shared Function dx_SetUseFPUPreserveFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseFPUPreserveFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseFPUPreserveFlag_x86(Flag)
			Else
				Return dx_SetUseFPUPreserveFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetValidMousePointerWindowOutClientAreaMoveFlag")> _
		Shared Function dx_SetValidMousePointerWindowOutClientAreaMoveFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetValidMousePointerWindowOutClientAreaMoveFlag")> _
		Shared Function dx_SetValidMousePointerWindowOutClientAreaMoveFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetValidMousePointerWindowOutClientAreaMoveFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetValidMousePointerWindowOutClientAreaMoveFlag_x86(Flag)
			Else
				Return dx_SetValidMousePointerWindowOutClientAreaMoveFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseBackBufferTransColorFlag")> _
		Shared Function dx_SetUseBackBufferTransColorFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseBackBufferTransColorFlag")> _
		Shared Function dx_SetUseBackBufferTransColorFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseBackBufferTransColorFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseBackBufferTransColorFlag_x86(Flag)
			Else
				Return dx_SetUseBackBufferTransColorFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseUpdateLayerdWindowFlag")> _
		Shared Function dx_SetUseUpdateLayerdWindowFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseUpdateLayerdWindowFlag")> _
		Shared Function dx_SetUseUpdateLayerdWindowFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseUpdateLayerdWindowFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseUpdateLayerdWindowFlag_x86(Flag)
			Else
				Return dx_SetUseUpdateLayerdWindowFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetClipboardText")> _
		Shared Function dx_GetClipboardText_x86(DestBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetClipboardText")> _
		Shared Function dx_GetClipboardText_x64(DestBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetClipboardText(DestBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetClipboardText_x86(DestBuffer)
			Else
				Return dx_GetClipboardText_x64(DestBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetClipboardText")> _
		Shared Function dx_SetClipboardText_x86(Text As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetClipboardText")> _
		Shared Function dx_SetClipboardText_x64(Text As String) As Integer
		End Function
		Public Shared Function SetClipboardText(Text As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetClipboardText_x86(Text)
			Else
				Return dx_SetClipboardText_x64(Text)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDragFileValidFlag")> _
		Shared Function dx_SetDragFileValidFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDragFileValidFlag")> _
		Shared Function dx_SetDragFileValidFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDragFileValidFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDragFileValidFlag_x86(Flag)
			Else
				Return dx_SetDragFileValidFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DragFileInfoClear")> _
		Shared Function dx_DragFileInfoClear_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DragFileInfoClear")> _
		Shared Function dx_DragFileInfoClear_x64() As Integer
		End Function
		Public Shared Function DragFileInfoClear() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DragFileInfoClear_x86()
			Else
				Return dx_DragFileInfoClear_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDragFilePath")> _
		Shared Function dx_GetDragFilePath_x86(FilePathBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDragFilePath")> _
		Shared Function dx_GetDragFilePath_x64(FilePathBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetDragFilePath(FilePathBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDragFilePath_x86(FilePathBuffer)
			Else
				Return dx_GetDragFilePath_x64(FilePathBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDragFileNum")> _
		Shared Function dx_GetDragFileNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDragFileNum")> _
		Shared Function dx_GetDragFileNum_x64() As Integer
		End Function
		Public Shared Function GetDragFileNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDragFileNum_x86()
			Else
				Return dx_GetDragFileNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowRgnGraph")> _
		Shared Function dx_SetWindowRgnGraph_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowRgnGraph")> _
		Shared Function dx_SetWindowRgnGraph_x64(FileName As String) As Integer
		End Function
		Public Shared Function SetWindowRgnGraph(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowRgnGraph_x86(FileName)
			Else
				Return dx_SetWindowRgnGraph_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_UpdateTransColorWindowRgn")> _
		Shared Function dx_UpdateTransColorWindowRgn_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_UpdateTransColorWindowRgn")> _
		Shared Function dx_UpdateTransColorWindowRgn_x64() As Integer
		End Function
		Public Shared Function UpdateTransColorWindowRgn() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_UpdateTransColorWindowRgn_x86()
			Else
				Return dx_UpdateTransColorWindowRgn_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupToolBar")> _
		Shared Function dx_SetupToolBar_x86(BitmapName As String, DivNum As Integer, ResourceID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupToolBar")> _
		Shared Function dx_SetupToolBar_x64(BitmapName As String, DivNum As Integer, ResourceID As Integer) As Integer
		End Function
		Public Shared Function SetupToolBar(BitmapName As String, DivNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupToolBar_x86(BitmapName, DivNum, -1)
			Else
				Return dx_SetupToolBar_x64(BitmapName, DivNum, -1)
			End If
		End Function
		Public Shared Function SetupToolBar(BitmapName As String, DivNum As Integer, ResourceID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupToolBar_x86(BitmapName, DivNum, ResourceID)
			Else
				Return dx_SetupToolBar_x64(BitmapName, DivNum, ResourceID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddToolBarButton")> _
		Shared Function dx_AddToolBarButton_x86(Type As Integer, State As Integer, ImageIndex As Integer, ID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddToolBarButton")> _
		Shared Function dx_AddToolBarButton_x64(Type As Integer, State As Integer, ImageIndex As Integer, ID As Integer) As Integer
		End Function
		Public Shared Function AddToolBarButton(Type As Integer, State As Integer, ImageIndex As Integer, ID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddToolBarButton_x86(Type, State, ImageIndex, ID)
			Else
				Return dx_AddToolBarButton_x64(Type, State, ImageIndex, ID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddToolBarSep")> _
		Shared Function dx_AddToolBarSep_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddToolBarSep")> _
		Shared Function dx_AddToolBarSep_x64() As Integer
		End Function
		Public Shared Function AddToolBarSep() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddToolBarSep_x86()
			Else
				Return dx_AddToolBarSep_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetToolBarButtonState")> _
		Shared Function dx_GetToolBarButtonState_x86(ID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetToolBarButtonState")> _
		Shared Function dx_GetToolBarButtonState_x64(ID As Integer) As Integer
		End Function
		Public Shared Function GetToolBarButtonState(ID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetToolBarButtonState_x86(ID)
			Else
				Return dx_GetToolBarButtonState_x64(ID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetToolBarButtonState")> _
		Shared Function dx_SetToolBarButtonState_x86(ID As Integer, State As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetToolBarButtonState")> _
		Shared Function dx_SetToolBarButtonState_x64(ID As Integer, State As Integer) As Integer
		End Function
		Public Shared Function SetToolBarButtonState(ID As Integer, State As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetToolBarButtonState_x86(ID, State)
			Else
				Return dx_SetToolBarButtonState_x64(ID, State)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteAllToolBarButton")> _
		Shared Function dx_DeleteAllToolBarButton_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteAllToolBarButton")> _
		Shared Function dx_DeleteAllToolBarButton_x64() As Integer
		End Function
		Public Shared Function DeleteAllToolBarButton() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteAllToolBarButton_x86()
			Else
				Return dx_DeleteAllToolBarButton_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseMenuFlag")> _
		Shared Function dx_SetUseMenuFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseMenuFlag")> _
		Shared Function dx_SetUseMenuFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseMenuFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseMenuFlag_x86(Flag)
			Else
				Return dx_SetUseMenuFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseKeyAccelFlag")> _
		Shared Function dx_SetUseKeyAccelFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseKeyAccelFlag")> _
		Shared Function dx_SetUseKeyAccelFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseKeyAccelFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseKeyAccelFlag_x86(Flag)
			Else
				Return dx_SetUseKeyAccelFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddKeyAccel")> _
		Shared Function dx_AddKeyAccel_x86(ItemName As String, ItemID As Integer, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddKeyAccel")> _
		Shared Function dx_AddKeyAccel_x64(ItemName As String, ItemID As Integer, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
		End Function
		Public Shared Function AddKeyAccel(ItemName As String, ItemID As Integer, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddKeyAccel_x86(ItemName, ItemID, KeyCode, CtrlFlag, AltFlag, ShiftFlag)
			Else
				Return dx_AddKeyAccel_x64(ItemName, ItemID, KeyCode, CtrlFlag, AltFlag, ShiftFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddKeyAccel_Name")> _
		Shared Function dx_AddKeyAccel_Name_x86(ItemName As String, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddKeyAccel_Name")> _
		Shared Function dx_AddKeyAccel_Name_x64(ItemName As String, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
		End Function
		Public Shared Function AddKeyAccel_Name(ItemName As String, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddKeyAccel_Name_x86(ItemName, KeyCode, CtrlFlag, AltFlag, ShiftFlag)
			Else
				Return dx_AddKeyAccel_Name_x64(ItemName, KeyCode, CtrlFlag, AltFlag, ShiftFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddKeyAccel_ID")> _
		Shared Function dx_AddKeyAccel_ID_x86(ItemID As Integer, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddKeyAccel_ID")> _
		Shared Function dx_AddKeyAccel_ID_x64(ItemID As Integer, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
		End Function
		Public Shared Function AddKeyAccel_ID(ItemID As Integer, KeyCode As Integer, CtrlFlag As Integer, AltFlag As Integer, ShiftFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddKeyAccel_ID_x86(ItemID, KeyCode, CtrlFlag, AltFlag, ShiftFlag)
			Else
				Return dx_AddKeyAccel_ID_x64(ItemID, KeyCode, CtrlFlag, AltFlag, ShiftFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClearKeyAccel")> _
		Shared Function dx_ClearKeyAccel_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClearKeyAccel")> _
		Shared Function dx_ClearKeyAccel_x64() As Integer
		End Function
		Public Shared Function ClearKeyAccel() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClearKeyAccel_x86()
			Else
				Return dx_ClearKeyAccel_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMenuItem")> _
		Shared Function dx_AddMenuItem_x86(AddType As Integer, ItemName As String, ItemID As Integer, SeparatorFlag As Integer, NewItemName As String, NewItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMenuItem")> _
		Shared Function dx_AddMenuItem_x64(AddType As Integer, ItemName As String, ItemID As Integer, SeparatorFlag As Integer, NewItemName As String, NewItemID As Integer) As Integer
		End Function
		Public Shared Function AddMenuItem(AddType As Integer, ItemName As String, ItemID As Integer, SeparatorFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuItem_x86(AddType, ItemName, ItemID, SeparatorFlag, Nothing, -1)
			Else
				Return dx_AddMenuItem_x64(AddType, ItemName, ItemID, SeparatorFlag, Nothing, -1)
			End If
		End Function
		Public Shared Function AddMenuItem(AddType As Integer, ItemName As String, ItemID As Integer, SeparatorFlag As Integer, NewItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuItem_x86(AddType, ItemName, ItemID, SeparatorFlag, NewItemName, -1)
			Else
				Return dx_AddMenuItem_x64(AddType, ItemName, ItemID, SeparatorFlag, NewItemName, -1)
			End If
		End Function
		Public Shared Function AddMenuItem(AddType As Integer, ItemName As String, ItemID As Integer, SeparatorFlag As Integer, NewItemName As String, NewItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuItem_x86(AddType, ItemName, ItemID, SeparatorFlag, NewItemName, NewItemID)
			Else
				Return dx_AddMenuItem_x64(AddType, ItemName, ItemID, SeparatorFlag, NewItemName, NewItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMenuItem")> _
		Shared Function dx_DeleteMenuItem_x86(ItemName As String, ItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMenuItem")> _
		Shared Function dx_DeleteMenuItem_x64(ItemName As String, ItemID As Integer) As Integer
		End Function
		Public Shared Function DeleteMenuItem(ItemName As String, ItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMenuItem_x86(ItemName, ItemID)
			Else
				Return dx_DeleteMenuItem_x64(ItemName, ItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckMenuItemSelect")> _
		Shared Function dx_CheckMenuItemSelect_x86(ItemName As String, ItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckMenuItemSelect")> _
		Shared Function dx_CheckMenuItemSelect_x64(ItemName As String, ItemID As Integer) As Integer
		End Function
		Public Shared Function CheckMenuItemSelect(ItemName As String, ItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckMenuItemSelect_x86(ItemName, ItemID)
			Else
				Return dx_CheckMenuItemSelect_x64(ItemName, ItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemEnable")> _
		Shared Function dx_SetMenuItemEnable_x86(ItemName As String, ItemID As Integer, EnableFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemEnable")> _
		Shared Function dx_SetMenuItemEnable_x64(ItemName As String, ItemID As Integer, EnableFlag As Integer) As Integer
		End Function
		Public Shared Function SetMenuItemEnable(ItemName As String, ItemID As Integer, EnableFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemEnable_x86(ItemName, ItemID, EnableFlag)
			Else
				Return dx_SetMenuItemEnable_x64(ItemName, ItemID, EnableFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemMark")> _
		Shared Function dx_SetMenuItemMark_x86(ItemName As String, ItemID As Integer, Mark As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemMark")> _
		Shared Function dx_SetMenuItemMark_x64(ItemName As String, ItemID As Integer, Mark As Integer) As Integer
		End Function
		Public Shared Function SetMenuItemMark(ItemName As String, ItemID As Integer, Mark As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemMark_x86(ItemName, ItemID, Mark)
			Else
				Return dx_SetMenuItemMark_x64(ItemName, ItemID, Mark)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckMenuItemSelectAll")> _
		Shared Function dx_CheckMenuItemSelectAll_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckMenuItemSelectAll")> _
		Shared Function dx_CheckMenuItemSelectAll_x64() As Integer
		End Function
		Public Shared Function CheckMenuItemSelectAll() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckMenuItemSelectAll_x86()
			Else
				Return dx_CheckMenuItemSelectAll_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMenuItem_Name")> _
		Shared Function dx_AddMenuItem_Name_x86(ParentItemName As String, NewItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMenuItem_Name")> _
		Shared Function dx_AddMenuItem_Name_x64(ParentItemName As String, NewItemName As String) As Integer
		End Function
		Public Shared Function AddMenuItem_Name(ParentItemName As String, NewItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuItem_Name_x86(ParentItemName, NewItemName)
			Else
				Return dx_AddMenuItem_Name_x64(ParentItemName, NewItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMenuLine_Name")> _
		Shared Function dx_AddMenuLine_Name_x86(ParentItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMenuLine_Name")> _
		Shared Function dx_AddMenuLine_Name_x64(ParentItemName As String) As Integer
		End Function
		Public Shared Function AddMenuLine_Name(ParentItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuLine_Name_x86(ParentItemName)
			Else
				Return dx_AddMenuLine_Name_x64(ParentItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InsertMenuItem_Name")> _
		Shared Function dx_InsertMenuItem_Name_x86(ItemName As String, NewItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InsertMenuItem_Name")> _
		Shared Function dx_InsertMenuItem_Name_x64(ItemName As String, NewItemName As String) As Integer
		End Function
		Public Shared Function InsertMenuItem_Name(ItemName As String, NewItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InsertMenuItem_Name_x86(ItemName, NewItemName)
			Else
				Return dx_InsertMenuItem_Name_x64(ItemName, NewItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InsertMenuLine_Name")> _
		Shared Function dx_InsertMenuLine_Name_x86(ItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InsertMenuLine_Name")> _
		Shared Function dx_InsertMenuLine_Name_x64(ItemName As String) As Integer
		End Function
		Public Shared Function InsertMenuLine_Name(ItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InsertMenuLine_Name_x86(ItemName)
			Else
				Return dx_InsertMenuLine_Name_x64(ItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMenuItem_Name")> _
		Shared Function dx_DeleteMenuItem_Name_x86(ItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMenuItem_Name")> _
		Shared Function dx_DeleteMenuItem_Name_x64(ItemName As String) As Integer
		End Function
		Public Shared Function DeleteMenuItem_Name(ItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMenuItem_Name_x86(ItemName)
			Else
				Return dx_DeleteMenuItem_Name_x64(ItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckMenuItemSelect_Name")> _
		Shared Function dx_CheckMenuItemSelect_Name_x86(ItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckMenuItemSelect_Name")> _
		Shared Function dx_CheckMenuItemSelect_Name_x64(ItemName As String) As Integer
		End Function
		Public Shared Function CheckMenuItemSelect_Name(ItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckMenuItemSelect_Name_x86(ItemName)
			Else
				Return dx_CheckMenuItemSelect_Name_x64(ItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemEnable_Name")> _
		Shared Function dx_SetMenuItemEnable_Name_x86(ItemName As String, EnableFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemEnable_Name")> _
		Shared Function dx_SetMenuItemEnable_Name_x64(ItemName As String, EnableFlag As Integer) As Integer
		End Function
		Public Shared Function SetMenuItemEnable_Name(ItemName As String, EnableFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemEnable_Name_x86(ItemName, EnableFlag)
			Else
				Return dx_SetMenuItemEnable_Name_x64(ItemName, EnableFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemMark_Name")> _
		Shared Function dx_SetMenuItemMark_Name_x86(ItemName As String, Mark As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemMark_Name")> _
		Shared Function dx_SetMenuItemMark_Name_x64(ItemName As String, Mark As Integer) As Integer
		End Function
		Public Shared Function SetMenuItemMark_Name(ItemName As String, Mark As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemMark_Name_x86(ItemName, Mark)
			Else
				Return dx_SetMenuItemMark_Name_x64(ItemName, Mark)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMenuItem_ID")> _
		Shared Function dx_AddMenuItem_ID_x86(ParentItemID As Integer, NewItemName As String, NewItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMenuItem_ID")> _
		Shared Function dx_AddMenuItem_ID_x64(ParentItemID As Integer, NewItemName As String, NewItemID As Integer) As Integer
		End Function
		Public Shared Function AddMenuItem_ID(ParentItemID As Integer, NewItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuItem_ID_x86(ParentItemID, NewItemName, -1)
			Else
				Return dx_AddMenuItem_ID_x64(ParentItemID, NewItemName, -1)
			End If
		End Function
		Public Shared Function AddMenuItem_ID(ParentItemID As Integer, NewItemName As String, NewItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuItem_ID_x86(ParentItemID, NewItemName, NewItemID)
			Else
				Return dx_AddMenuItem_ID_x64(ParentItemID, NewItemName, NewItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMenuLine_ID")> _
		Shared Function dx_AddMenuLine_ID_x86(ParentItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMenuLine_ID")> _
		Shared Function dx_AddMenuLine_ID_x64(ParentItemID As Integer) As Integer
		End Function
		Public Shared Function AddMenuLine_ID(ParentItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMenuLine_ID_x86(ParentItemID)
			Else
				Return dx_AddMenuLine_ID_x64(ParentItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InsertMenuItem_ID")> _
		Shared Function dx_InsertMenuItem_ID_x86(ItemID As Integer, NewItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InsertMenuItem_ID")> _
		Shared Function dx_InsertMenuItem_ID_x64(ItemID As Integer, NewItemID As Integer) As Integer
		End Function
		Public Shared Function InsertMenuItem_ID(ItemID As Integer, NewItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InsertMenuItem_ID_x86(ItemID, NewItemID)
			Else
				Return dx_InsertMenuItem_ID_x64(ItemID, NewItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InsertMenuLine_ID")> _
		Shared Function dx_InsertMenuLine_ID_x86(ItemID As Integer, NewItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InsertMenuLine_ID")> _
		Shared Function dx_InsertMenuLine_ID_x64(ItemID As Integer, NewItemID As Integer) As Integer
		End Function
		Public Shared Function InsertMenuLine_ID(ItemID As Integer, NewItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InsertMenuLine_ID_x86(ItemID, NewItemID)
			Else
				Return dx_InsertMenuLine_ID_x64(ItemID, NewItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMenuItem_ID")> _
		Shared Function dx_DeleteMenuItem_ID_x86(ItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMenuItem_ID")> _
		Shared Function dx_DeleteMenuItem_ID_x64(ItemID As Integer) As Integer
		End Function
		Public Shared Function DeleteMenuItem_ID(ItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMenuItem_ID_x86(ItemID)
			Else
				Return dx_DeleteMenuItem_ID_x64(ItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckMenuItemSelect_ID")> _
		Shared Function dx_CheckMenuItemSelect_ID_x86(ItemID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckMenuItemSelect_ID")> _
		Shared Function dx_CheckMenuItemSelect_ID_x64(ItemID As Integer) As Integer
		End Function
		Public Shared Function CheckMenuItemSelect_ID(ItemID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckMenuItemSelect_ID_x86(ItemID)
			Else
				Return dx_CheckMenuItemSelect_ID_x64(ItemID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemEnable_ID")> _
		Shared Function dx_SetMenuItemEnable_ID_x86(ItemID As Integer, EnableFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemEnable_ID")> _
		Shared Function dx_SetMenuItemEnable_ID_x64(ItemID As Integer, EnableFlag As Integer) As Integer
		End Function
		Public Shared Function SetMenuItemEnable_ID(ItemID As Integer, EnableFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemEnable_ID_x86(ItemID, EnableFlag)
			Else
				Return dx_SetMenuItemEnable_ID_x64(ItemID, EnableFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMenuItemMark_ID")> _
		Shared Function dx_SetMenuItemMark_ID_x86(ItemID As Integer, Mark As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMenuItemMark_ID")> _
		Shared Function dx_SetMenuItemMark_ID_x64(ItemID As Integer, Mark As Integer) As Integer
		End Function
		Public Shared Function SetMenuItemMark_ID(ItemID As Integer, Mark As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMenuItemMark_ID_x86(ItemID, Mark)
			Else
				Return dx_SetMenuItemMark_ID_x64(ItemID, Mark)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMenuItemAll")> _
		Shared Function dx_DeleteMenuItemAll_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMenuItemAll")> _
		Shared Function dx_DeleteMenuItemAll_x64() As Integer
		End Function
		Public Shared Function DeleteMenuItemAll() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMenuItemAll_x86()
			Else
				Return dx_DeleteMenuItemAll_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClearMenuItemSelect")> _
		Shared Function dx_ClearMenuItemSelect_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClearMenuItemSelect")> _
		Shared Function dx_ClearMenuItemSelect_x64() As Integer
		End Function
		Public Shared Function ClearMenuItemSelect() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClearMenuItemSelect_x86()
			Else
				Return dx_ClearMenuItemSelect_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMenuItemID")> _
		Shared Function dx_GetMenuItemID_x86(ItemName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMenuItemID")> _
		Shared Function dx_GetMenuItemID_x64(ItemName As String) As Integer
		End Function
		Public Shared Function GetMenuItemID(ItemName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMenuItemID_x86(ItemName)
			Else
				Return dx_GetMenuItemID_x64(ItemName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMenuItemName")> _
		Shared Function dx_GetMenuItemName_x86(ItemID As Integer, NameBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMenuItemName")> _
		Shared Function dx_GetMenuItemName_x64(ItemID As Integer, NameBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetMenuItemName(ItemID As Integer, NameBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMenuItemName_x86(ItemID, NameBuffer)
			Else
				Return dx_GetMenuItemName_x64(ItemID, NameBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadMenuResource")> _
		Shared Function dx_LoadMenuResource_x86(MenuResourceID As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadMenuResource")> _
		Shared Function dx_LoadMenuResource_x64(MenuResourceID As Integer) As Integer
		End Function
		Public Shared Function LoadMenuResource(MenuResourceID As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadMenuResource_x86(MenuResourceID)
			Else
				Return dx_LoadMenuResource_x64(MenuResourceID)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDisplayMenuFlag")> _
		Shared Function dx_SetDisplayMenuFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDisplayMenuFlag")> _
		Shared Function dx_SetDisplayMenuFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDisplayMenuFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDisplayMenuFlag_x86(Flag)
			Else
				Return dx_SetDisplayMenuFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDisplayMenuFlag")> _
		Shared Function dx_GetDisplayMenuFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDisplayMenuFlag")> _
		Shared Function dx_GetDisplayMenuFlag_x64() As Integer
		End Function
		Public Shared Function GetDisplayMenuFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDisplayMenuFlag_x86()
			Else
				Return dx_GetDisplayMenuFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseMenuFlag")> _
		Shared Function dx_GetUseMenuFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseMenuFlag")> _
		Shared Function dx_GetUseMenuFlag_x64() As Integer
		End Function
		Public Shared Function GetUseMenuFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseMenuFlag_x86()
			Else
				Return dx_GetUseMenuFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetAutoMenuDisplayFlag")> _
		Shared Function dx_SetAutoMenuDisplayFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetAutoMenuDisplayFlag")> _
		Shared Function dx_SetAutoMenuDisplayFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetAutoMenuDisplayFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetAutoMenuDisplayFlag_x86(Flag)
			Else
				Return dx_SetAutoMenuDisplayFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMouseDispFlag")> _
		Shared Function dx_SetMouseDispFlag_x86(DispFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMouseDispFlag")> _
		Shared Function dx_SetMouseDispFlag_x64(DispFlag As Integer) As Integer
		End Function
		Public Shared Function SetMouseDispFlag(DispFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMouseDispFlag_x86(DispFlag)
			Else
				Return dx_SetMouseDispFlag_x64(DispFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMousePoint")> _
		Shared Function dx_GetMousePoint_x86(ByRef XBuf As Integer, ByRef YBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMousePoint")> _
		Shared Function dx_GetMousePoint_x64(ByRef XBuf As Integer, ByRef YBuf As Integer) As Integer
		End Function
		Public Shared Function GetMousePoint(ByRef XBuf As Integer, ByRef YBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMousePoint_x86(XBuf, YBuf)
			Else
				Return dx_GetMousePoint_x64(XBuf, YBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMousePoint")> _
		Shared Function dx_SetMousePoint_x86(PointX As Integer, PointY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMousePoint")> _
		Shared Function dx_SetMousePoint_x64(PointX As Integer, PointY As Integer) As Integer
		End Function
		Public Shared Function SetMousePoint(PointX As Integer, PointY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMousePoint_x86(PointX, PointY)
			Else
				Return dx_SetMousePoint_x64(PointX, PointY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseInput")> _
		Shared Function dx_GetMouseInput_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseInput")> _
		Shared Function dx_GetMouseInput_x64() As Integer
		End Function
		Public Shared Function GetMouseInput() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseInput_x86()
			Else
				Return dx_GetMouseInput_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseWheelRotVol")> _
		Shared Function dx_GetMouseWheelRotVol_x86(CounterReset As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseWheelRotVol")> _
		Shared Function dx_GetMouseWheelRotVol_x64(CounterReset As Integer) As Integer
		End Function
		Public Shared Function GetMouseWheelRotVol() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseWheelRotVol_x86([TRUE])
			Else
				Return dx_GetMouseWheelRotVol_x64([TRUE])
			End If
		End Function
		Public Shared Function GetMouseWheelRotVol(CounterReset As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseWheelRotVol_x86(CounterReset)
			Else
				Return dx_GetMouseWheelRotVol_x64(CounterReset)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseHWheelRotVol")> _
		Shared Function dx_GetMouseHWheelRotVol_x86(CounterReset As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseHWheelRotVol")> _
		Shared Function dx_GetMouseHWheelRotVol_x64(CounterReset As Integer) As Integer
		End Function
		Public Shared Function GetMouseHWheelRotVol() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseHWheelRotVol_x86([TRUE])
			Else
				Return dx_GetMouseHWheelRotVol_x64([TRUE])
			End If
		End Function
		Public Shared Function GetMouseHWheelRotVol(CounterReset As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseHWheelRotVol_x86(CounterReset)
			Else
				Return dx_GetMouseHWheelRotVol_x64(CounterReset)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseWheelRotVolF")> _
		Shared Function dx_GetMouseWheelRotVolF_x86(CounterReset As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseWheelRotVolF")> _
		Shared Function dx_GetMouseWheelRotVolF_x64(CounterReset As Integer) As Single
		End Function
		Public Shared Function GetMouseWheelRotVolF() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseWheelRotVolF_x86([TRUE])
			Else
				Return dx_GetMouseWheelRotVolF_x64([TRUE])
			End If
		End Function
		Public Shared Function GetMouseWheelRotVolF(CounterReset As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseWheelRotVolF_x86(CounterReset)
			Else
				Return dx_GetMouseWheelRotVolF_x64(CounterReset)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseHWheelRotVolF")> _
		Shared Function dx_GetMouseHWheelRotVolF_x86(CounterReset As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseHWheelRotVolF")> _
		Shared Function dx_GetMouseHWheelRotVolF_x64(CounterReset As Integer) As Single
		End Function
		Public Shared Function GetMouseHWheelRotVolF() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseHWheelRotVolF_x86([TRUE])
			Else
				Return dx_GetMouseHWheelRotVolF_x64([TRUE])
			End If
		End Function
		Public Shared Function GetMouseHWheelRotVolF(CounterReset As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseHWheelRotVolF_x86(CounterReset)
			Else
				Return dx_GetMouseHWheelRotVolF_x64(CounterReset)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMouseInputLog")> _
		Shared Function dx_GetMouseInputLog_x86(ByRef Button As Integer, ByRef ClickX As Integer, ByRef ClickY As Integer, LogDelete As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMouseInputLog")> _
		Shared Function dx_GetMouseInputLog_x64(ByRef Button As Integer, ByRef ClickX As Integer, ByRef ClickY As Integer, LogDelete As Integer) As Integer
		End Function
		Public Shared Function GetMouseInputLog(ByRef Button As Integer, ByRef ClickX As Integer, ByRef ClickY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseInputLog_x86(Button, ClickX, ClickY, [TRUE])
			Else
				Return dx_GetMouseInputLog_x64(Button, ClickX, ClickY, [TRUE])
			End If
		End Function
		Public Shared Function GetMouseInputLog(ByRef Button As Integer, ByRef ClickX As Integer, ByRef ClickY As Integer, LogDelete As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMouseInputLog_x86(Button, ClickX, ClickY, LogDelete)
			Else
				Return dx_GetMouseInputLog_x64(Button, ClickX, ClickY, LogDelete)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DxAlloc")> _
		Shared Sub dx_DxAlloc_x86(AllocSize As UInteger, File As String, Line As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxAlloc")> _
		Shared Sub dx_DxAlloc_x64(AllocSize As UInteger, File As String, Line As Integer)
		End Sub
		Public Shared Sub DxAlloc(AllocSize As UInteger)
			If System.IntPtr.Size = 4 Then
				Return dx_DxAlloc_x86(AllocSize, Nothing, -1)
			Else
				Return dx_DxAlloc_x64(AllocSize, Nothing, -1)
			End If
		End Sub
		Public Shared Sub DxAlloc(AllocSize As UInteger, File As String)
			If System.IntPtr.Size = 4 Then
				Return dx_DxAlloc_x86(AllocSize, File, -1)
			Else
				Return dx_DxAlloc_x64(AllocSize, File, -1)
			End If
		End Sub
		Public Shared Sub DxAlloc(AllocSize As UInteger, File As String, Line As Integer)
			If System.IntPtr.Size = 4 Then
				Return dx_DxAlloc_x86(AllocSize, File, Line)
			Else
				Return dx_DxAlloc_x64(AllocSize, File, Line)
			End If
		End Sub
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DxCalloc")> _
		Shared Sub dx_DxCalloc_x86(AllocSize As UInteger, File As String, Line As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxCalloc")> _
		Shared Sub dx_DxCalloc_x64(AllocSize As UInteger, File As String, Line As Integer)
		End Sub
		Public Shared Sub DxCalloc(AllocSize As UInteger)
			If System.IntPtr.Size = 4 Then
				Return dx_DxCalloc_x86(AllocSize, Nothing, -1)
			Else
				Return dx_DxCalloc_x64(AllocSize, Nothing, -1)
			End If
		End Sub
		Public Shared Sub DxCalloc(AllocSize As UInteger, File As String)
			If System.IntPtr.Size = 4 Then
				Return dx_DxCalloc_x86(AllocSize, File, -1)
			Else
				Return dx_DxCalloc_x64(AllocSize, File, -1)
			End If
		End Sub
		Public Shared Sub DxCalloc(AllocSize As UInteger, File As String, Line As Integer)
			If System.IntPtr.Size = 4 Then
				Return dx_DxCalloc_x86(AllocSize, File, Line)
			Else
				Return dx_DxCalloc_x64(AllocSize, File, Line)
			End If
		End Sub
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DxRealloc")> _
		Shared Sub dx_DxRealloc_x86(Memory As System.Void*, AllocSize As UInteger, File As String, Line As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxRealloc")> _
		Shared Sub dx_DxRealloc_x64(Memory As System.Void*, AllocSize As UInteger, File As String, Line As Integer)
		End Sub
		Public Shared Sub DxRealloc(Memory As System.Void*, AllocSize As UInteger)
			If System.IntPtr.Size = 4 Then
				Return dx_DxRealloc_x86(Memory, AllocSize, Nothing, -1)
			Else
				Return dx_DxRealloc_x64(Memory, AllocSize, Nothing, -1)
			End If
		End Sub
		Public Shared Sub DxRealloc(Memory As System.Void*, AllocSize As UInteger, File As String)
			If System.IntPtr.Size = 4 Then
				Return dx_DxRealloc_x86(Memory, AllocSize, File, -1)
			Else
				Return dx_DxRealloc_x64(Memory, AllocSize, File, -1)
			End If
		End Sub
		Public Shared Sub DxRealloc(Memory As System.Void*, AllocSize As UInteger, File As String, Line As Integer)
			If System.IntPtr.Size = 4 Then
				Return dx_DxRealloc_x86(Memory, AllocSize, File, Line)
			Else
				Return dx_DxRealloc_x64(Memory, AllocSize, File, Line)
			End If
		End Sub
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DxFree")> _
		Shared Sub dx_DxFree_x86(Memory As System.Void*)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxFree")> _
		Shared Sub dx_DxFree_x64(Memory As System.Void*)
		End Sub
		Public Shared Sub DxFree(Memory As System.Void*)
			If System.IntPtr.Size = 4 Then
				dx_DxFree_x86(Memory)
			Else
				dx_DxFree_x64(Memory)
			End If
		End Sub
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxSetAllocSizeTrap")> _
		Shared Function dx_DxSetAllocSizeTrap_x86(Size As UInteger) As UInteger
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxSetAllocSizeTrap")> _
		Shared Function dx_DxSetAllocSizeTrap_x64(Size As UInteger) As UInteger
		End Function
		Public Shared Function DxSetAllocSizeTrap(Size As UInteger) As UInteger
			If System.IntPtr.Size = 4 Then
				Return dx_DxSetAllocSizeTrap_x86(Size)
			Else
				Return dx_DxSetAllocSizeTrap_x64(Size)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxSetAllocPrintFlag")> _
		Shared Function dx_DxSetAllocPrintFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxSetAllocPrintFlag")> _
		Shared Function dx_DxSetAllocPrintFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function DxSetAllocPrintFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxSetAllocPrintFlag_x86(Flag)
			Else
				Return dx_DxSetAllocPrintFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxGetAllocSize")> _
		Shared Function dx_DxGetAllocSize_x86() As UInteger
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxGetAllocSize")> _
		Shared Function dx_DxGetAllocSize_x64() As UInteger
		End Function
		Public Shared Function DxGetAllocSize() As UInteger
			If System.IntPtr.Size = 4 Then
				Return dx_DxGetAllocSize_x86()
			Else
				Return dx_DxGetAllocSize_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxGetAllocNum")> _
		Shared Function dx_DxGetAllocNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxGetAllocNum")> _
		Shared Function dx_DxGetAllocNum_x64() As Integer
		End Function
		Public Shared Function DxGetAllocNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxGetAllocNum_x86()
			Else
				Return dx_DxGetAllocNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxDumpAlloc")> _
		Shared Sub dx_DxDumpAlloc_x86()
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxDumpAlloc")> _
		Shared Sub dx_DxDumpAlloc_x64()
		End Sub
		Public Shared Sub DxDumpAlloc()
			If System.IntPtr.Size = 4 Then
				dx_DxDumpAlloc_x86()
			Else
				dx_DxDumpAlloc_x64()
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxErrorCheckAlloc")> _
		Shared Function dx_DxErrorCheckAlloc_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxErrorCheckAlloc")> _
		Shared Function dx_DxErrorCheckAlloc_x64() As Integer
		End Function
		Public Shared Function DxErrorCheckAlloc() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxErrorCheckAlloc_x86()
			Else
				Return dx_DxErrorCheckAlloc_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxSetAllocSizeOutFlag")> _
		Shared Function dx_DxSetAllocSizeOutFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxSetAllocSizeOutFlag")> _
		Shared Function dx_DxSetAllocSizeOutFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function DxSetAllocSizeOutFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxSetAllocSizeOutFlag_x86(Flag)
			Else
				Return dx_DxSetAllocSizeOutFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DxSetAllocMemoryErrorCheckFlag")> _
		Shared Function dx_DxSetAllocMemoryErrorCheckFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DxSetAllocMemoryErrorCheckFlag")> _
		Shared Function dx_DxSetAllocMemoryErrorCheckFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function DxSetAllocMemoryErrorCheckFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DxSetAllocMemoryErrorCheckFlag_x86(Flag)
			Else
				Return dx_DxSetAllocMemoryErrorCheckFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ProcessNetMessage")> _
		Shared Function dx_ProcessNetMessage_x86(RunReleaseProcess As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ProcessNetMessage")> _
		Shared Function dx_ProcessNetMessage_x64(RunReleaseProcess As Integer) As Integer
		End Function
		Public Shared Function ProcessNetMessage() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessNetMessage_x86([FALSE])
			Else
				Return dx_ProcessNetMessage_x64([FALSE])
			End If
		End Function
		Public Shared Function ProcessNetMessage(RunReleaseProcess As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessNetMessage_x86(RunReleaseProcess)
			Else
				Return dx_ProcessNetMessage_x64(RunReleaseProcess)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetHostIPbyName")> _
		Shared Function dx_GetHostIPbyName_x86(HostName As String, IPDataBuf As IPDATA*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetHostIPbyName")> _
		Shared Function dx_GetHostIPbyName_x64(HostName As String, IPDataBuf As IPDATA*) As Integer
		End Function
		Public Shared Function GetHostIPbyName(HostName As String, IPDataBuf As IPDATA*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetHostIPbyName_x86(HostName, IPDataBuf)
			Else
				Return dx_GetHostIPbyName_x64(HostName, IPDataBuf)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetHostIPbyName_IPv6")> _
		Shared Function dx_GetHostIPbyName_IPv6_x86(HostName As String, IPDataBuf As IPDATA_IPv6*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetHostIPbyName_IPv6")> _
		Shared Function dx_GetHostIPbyName_IPv6_x64(HostName As String, IPDataBuf As IPDATA_IPv6*) As Integer
		End Function
		Public Shared Function GetHostIPbyName_IPv6(HostName As String, IPDataBuf As IPDATA_IPv6*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetHostIPbyName_IPv6_x86(HostName, IPDataBuf)
			Else
				Return dx_GetHostIPbyName_IPv6_x64(HostName, IPDataBuf)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConnectNetWork")> _
		Shared Function dx_ConnectNetWork_x86(IPData As IPDATA, Port As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConnectNetWork")> _
		Shared Function dx_ConnectNetWork_x64(IPData As IPDATA, Port As Integer) As Integer
		End Function
		Public Shared Function ConnectNetWork(IPData As IPDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_x86(IPData, -1)
			Else
				Return dx_ConnectNetWork_x64(IPData, -1)
			End If
		End Function
		Public Shared Function ConnectNetWork(IPData As IPDATA, Port As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_x86(IPData, Port)
			Else
				Return dx_ConnectNetWork_x64(IPData, Port)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConnectNetWork_IPv6")> _
		Shared Function dx_ConnectNetWork_IPv6_x86(IPData As IPDATA_IPv6, Port As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConnectNetWork_IPv6")> _
		Shared Function dx_ConnectNetWork_IPv6_x64(IPData As IPDATA_IPv6, Port As Integer) As Integer
		End Function
		Public Shared Function ConnectNetWork_IPv6(IPData As IPDATA_IPv6) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_IPv6_x86(IPData, -1)
			Else
				Return dx_ConnectNetWork_IPv6_x64(IPData, -1)
			End If
		End Function
		Public Shared Function ConnectNetWork_IPv6(IPData As IPDATA_IPv6, Port As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_IPv6_x86(IPData, Port)
			Else
				Return dx_ConnectNetWork_IPv6_x64(IPData, Port)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConnectNetWork_ASync")> _
		Shared Function dx_ConnectNetWork_ASync_x86(IPData As IPDATA, Port As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConnectNetWork_ASync")> _
		Shared Function dx_ConnectNetWork_ASync_x64(IPData As IPDATA, Port As Integer) As Integer
		End Function
		Public Shared Function ConnectNetWork_ASync(IPData As IPDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_ASync_x86(IPData, -1)
			Else
				Return dx_ConnectNetWork_ASync_x64(IPData, -1)
			End If
		End Function
		Public Shared Function ConnectNetWork_ASync(IPData As IPDATA, Port As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_ASync_x86(IPData, Port)
			Else
				Return dx_ConnectNetWork_ASync_x64(IPData, Port)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConnectNetWork_IPv6_ASync")> _
		Shared Function dx_ConnectNetWork_IPv6_ASync_x86(IPData As IPDATA_IPv6, Port As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConnectNetWork_IPv6_ASync")> _
		Shared Function dx_ConnectNetWork_IPv6_ASync_x64(IPData As IPDATA_IPv6, Port As Integer) As Integer
		End Function
		Public Shared Function ConnectNetWork_IPv6_ASync(IPData As IPDATA_IPv6) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_IPv6_ASync_x86(IPData, -1)
			Else
				Return dx_ConnectNetWork_IPv6_ASync_x64(IPData, -1)
			End If
		End Function
		Public Shared Function ConnectNetWork_IPv6_ASync(IPData As IPDATA_IPv6, Port As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConnectNetWork_IPv6_ASync_x86(IPData, Port)
			Else
				Return dx_ConnectNetWork_IPv6_ASync_x64(IPData, Port)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PreparationListenNetWork")> _
		Shared Function dx_PreparationListenNetWork_x86(Port As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PreparationListenNetWork")> _
		Shared Function dx_PreparationListenNetWork_x64(Port As Integer) As Integer
		End Function
		Public Shared Function PreparationListenNetWork() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PreparationListenNetWork_x86(-1)
			Else
				Return dx_PreparationListenNetWork_x64(-1)
			End If
		End Function
		Public Shared Function PreparationListenNetWork(Port As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PreparationListenNetWork_x86(Port)
			Else
				Return dx_PreparationListenNetWork_x64(Port)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PreparationListenNetWork_IPv6")> _
		Shared Function dx_PreparationListenNetWork_IPv6_x86(Port As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PreparationListenNetWork_IPv6")> _
		Shared Function dx_PreparationListenNetWork_IPv6_x64(Port As Integer) As Integer
		End Function
		Public Shared Function PreparationListenNetWork_IPv6() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PreparationListenNetWork_IPv6_x86(-1)
			Else
				Return dx_PreparationListenNetWork_IPv6_x64(-1)
			End If
		End Function
		Public Shared Function PreparationListenNetWork_IPv6(Port As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PreparationListenNetWork_IPv6_x86(Port)
			Else
				Return dx_PreparationListenNetWork_IPv6_x64(Port)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopListenNetWork")> _
		Shared Function dx_StopListenNetWork_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopListenNetWork")> _
		Shared Function dx_StopListenNetWork_x64() As Integer
		End Function
		Public Shared Function StopListenNetWork() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopListenNetWork_x86()
			Else
				Return dx_StopListenNetWork_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CloseNetWork")> _
		Shared Function dx_CloseNetWork_x86(NetHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CloseNetWork")> _
		Shared Function dx_CloseNetWork_x64(NetHandle As Integer) As Integer
		End Function
		Public Shared Function CloseNetWork(NetHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CloseNetWork_x86(NetHandle)
			Else
				Return dx_CloseNetWork_x64(NetHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNetWorkAcceptState")> _
		Shared Function dx_GetNetWorkAcceptState_x86(NetHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNetWorkAcceptState")> _
		Shared Function dx_GetNetWorkAcceptState_x64(NetHandle As Integer) As Integer
		End Function
		Public Shared Function GetNetWorkAcceptState(NetHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNetWorkAcceptState_x86(NetHandle)
			Else
				Return dx_GetNetWorkAcceptState_x64(NetHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNetWorkDataLength")> _
		Shared Function dx_GetNetWorkDataLength_x86(NetHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNetWorkDataLength")> _
		Shared Function dx_GetNetWorkDataLength_x64(NetHandle As Integer) As Integer
		End Function
		Public Shared Function GetNetWorkDataLength(NetHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNetWorkDataLength_x86(NetHandle)
			Else
				Return dx_GetNetWorkDataLength_x64(NetHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNetWorkSendDataLength")> _
		Shared Function dx_GetNetWorkSendDataLength_x86(NetHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNetWorkSendDataLength")> _
		Shared Function dx_GetNetWorkSendDataLength_x64(NetHandle As Integer) As Integer
		End Function
		Public Shared Function GetNetWorkSendDataLength(NetHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNetWorkSendDataLength_x86(NetHandle)
			Else
				Return dx_GetNetWorkSendDataLength_x64(NetHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNewAcceptNetWork")> _
		Shared Function dx_GetNewAcceptNetWork_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNewAcceptNetWork")> _
		Shared Function dx_GetNewAcceptNetWork_x64() As Integer
		End Function
		Public Shared Function GetNewAcceptNetWork() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNewAcceptNetWork_x86()
			Else
				Return dx_GetNewAcceptNetWork_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLostNetWork")> _
		Shared Function dx_GetLostNetWork_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLostNetWork")> _
		Shared Function dx_GetLostNetWork_x64() As Integer
		End Function
		Public Shared Function GetLostNetWork() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLostNetWork_x86()
			Else
				Return dx_GetLostNetWork_x64()
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNetWorkIP")> _
		Shared Function dx_GetNetWorkIP_x86(NetHandle As Integer, IpBuf As IPDATA*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNetWorkIP")> _
		Shared Function dx_GetNetWorkIP_x64(NetHandle As Integer, IpBuf As IPDATA*) As Integer
		End Function
		Public Shared Function GetNetWorkIP(NetHandle As Integer, IpBuf As IPDATA*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNetWorkIP_x86(NetHandle, IpBuf)
			Else
				Return dx_GetNetWorkIP_x64(NetHandle, IpBuf)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNetWorkIP_IPv6")> _
		Shared Function dx_GetNetWorkIP_IPv6_x86(NetHandle As Integer, IpBuf As IPDATA_IPv6*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNetWorkIP_IPv6")> _
		Shared Function dx_GetNetWorkIP_IPv6_x64(NetHandle As Integer, IpBuf As IPDATA_IPv6*) As Integer
		End Function
		Public Shared Function GetNetWorkIP_IPv6(NetHandle As Integer, IpBuf As IPDATA_IPv6*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNetWorkIP_IPv6_x86(NetHandle, IpBuf)
			Else
				Return dx_GetNetWorkIP_IPv6_x64(NetHandle, IpBuf)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMyIPAddress")> _
		Shared Function dx_GetMyIPAddress_x86(IpBuf As IPDATA*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMyIPAddress")> _
		Shared Function dx_GetMyIPAddress_x64(IpBuf As IPDATA*) As Integer
		End Function
		Public Shared Function GetMyIPAddress(IpBuf As IPDATA*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMyIPAddress_x86(IpBuf)
			Else
				Return dx_GetMyIPAddress_x64(IpBuf)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetConnectTimeOutWait")> _
		Shared Function dx_SetConnectTimeOutWait_x86(Time As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetConnectTimeOutWait")> _
		Shared Function dx_SetConnectTimeOutWait_x64(Time As Integer) As Integer
		End Function
		Public Shared Function SetConnectTimeOutWait(Time As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetConnectTimeOutWait_x86(Time)
			Else
				Return dx_SetConnectTimeOutWait_x64(Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDXNetWorkProtocol")> _
		Shared Function dx_SetUseDXNetWorkProtocol_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDXNetWorkProtocol")> _
		Shared Function dx_SetUseDXNetWorkProtocol_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDXNetWorkProtocol(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDXNetWorkProtocol_x86(Flag)
			Else
				Return dx_SetUseDXNetWorkProtocol_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseDXNetWorkProtocol")> _
		Shared Function dx_GetUseDXNetWorkProtocol_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseDXNetWorkProtocol")> _
		Shared Function dx_GetUseDXNetWorkProtocol_x64() As Integer
		End Function
		Public Shared Function GetUseDXNetWorkProtocol() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseDXNetWorkProtocol_x86()
			Else
				Return dx_GetUseDXNetWorkProtocol_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDXProtocol")> _
		Shared Function dx_SetUseDXProtocol_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDXProtocol")> _
		Shared Function dx_SetUseDXProtocol_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDXProtocol(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDXProtocol_x86(Flag)
			Else
				Return dx_SetUseDXProtocol_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseDXProtocol")> _
		Shared Function dx_GetUseDXProtocol_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseDXProtocol")> _
		Shared Function dx_GetUseDXProtocol_x64() As Integer
		End Function
		Public Shared Function GetUseDXProtocol() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseDXProtocol_x86()
			Else
				Return dx_GetUseDXProtocol_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNetWorkCloseAfterLostFlag")> _
		Shared Function dx_SetNetWorkCloseAfterLostFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNetWorkCloseAfterLostFlag")> _
		Shared Function dx_SetNetWorkCloseAfterLostFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetNetWorkCloseAfterLostFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNetWorkCloseAfterLostFlag_x86(Flag)
			Else
				Return dx_SetNetWorkCloseAfterLostFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetNetWorkCloseAfterLostFlag")> _
		Shared Function dx_GetNetWorkCloseAfterLostFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetNetWorkCloseAfterLostFlag")> _
		Shared Function dx_GetNetWorkCloseAfterLostFlag_x64() As Integer
		End Function
		Public Shared Function GetNetWorkCloseAfterLostFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetNetWorkCloseAfterLostFlag_x86()
			Else
				Return dx_GetNetWorkCloseAfterLostFlag_x64()
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkRecv")> _
		Shared Function dx_NetWorkRecv_x86(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkRecv")> _
		Shared Function dx_NetWorkRecv_x64(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		Public Shared Function NetWorkRecv(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkRecv_x86(NetHandle, Buffer, Length)
			Else
				Return dx_NetWorkRecv_x64(NetHandle, Buffer, Length)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkRecvToPeek")> _
		Shared Function dx_NetWorkRecvToPeek_x86(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkRecvToPeek")> _
		Shared Function dx_NetWorkRecvToPeek_x64(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		Public Shared Function NetWorkRecvToPeek(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkRecvToPeek_x86(NetHandle, Buffer, Length)
			Else
				Return dx_NetWorkRecvToPeek_x64(NetHandle, Buffer, Length)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkRecvBufferClear")> _
		Shared Function dx_NetWorkRecvBufferClear_x86(NetHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkRecvBufferClear")> _
		Shared Function dx_NetWorkRecvBufferClear_x64(NetHandle As Integer) As Integer
		End Function
		Public Shared Function NetWorkRecvBufferClear(NetHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkRecvBufferClear_x86(NetHandle)
			Else
				Return dx_NetWorkRecvBufferClear_x64(NetHandle)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkSend")> _
		Shared Function dx_NetWorkSend_x86(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkSend")> _
		Shared Function dx_NetWorkSend_x64(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		Public Shared Function NetWorkSend(NetHandle As Integer, Buffer As System.Void*, Length As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkSend_x86(NetHandle, Buffer, Length)
			Else
				Return dx_NetWorkSend_x64(NetHandle, Buffer, Length)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeUDPSocket")> _
		Shared Function dx_MakeUDPSocket_x86(RecvPort As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeUDPSocket")> _
		Shared Function dx_MakeUDPSocket_x64(RecvPort As Integer) As Integer
		End Function
		Public Shared Function MakeUDPSocket() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeUDPSocket_x86(-1)
			Else
				Return dx_MakeUDPSocket_x64(-1)
			End If
		End Function
		Public Shared Function MakeUDPSocket(RecvPort As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeUDPSocket_x86(RecvPort)
			Else
				Return dx_MakeUDPSocket_x64(RecvPort)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeUDPSocket_IPv6")> _
		Shared Function dx_MakeUDPSocket_IPv6_x86(RecvPort As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeUDPSocket_IPv6")> _
		Shared Function dx_MakeUDPSocket_IPv6_x64(RecvPort As Integer) As Integer
		End Function
		Public Shared Function MakeUDPSocket_IPv6() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeUDPSocket_IPv6_x86(-1)
			Else
				Return dx_MakeUDPSocket_IPv6_x64(-1)
			End If
		End Function
		Public Shared Function MakeUDPSocket_IPv6(RecvPort As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeUDPSocket_IPv6_x86(RecvPort)
			Else
				Return dx_MakeUDPSocket_IPv6_x64(RecvPort)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteUDPSocket")> _
		Shared Function dx_DeleteUDPSocket_x86(NetUDPHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteUDPSocket")> _
		Shared Function dx_DeleteUDPSocket_x64(NetUDPHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteUDPSocket(NetUDPHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteUDPSocket_x86(NetUDPHandle)
			Else
				Return dx_DeleteUDPSocket_x64(NetUDPHandle)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkSendUDP")> _
		Shared Function dx_NetWorkSendUDP_x86(NetUDPHandle As Integer, SendIP As IPDATA, SendPort As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkSendUDP")> _
		Shared Function dx_NetWorkSendUDP_x64(NetUDPHandle As Integer, SendIP As IPDATA, SendPort As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		Public Shared Function NetWorkSendUDP(NetUDPHandle As Integer, SendIP As IPDATA, SendPort As Integer, Buffer As System.Void*, Length As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkSendUDP_x86(NetUDPHandle, SendIP, SendPort, Buffer, Length)
			Else
				Return dx_NetWorkSendUDP_x64(NetUDPHandle, SendIP, SendPort, Buffer, Length)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkSendUDP_IPv6")> _
		Shared Function dx_NetWorkSendUDP_IPv6_x86(NetUDPHandle As Integer, SendIP As IPDATA_IPv6, SendPort As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkSendUDP_IPv6")> _
		Shared Function dx_NetWorkSendUDP_IPv6_x64(NetUDPHandle As Integer, SendIP As IPDATA_IPv6, SendPort As Integer, Buffer As System.Void*, Length As Integer) As Integer
		End Function
		Public Shared Function NetWorkSendUDP_IPv6(NetUDPHandle As Integer, SendIP As IPDATA_IPv6, SendPort As Integer, Buffer As System.Void*, Length As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkSendUDP_IPv6_x86(NetUDPHandle, SendIP, SendPort, Buffer, Length)
			Else
				Return dx_NetWorkSendUDP_IPv6_x64(NetUDPHandle, SendIP, SendPort, Buffer, Length)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkRecvUDP")> _
		Shared Function dx_NetWorkRecvUDP_x86(NetUDPHandle As Integer, RecvIP As IPDATA*, RecvPort As Integer*, Buffer As System.Void*, Length As Integer, Peek As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkRecvUDP")> _
		Shared Function dx_NetWorkRecvUDP_x64(NetUDPHandle As Integer, RecvIP As IPDATA*, RecvPort As Integer*, Buffer As System.Void*, Length As Integer, Peek As Integer) As Integer
		End Function
		Public Shared Function NetWorkRecvUDP(NetUDPHandle As Integer, RecvIP As IPDATA*, RecvPort As Integer*, Buffer As System.Void*, Length As Integer, Peek As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkRecvUDP_x86(NetUDPHandle, RecvIP, RecvPort, Buffer, Length, Peek)
			Else
				Return dx_NetWorkRecvUDP_x64(NetUDPHandle, RecvIP, RecvPort, Buffer, Length, Peek)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_NetWorkRecvUDP_IPv6")> _
		Shared Function dx_NetWorkRecvUDP_IPv6_x86(NetUDPHandle As Integer, RecvIP As IPDATA_IPv6*, RecvPort As Integer*, Buffer As System.Void*, Length As Integer, Peek As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_NetWorkRecvUDP_IPv6")> _
		Shared Function dx_NetWorkRecvUDP_IPv6_x64(NetUDPHandle As Integer, RecvIP As IPDATA_IPv6*, RecvPort As Integer*, Buffer As System.Void*, Length As Integer, Peek As Integer) As Integer
		End Function
		Public Shared Function NetWorkRecvUDP_IPv6(NetUDPHandle As Integer, RecvIP As IPDATA_IPv6*, RecvPort As Integer*, Buffer As System.Void*, Length As Integer, Peek As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_NetWorkRecvUDP_IPv6_x86(NetUDPHandle, RecvIP, RecvPort, Buffer, Length, Peek)
			Else
				Return dx_NetWorkRecvUDP_IPv6_x64(NetUDPHandle, RecvIP, RecvPort, Buffer, Length, Peek)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckNetWorkRecvUDP")> _
		Shared Function dx_CheckNetWorkRecvUDP_x86(NetUDPHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckNetWorkRecvUDP")> _
		Shared Function dx_CheckNetWorkRecvUDP_x64(NetUDPHandle As Integer) As Integer
		End Function
		Public Shared Function CheckNetWorkRecvUDP(NetUDPHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckNetWorkRecvUDP_x86(NetUDPHandle)
			Else
				Return dx_CheckNetWorkRecvUDP_x64(NetUDPHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StockInputChar")> _
		Shared Function dx_StockInputChar_x86(CharCode As Char) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StockInputChar")> _
		Shared Function dx_StockInputChar_x64(CharCode As Char) As Integer
		End Function
		Public Shared Function StockInputChar(CharCode As Char) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StockInputChar_x86(CharCode)
			Else
				Return dx_StockInputChar_x64(CharCode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClearInputCharBuf")> _
		Shared Function dx_ClearInputCharBuf_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClearInputCharBuf")> _
		Shared Function dx_ClearInputCharBuf_x64() As Integer
		End Function
		Public Shared Function ClearInputCharBuf() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClearInputCharBuf_x86()
			Else
				Return dx_ClearInputCharBuf_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetOneChar")> _
		Shared Function dx_GetOneChar_x86(CharBuffer As System.Text.StringBuilder, DeleteFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetOneChar")> _
		Shared Function dx_GetOneChar_x64(CharBuffer As System.Text.StringBuilder, DeleteFlag As Integer) As Integer
		End Function
		Public Shared Function GetOneChar(CharBuffer As System.Text.StringBuilder, DeleteFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetOneChar_x86(CharBuffer, DeleteFlag)
			Else
				Return dx_GetOneChar_x64(CharBuffer, DeleteFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetOneCharWait")> _
		Shared Function dx_GetOneCharWait_x86(CharBuffer As System.Text.StringBuilder, DeleteFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetOneCharWait")> _
		Shared Function dx_GetOneCharWait_x64(CharBuffer As System.Text.StringBuilder, DeleteFlag As Integer) As Integer
		End Function
		Public Shared Function GetOneCharWait(CharBuffer As System.Text.StringBuilder, DeleteFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetOneCharWait_x86(CharBuffer, DeleteFlag)
			Else
				Return dx_GetOneCharWait_x64(CharBuffer, DeleteFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCtrlCodeCmp")> _
		Shared Function dx_GetCtrlCodeCmp_x86([Char] As Char) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCtrlCodeCmp")> _
		Shared Function dx_GetCtrlCodeCmp_x64([Char] As Char) As Integer
		End Function
		Public Shared Function GetCtrlCodeCmp([Char] As Char) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCtrlCodeCmp_x86([Char])
			Else
				Return dx_GetCtrlCodeCmp_x64([Char])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawIMEInputString")> _
		Shared Function dx_DrawIMEInputString_x86(x As Integer, y As Integer, SelectStringNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawIMEInputString")> _
		Shared Function dx_DrawIMEInputString_x64(x As Integer, y As Integer, SelectStringNum As Integer) As Integer
		End Function
		Public Shared Function DrawIMEInputString(x As Integer, y As Integer, SelectStringNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawIMEInputString_x86(x, y, SelectStringNum)
			Else
				Return dx_DrawIMEInputString_x64(x, y, SelectStringNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseIMEFlag")> _
		Shared Function dx_SetUseIMEFlag_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseIMEFlag")> _
		Shared Function dx_SetUseIMEFlag_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetUseIMEFlag(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseIMEFlag_x86(UseFlag)
			Else
				Return dx_SetUseIMEFlag_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetInputStringMaxLengthIMESync")> _
		Shared Function dx_SetInputStringMaxLengthIMESync_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetInputStringMaxLengthIMESync")> _
		Shared Function dx_SetInputStringMaxLengthIMESync_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetInputStringMaxLengthIMESync(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetInputStringMaxLengthIMESync_x86(Flag)
			Else
				Return dx_SetInputStringMaxLengthIMESync_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetIMEInputStringMaxLength")> _
		Shared Function dx_SetIMEInputStringMaxLength_x86(Length As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetIMEInputStringMaxLength")> _
		Shared Function dx_SetIMEInputStringMaxLength_x64(Length As Integer) As Integer
		End Function
		Public Shared Function SetIMEInputStringMaxLength(Length As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetIMEInputStringMaxLength_x86(Length)
			Else
				Return dx_SetIMEInputStringMaxLength_x64(Length)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStringPoint")> _
		Shared Function dx_GetStringPoint_x86([String] As String, Point As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStringPoint")> _
		Shared Function dx_GetStringPoint_x64([String] As String, Point As Integer) As Integer
		End Function
		Public Shared Function GetStringPoint([String] As String, Point As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStringPoint_x86([String], Point)
			Else
				Return dx_GetStringPoint_x64([String], Point)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStringPoint2")> _
		Shared Function dx_GetStringPoint2_x86([String] As String, Point As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStringPoint2")> _
		Shared Function dx_GetStringPoint2_x64([String] As String, Point As Integer) As Integer
		End Function
		Public Shared Function GetStringPoint2([String] As String, Point As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStringPoint2_x86([String], Point)
			Else
				Return dx_GetStringPoint2_x64([String], Point)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStringLength")> _
		Shared Function dx_GetStringLength_x86([String] As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStringLength")> _
		Shared Function dx_GetStringLength_x64([String] As String) As Integer
		End Function
		Public Shared Function GetStringLength([String] As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStringLength_x86([String])
			Else
				Return dx_GetStringLength_x64([String])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawObtainsString")> _
		Shared Function dx_DrawObtainsString_x86(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer, SelectEnd As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawObtainsString")> _
		Shared Function dx_DrawObtainsString_x64(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer, SelectEnd As Integer) As Integer
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, 0, _
					-1, -1, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, 0, _
					-1, -1, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					-1, -1, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					-1, -1, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, -1, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, -1, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, -1, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, -1)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer, SelectEnd As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, SelectEnd)
			Else
				Return dx_DrawObtainsString_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, SelectEnd)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawObtainsString_CharClip")> _
		Shared Function dx_DrawObtainsString_CharClip_x86(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer, SelectEnd As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawObtainsString_CharClip")> _
		Shared Function dx_DrawObtainsString_CharClip_x64(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer, SelectEnd As Integer) As Integer
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, 0, _
					-1, -1, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, 0, _
					-1, -1, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					-1, -1, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					-1, -1, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, -1, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, -1, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, 0, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, 0, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, -1, -1, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, -1, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, -1, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, -1, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, -1)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, -1)
			End If
		End Function
		Public Shared Function DrawObtainsString_CharClip(x As Integer, y As Integer, AddY As Integer, [String] As String, StrColor As Integer, StrEdgeColor As Integer, _
			FontHandle As Integer, SelectBackColor As Integer, SelectStrColor As Integer, SelectStrEdgeColor As Integer, SelectStart As Integer, SelectEnd As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsString_CharClip_x86(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, SelectEnd)
			Else
				Return dx_DrawObtainsString_CharClip_x64(x, y, AddY, [String], StrColor, StrEdgeColor, _
					FontHandle, SelectBackColor, SelectStrColor, SelectStrEdgeColor, SelectStart, SelectEnd)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawObtainsBox")> _
		Shared Function dx_DrawObtainsBox_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, AddY As Integer, Color As Integer, _
			FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawObtainsBox")> _
		Shared Function dx_DrawObtainsBox_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, AddY As Integer, Color As Integer, _
			FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawObtainsBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, AddY As Integer, Color As Integer, _
			FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawObtainsBox_x86(x1, y1, x2, y2, AddY, Color, _
					FillFlag)
			Else
				Return dx_DrawObtainsBox_x64(x1, y1, x2, y2, AddY, Color, _
					FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InputStringToCustom")> _
		Shared Function dx_InputStringToCustom_x86(x As Integer, y As Integer, BufLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, _
			NumCharOnlyFlag As Integer, DoubleCharOnlyFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InputStringToCustom")> _
		Shared Function dx_InputStringToCustom_x64(x As Integer, y As Integer, BufLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, _
			NumCharOnlyFlag As Integer, DoubleCharOnlyFlag As Integer) As Integer
		End Function
		Public Shared Function InputStringToCustom(x As Integer, y As Integer, BufLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, _
			NumCharOnlyFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InputStringToCustom_x86(x, y, BufLength, StrBuffer, CancelValidFlag, SingleCharOnlyFlag, _
					NumCharOnlyFlag, [FALSE])
			Else
				Return dx_InputStringToCustom_x64(x, y, BufLength, StrBuffer, CancelValidFlag, SingleCharOnlyFlag, _
					NumCharOnlyFlag, [FALSE])
			End If
		End Function
		Public Shared Function InputStringToCustom(x As Integer, y As Integer, BufLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, _
			NumCharOnlyFlag As Integer, DoubleCharOnlyFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InputStringToCustom_x86(x, y, BufLength, StrBuffer, CancelValidFlag, SingleCharOnlyFlag, _
					NumCharOnlyFlag, DoubleCharOnlyFlag)
			Else
				Return dx_InputStringToCustom_x64(x, y, BufLength, StrBuffer, CancelValidFlag, SingleCharOnlyFlag, _
					NumCharOnlyFlag, DoubleCharOnlyFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_KeyInputString")> _
		Shared Function dx_KeyInputString_x86(x As Integer, y As Integer, CharMaxLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_KeyInputString")> _
		Shared Function dx_KeyInputString_x64(x As Integer, y As Integer, CharMaxLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer) As Integer
		End Function
		Public Shared Function KeyInputString(x As Integer, y As Integer, CharMaxLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_KeyInputString_x86(x, y, CharMaxLength, StrBuffer, CancelValidFlag)
			Else
				Return dx_KeyInputString_x64(x, y, CharMaxLength, StrBuffer, CancelValidFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_KeyInputSingleCharString")> _
		Shared Function dx_KeyInputSingleCharString_x86(x As Integer, y As Integer, CharMaxLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_KeyInputSingleCharString")> _
		Shared Function dx_KeyInputSingleCharString_x64(x As Integer, y As Integer, CharMaxLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer) As Integer
		End Function
		Public Shared Function KeyInputSingleCharString(x As Integer, y As Integer, CharMaxLength As Integer, StrBuffer As System.Text.StringBuilder, CancelValidFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_KeyInputSingleCharString_x86(x, y, CharMaxLength, StrBuffer, CancelValidFlag)
			Else
				Return dx_KeyInputSingleCharString_x64(x, y, CharMaxLength, StrBuffer, CancelValidFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_KeyInputNumber")> _
		Shared Function dx_KeyInputNumber_x86(x As Integer, y As Integer, MaxNum As Integer, MinNum As Integer, CancelValidFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_KeyInputNumber")> _
		Shared Function dx_KeyInputNumber_x64(x As Integer, y As Integer, MaxNum As Integer, MinNum As Integer, CancelValidFlag As Integer) As Integer
		End Function
		Public Shared Function KeyInputNumber(x As Integer, y As Integer, MaxNum As Integer, MinNum As Integer, CancelValidFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_KeyInputNumber_x86(x, y, MaxNum, MinNum, CancelValidFlag)
			Else
				Return dx_KeyInputNumber_x64(x, y, MaxNum, MinNum, CancelValidFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetIMEInputModeStr")> _
		Shared Function dx_GetIMEInputModeStr_x86(GetBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetIMEInputModeStr")> _
		Shared Function dx_GetIMEInputModeStr_x64(GetBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetIMEInputModeStr(GetBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetIMEInputModeStr_x86(GetBuffer)
			Else
				Return dx_GetIMEInputModeStr_x64(GetBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputStringColor2")> _
		Shared Function dx_SetKeyInputStringColor2_x86(TargetColor As Integer, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputStringColor2")> _
		Shared Function dx_SetKeyInputStringColor2_x64(TargetColor As Integer, Color As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputStringColor2(TargetColor As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringColor2_x86(TargetColor, Color)
			Else
				Return dx_SetKeyInputStringColor2_x64(TargetColor, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetKeyInputStringColor2")> _
		Shared Function dx_ResetKeyInputStringColor2_x86(TargetColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetKeyInputStringColor2")> _
		Shared Function dx_ResetKeyInputStringColor2_x64(TargetColor As Integer) As Integer
		End Function
		Public Shared Function ResetKeyInputStringColor2(TargetColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetKeyInputStringColor2_x86(TargetColor)
			Else
				Return dx_ResetKeyInputStringColor2_x64(TargetColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputStringFont")> _
		Shared Function dx_SetKeyInputStringFont_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputStringFont")> _
		Shared Function dx_SetKeyInputStringFont_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputStringFont(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringFont_x86(FontHandle)
			Else
				Return dx_SetKeyInputStringFont_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputStringEndCharaMode")> _
		Shared Function dx_SetKeyInputStringEndCharaMode_x86(EndCharaMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputStringEndCharaMode")> _
		Shared Function dx_SetKeyInputStringEndCharaMode_x64(EndCharaMode As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputStringEndCharaMode(EndCharaMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputStringEndCharaMode_x86(EndCharaMode)
			Else
				Return dx_SetKeyInputStringEndCharaMode_x64(EndCharaMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawKeyInputModeString")> _
		Shared Function dx_DrawKeyInputModeString_x86(x As Integer, y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawKeyInputModeString")> _
		Shared Function dx_DrawKeyInputModeString_x64(x As Integer, y As Integer) As Integer
		End Function
		Public Shared Function DrawKeyInputModeString(x As Integer, y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawKeyInputModeString_x86(x, y)
			Else
				Return dx_DrawKeyInputModeString_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitKeyInput")> _
		Shared Function dx_InitKeyInput_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitKeyInput")> _
		Shared Function dx_InitKeyInput_x64() As Integer
		End Function
		Public Shared Function InitKeyInput() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitKeyInput_x86()
			Else
				Return dx_InitKeyInput_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeKeyInput")> _
		Shared Function dx_MakeKeyInput_x86(MaxStrLength As Integer, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, NumCharOnlyFlag As Integer, DoubleCharOnlyFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeKeyInput")> _
		Shared Function dx_MakeKeyInput_x64(MaxStrLength As Integer, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, NumCharOnlyFlag As Integer, DoubleCharOnlyFlag As Integer) As Integer
		End Function
		Public Shared Function MakeKeyInput(MaxStrLength As Integer, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, NumCharOnlyFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeKeyInput_x86(MaxStrLength, CancelValidFlag, SingleCharOnlyFlag, NumCharOnlyFlag, [FALSE])
			Else
				Return dx_MakeKeyInput_x64(MaxStrLength, CancelValidFlag, SingleCharOnlyFlag, NumCharOnlyFlag, [FALSE])
			End If
		End Function
		Public Shared Function MakeKeyInput(MaxStrLength As Integer, CancelValidFlag As Integer, SingleCharOnlyFlag As Integer, NumCharOnlyFlag As Integer, DoubleCharOnlyFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeKeyInput_x86(MaxStrLength, CancelValidFlag, SingleCharOnlyFlag, NumCharOnlyFlag, DoubleCharOnlyFlag)
			Else
				Return dx_MakeKeyInput_x64(MaxStrLength, CancelValidFlag, SingleCharOnlyFlag, NumCharOnlyFlag, DoubleCharOnlyFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteKeyInput")> _
		Shared Function dx_DeleteKeyInput_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteKeyInput")> _
		Shared Function dx_DeleteKeyInput_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteKeyInput(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteKeyInput_x86(InputHandle)
			Else
				Return dx_DeleteKeyInput_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetActiveKeyInput")> _
		Shared Function dx_SetActiveKeyInput_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetActiveKeyInput")> _
		Shared Function dx_SetActiveKeyInput_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetActiveKeyInput(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetActiveKeyInput_x86(InputHandle)
			Else
				Return dx_SetActiveKeyInput_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetActiveKeyInput")> _
		Shared Function dx_GetActiveKeyInput_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetActiveKeyInput")> _
		Shared Function dx_GetActiveKeyInput_x64() As Integer
		End Function
		Public Shared Function GetActiveKeyInput() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetActiveKeyInput_x86()
			Else
				Return dx_GetActiveKeyInput_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckKeyInput")> _
		Shared Function dx_CheckKeyInput_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckKeyInput")> _
		Shared Function dx_CheckKeyInput_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function CheckKeyInput(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckKeyInput_x86(InputHandle)
			Else
				Return dx_CheckKeyInput_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReStartKeyInput")> _
		Shared Function dx_ReStartKeyInput_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReStartKeyInput")> _
		Shared Function dx_ReStartKeyInput_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function ReStartKeyInput(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReStartKeyInput_x86(InputHandle)
			Else
				Return dx_ReStartKeyInput_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ProcessActKeyInput")> _
		Shared Function dx_ProcessActKeyInput_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ProcessActKeyInput")> _
		Shared Function dx_ProcessActKeyInput_x64() As Integer
		End Function
		Public Shared Function ProcessActKeyInput() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessActKeyInput_x86()
			Else
				Return dx_ProcessActKeyInput_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawKeyInputString")> _
		Shared Function dx_DrawKeyInputString_x86(x As Integer, y As Integer, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawKeyInputString")> _
		Shared Function dx_DrawKeyInputString_x64(x As Integer, y As Integer, InputHandle As Integer) As Integer
		End Function
		Public Shared Function DrawKeyInputString(x As Integer, y As Integer, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawKeyInputString_x86(x, y, InputHandle)
			Else
				Return dx_DrawKeyInputString_x64(x, y, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputSelectArea")> _
		Shared Function dx_SetKeyInputSelectArea_x86(SelectStart As Integer, SelectEnd As Integer, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputSelectArea")> _
		Shared Function dx_SetKeyInputSelectArea_x64(SelectStart As Integer, SelectEnd As Integer, InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputSelectArea(SelectStart As Integer, SelectEnd As Integer, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputSelectArea_x86(SelectStart, SelectEnd, InputHandle)
			Else
				Return dx_SetKeyInputSelectArea_x64(SelectStart, SelectEnd, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetKeyInputSelectArea")> _
		Shared Function dx_GetKeyInputSelectArea_x86(ByRef SelectStart As Integer, ByRef SelectEnd As Integer, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetKeyInputSelectArea")> _
		Shared Function dx_GetKeyInputSelectArea_x64(ByRef SelectStart As Integer, ByRef SelectEnd As Integer, InputHandle As Integer) As Integer
		End Function
		Public Shared Function GetKeyInputSelectArea(ByRef SelectStart As Integer, ByRef SelectEnd As Integer, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetKeyInputSelectArea_x86(SelectStart, SelectEnd, InputHandle)
			Else
				Return dx_GetKeyInputSelectArea_x64(SelectStart, SelectEnd, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputDrawStartPos")> _
		Shared Function dx_SetKeyInputDrawStartPos_x86(DrawStartPos As Integer, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputDrawStartPos")> _
		Shared Function dx_SetKeyInputDrawStartPos_x64(DrawStartPos As Integer, InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputDrawStartPos(DrawStartPos As Integer, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputDrawStartPos_x86(DrawStartPos, InputHandle)
			Else
				Return dx_SetKeyInputDrawStartPos_x64(DrawStartPos, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetKeyInputDrawStartPos")> _
		Shared Function dx_GetKeyInputDrawStartPos_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetKeyInputDrawStartPos")> _
		Shared Function dx_GetKeyInputDrawStartPos_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function GetKeyInputDrawStartPos(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetKeyInputDrawStartPos_x86(InputHandle)
			Else
				Return dx_GetKeyInputDrawStartPos_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputCursorBrinkTime")> _
		Shared Function dx_SetKeyInputCursorBrinkTime_x86(Time As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputCursorBrinkTime")> _
		Shared Function dx_SetKeyInputCursorBrinkTime_x64(Time As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputCursorBrinkTime(Time As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputCursorBrinkTime_x86(Time)
			Else
				Return dx_SetKeyInputCursorBrinkTime_x64(Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputCursorBrinkFlag")> _
		Shared Function dx_SetKeyInputCursorBrinkFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputCursorBrinkFlag")> _
		Shared Function dx_SetKeyInputCursorBrinkFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputCursorBrinkFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputCursorBrinkFlag_x86(Flag)
			Else
				Return dx_SetKeyInputCursorBrinkFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputString")> _
		Shared Function dx_SetKeyInputString_x86([String] As String, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputString")> _
		Shared Function dx_SetKeyInputString_x64([String] As String, InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputString([String] As String, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputString_x86([String], InputHandle)
			Else
				Return dx_SetKeyInputString_x64([String], InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputNumber")> _
		Shared Function dx_SetKeyInputNumber_x86(Number As Integer, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputNumber")> _
		Shared Function dx_SetKeyInputNumber_x64(Number As Integer, InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputNumber(Number As Integer, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputNumber_x86(Number, InputHandle)
			Else
				Return dx_SetKeyInputNumber_x64(Number, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputNumberToFloat")> _
		Shared Function dx_SetKeyInputNumberToFloat_x86(Number As Single, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputNumberToFloat")> _
		Shared Function dx_SetKeyInputNumberToFloat_x64(Number As Single, InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputNumberToFloat(Number As Single, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputNumberToFloat_x86(Number, InputHandle)
			Else
				Return dx_SetKeyInputNumberToFloat_x64(Number, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetKeyInputString")> _
		Shared Function dx_GetKeyInputString_x86(StrBuffer As System.Text.StringBuilder, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetKeyInputString")> _
		Shared Function dx_GetKeyInputString_x64(StrBuffer As System.Text.StringBuilder, InputHandle As Integer) As Integer
		End Function
		Public Shared Function GetKeyInputString(StrBuffer As System.Text.StringBuilder, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetKeyInputString_x86(StrBuffer, InputHandle)
			Else
				Return dx_GetKeyInputString_x64(StrBuffer, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetKeyInputNumber")> _
		Shared Function dx_GetKeyInputNumber_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetKeyInputNumber")> _
		Shared Function dx_GetKeyInputNumber_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function GetKeyInputNumber(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetKeyInputNumber_x86(InputHandle)
			Else
				Return dx_GetKeyInputNumber_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetKeyInputNumberToFloat")> _
		Shared Function dx_GetKeyInputNumberToFloat_x86(InputHandle As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetKeyInputNumberToFloat")> _
		Shared Function dx_GetKeyInputNumberToFloat_x64(InputHandle As Integer) As Single
		End Function
		Public Shared Function GetKeyInputNumberToFloat(InputHandle As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetKeyInputNumberToFloat_x86(InputHandle)
			Else
				Return dx_GetKeyInputNumberToFloat_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyInputCursorPosition")> _
		Shared Function dx_SetKeyInputCursorPosition_x86(Position As Integer, InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyInputCursorPosition")> _
		Shared Function dx_SetKeyInputCursorPosition_x64(Position As Integer, InputHandle As Integer) As Integer
		End Function
		Public Shared Function SetKeyInputCursorPosition(Position As Integer, InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyInputCursorPosition_x86(Position, InputHandle)
			Else
				Return dx_SetKeyInputCursorPosition_x64(Position, InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetKeyInputCursorPosition")> _
		Shared Function dx_GetKeyInputCursorPosition_x86(InputHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetKeyInputCursorPosition")> _
		Shared Function dx_GetKeyInputCursorPosition_x64(InputHandle As Integer) As Integer
		End Function
		Public Shared Function GetKeyInputCursorPosition(InputHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetKeyInputCursorPosition_x86(InputHandle)
			Else
				Return dx_GetKeyInputCursorPosition_x64(InputHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_open")> _
		Shared Function dx_FileRead_open_x86(FilePath As String, ASync As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_open")> _
		Shared Function dx_FileRead_open_x64(FilePath As String, ASync As Integer) As Integer
		End Function
		Public Shared Function FileRead_open(FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_open_x86(FilePath, [FALSE])
			Else
				Return dx_FileRead_open_x64(FilePath, [FALSE])
			End If
		End Function
		Public Shared Function FileRead_open(FilePath As String, ASync As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_open_x86(FilePath, ASync)
			Else
				Return dx_FileRead_open_x64(FilePath, ASync)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_size")> _
		Shared Function dx_FileRead_size_x86(FilePath As String) As Long
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_size")> _
		Shared Function dx_FileRead_size_x64(FilePath As String) As Long
		End Function
		Public Shared Function FileRead_size(FilePath As String) As Long
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_size_x86(FilePath)
			Else
				Return dx_FileRead_size_x64(FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_close")> _
		Shared Function dx_FileRead_close_x86(FileHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_close")> _
		Shared Function dx_FileRead_close_x64(FileHandle As Integer) As Integer
		End Function
		Public Shared Function FileRead_close(FileHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_close_x86(FileHandle)
			Else
				Return dx_FileRead_close_x64(FileHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_tell")> _
		Shared Function dx_FileRead_tell_x86(FileHandle As Integer) As Long
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_tell")> _
		Shared Function dx_FileRead_tell_x64(FileHandle As Integer) As Long
		End Function
		Public Shared Function FileRead_tell(FileHandle As Integer) As Long
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_tell_x86(FileHandle)
			Else
				Return dx_FileRead_tell_x64(FileHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_seek")> _
		Shared Function dx_FileRead_seek_x86(FileHandle As Integer, Offset As Long, Origin As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_seek")> _
		Shared Function dx_FileRead_seek_x64(FileHandle As Integer, Offset As Long, Origin As Integer) As Integer
		End Function
		Public Shared Function FileRead_seek(FileHandle As Integer, Offset As Long, Origin As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_seek_x86(FileHandle, Offset, Origin)
			Else
				Return dx_FileRead_seek_x64(FileHandle, Offset, Origin)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_read")> _
		Shared Function dx_FileRead_read_x86(Buffer As System.Void*, ReadSize As Integer, FileHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_read")> _
		Shared Function dx_FileRead_read_x64(Buffer As System.Void*, ReadSize As Integer, FileHandle As Integer) As Integer
		End Function
		Public Shared Function FileRead_read(Buffer As System.Void*, ReadSize As Integer, FileHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_read_x86(Buffer, ReadSize, FileHandle)
			Else
				Return dx_FileRead_read_x64(Buffer, ReadSize, FileHandle)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_idle_chk")> _
		Shared Function dx_FileRead_idle_chk_x86(FileHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_idle_chk")> _
		Shared Function dx_FileRead_idle_chk_x64(FileHandle As Integer) As Integer
		End Function
		Public Shared Function FileRead_idle_chk(FileHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_idle_chk_x86(FileHandle)
			Else
				Return dx_FileRead_idle_chk_x64(FileHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_eof")> _
		Shared Function dx_FileRead_eof_x86(FileHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_eof")> _
		Shared Function dx_FileRead_eof_x64(FileHandle As Integer) As Integer
		End Function
		Public Shared Function FileRead_eof(FileHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_eof_x86(FileHandle)
			Else
				Return dx_FileRead_eof_x64(FileHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_gets")> _
		Shared Function dx_FileRead_gets_x86(Buffer As System.Text.StringBuilder, BufferSize As Integer, FileHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_gets")> _
		Shared Function dx_FileRead_gets_x64(Buffer As System.Text.StringBuilder, BufferSize As Integer, FileHandle As Integer) As Integer
		End Function
		Public Shared Function FileRead_gets(Buffer As System.Text.StringBuilder, BufferSize As Integer, FileHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_gets_x86(Buffer, BufferSize, FileHandle)
			Else
				Return dx_FileRead_gets_x64(Buffer, BufferSize, FileHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_createInfo")> _
		Shared Function dx_FileRead_createInfo_x86(ObjectPath As String) As UInteger
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_createInfo")> _
		Shared Function dx_FileRead_createInfo_x64(ObjectPath As String) As UInteger
		End Function
		Public Shared Function FileRead_createInfo(ObjectPath As String) As UInteger
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_createInfo_x86(ObjectPath)
			Else
				Return dx_FileRead_createInfo_x64(ObjectPath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_getInfoNum")> _
		Shared Function dx_FileRead_getInfoNum_x86(FileInfoHandle As UInteger) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_getInfoNum")> _
		Shared Function dx_FileRead_getInfoNum_x64(FileInfoHandle As UInteger) As Integer
		End Function
		Public Shared Function FileRead_getInfoNum(FileInfoHandle As UInteger) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_getInfoNum_x86(FileInfoHandle)
			Else
				Return dx_FileRead_getInfoNum_x64(FileInfoHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_deleteInfo")> _
		Shared Function dx_FileRead_deleteInfo_x86(FileInfoHandle As UInteger) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_deleteInfo")> _
		Shared Function dx_FileRead_deleteInfo_x64(FileInfoHandle As UInteger) As Integer
		End Function
		Public Shared Function FileRead_deleteInfo(FileInfoHandle As UInteger) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_deleteInfo_x86(FileInfoHandle)
			Else
				Return dx_FileRead_deleteInfo_x64(FileInfoHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_fullyLoad")> _
		Shared Function dx_FileRead_fullyLoad_x86(FilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_fullyLoad")> _
		Shared Function dx_FileRead_fullyLoad_x64(FilePath As String) As Integer
		End Function
		Public Shared Function FileRead_fullyLoad(FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_fullyLoad_x86(FilePath)
			Else
				Return dx_FileRead_fullyLoad_x64(FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_fullyLoad_delete")> _
		Shared Function dx_FileRead_fullyLoad_delete_x86(FLoadHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_fullyLoad_delete")> _
		Shared Function dx_FileRead_fullyLoad_delete_x64(FLoadHandle As Integer) As Integer
		End Function
		Public Shared Function FileRead_fullyLoad_delete(FLoadHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_fullyLoad_delete_x86(FLoadHandle)
			Else
				Return dx_FileRead_fullyLoad_delete_x64(FLoadHandle)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_fullyLoad_getImage")> _
		Shared Sub dx_FileRead_fullyLoad_getImage_x86(FLoadHandle As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_fullyLoad_getImage")> _
		Shared Sub dx_FileRead_fullyLoad_getImage_x64(FLoadHandle As Integer)
		End Sub
		Public Shared Sub FileRead_fullyLoad_getImage(FLoadHandle As Integer)
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_fullyLoad_getImage_x86(FLoadHandle)
			Else
				Return dx_FileRead_fullyLoad_getImage_x64(FLoadHandle)
			End If
		End Sub
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_FileRead_fullyLoad_getSize")> _
		Shared Function dx_FileRead_fullyLoad_getSize_x86(FLoadHandle As Integer) As Long
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FileRead_fullyLoad_getSize")> _
		Shared Function dx_FileRead_fullyLoad_getSize_x64(FLoadHandle As Integer) As Long
		End Function
		Public Shared Function FileRead_fullyLoad_getSize(FLoadHandle As Integer) As Long
			If System.IntPtr.Size = 4 Then
				Return dx_FileRead_fullyLoad_getSize_x86(FLoadHandle)
			Else
				Return dx_FileRead_fullyLoad_getSize_x64(FLoadHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStreamFunctionDefault")> _
		Shared Function dx_GetStreamFunctionDefault_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStreamFunctionDefault")> _
		Shared Function dx_GetStreamFunctionDefault_x64() As Integer
		End Function
		Public Shared Function GetStreamFunctionDefault() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStreamFunctionDefault_x86()
			Else
				Return dx_GetStreamFunctionDefault_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvertFullPath")> _
		Shared Function dx_ConvertFullPath_x86(Src As String, Dest As System.Text.StringBuilder, CurrentDir As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvertFullPath")> _
		Shared Function dx_ConvertFullPath_x64(Src As String, Dest As System.Text.StringBuilder, CurrentDir As String) As Integer
		End Function
		Public Shared Function ConvertFullPath(Src As String, Dest As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConvertFullPath_x86(Src, Dest, Nothing)
			Else
				Return dx_ConvertFullPath_x64(Src, Dest, Nothing)
			End If
		End Function
		Public Shared Function ConvertFullPath(Src As String, Dest As System.Text.StringBuilder, CurrentDir As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConvertFullPath_x86(Src, Dest, CurrentDir)
			Else
				Return dx_ConvertFullPath_x64(Src, Dest, CurrentDir)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckHitKey")> _
		Shared Function dx_CheckHitKey_x86(KeyCode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckHitKey")> _
		Shared Function dx_CheckHitKey_x64(KeyCode As Integer) As Integer
		End Function
		Public Shared Function CheckHitKey(KeyCode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckHitKey_x86(KeyCode)
			Else
				Return dx_CheckHitKey_x64(KeyCode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckHitKeyAll")> _
		Shared Function dx_CheckHitKeyAll_x86(CheckType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckHitKeyAll")> _
		Shared Function dx_CheckHitKeyAll_x64(CheckType As Integer) As Integer
		End Function
		Public Shared Function CheckHitKeyAll() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckHitKeyAll_x86(DX_CHECKINPUT_ALL)
			Else
				Return dx_CheckHitKeyAll_x64(DX_CHECKINPUT_ALL)
			End If
		End Function
		Public Shared Function CheckHitKeyAll(CheckType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckHitKeyAll_x86(CheckType)
			Else
				Return dx_CheckHitKeyAll_x64(CheckType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetHitKeyStateAll")> _
		Shared Function dx_GetHitKeyStateAll_x86(ByRef KeyStateBuf As Byte) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetHitKeyStateAll")> _
		Shared Function dx_GetHitKeyStateAll_x64(ByRef KeyStateBuf As Byte) As Integer
		End Function
		Public Shared Function GetHitKeyStateAll(ByRef KeyStateBuf As Byte) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetHitKeyStateAll_x86(KeyStateBuf)
			Else
				Return dx_GetHitKeyStateAll_x64(KeyStateBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyExclusiveCooperativeLevelFlag")> _
		Shared Function dx_SetKeyExclusiveCooperativeLevelFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyExclusiveCooperativeLevelFlag")> _
		Shared Function dx_SetKeyExclusiveCooperativeLevelFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetKeyExclusiveCooperativeLevelFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyExclusiveCooperativeLevelFlag_x86(Flag)
			Else
				Return dx_SetKeyExclusiveCooperativeLevelFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadNum")> _
		Shared Function dx_GetJoypadNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadNum")> _
		Shared Function dx_GetJoypadNum_x64() As Integer
		End Function
		Public Shared Function GetJoypadNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadNum_x86()
			Else
				Return dx_GetJoypadNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadInputState")> _
		Shared Function dx_GetJoypadInputState_x86(InputType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadInputState")> _
		Shared Function dx_GetJoypadInputState_x64(InputType As Integer) As Integer
		End Function
		Public Shared Function GetJoypadInputState(InputType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadInputState_x86(InputType)
			Else
				Return dx_GetJoypadInputState_x64(InputType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadAnalogInput")> _
		Shared Function dx_GetJoypadAnalogInput_x86(ByRef XBuf As Integer, ByRef YBuf As Integer, InputType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadAnalogInput")> _
		Shared Function dx_GetJoypadAnalogInput_x64(ByRef XBuf As Integer, ByRef YBuf As Integer, InputType As Integer) As Integer
		End Function
		Public Shared Function GetJoypadAnalogInput(ByRef XBuf As Integer, ByRef YBuf As Integer, InputType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadAnalogInput_x86(XBuf, YBuf, InputType)
			Else
				Return dx_GetJoypadAnalogInput_x64(XBuf, YBuf, InputType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadAnalogInputRight")> _
		Shared Function dx_GetJoypadAnalogInputRight_x86(ByRef XBuf As Integer, ByRef YBuf As Integer, InputType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadAnalogInputRight")> _
		Shared Function dx_GetJoypadAnalogInputRight_x64(ByRef XBuf As Integer, ByRef YBuf As Integer, InputType As Integer) As Integer
		End Function
		Public Shared Function GetJoypadAnalogInputRight(ByRef XBuf As Integer, ByRef YBuf As Integer, InputType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadAnalogInputRight_x86(XBuf, YBuf, InputType)
			Else
				Return dx_GetJoypadAnalogInputRight_x64(XBuf, YBuf, InputType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadDirectInputState")> _
		Shared Function dx_GetJoypadDirectInputState_x86(InputType As Integer, ByRef DInputState As DINPUT_JOYSTATE) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadDirectInputState")> _
		Shared Function dx_GetJoypadDirectInputState_x64(InputType As Integer, ByRef DInputState As DINPUT_JOYSTATE) As Integer
		End Function
		Public Shared Function GetJoypadDirectInputState(InputType As Integer, ByRef DInputState As DINPUT_JOYSTATE) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadDirectInputState_x86(InputType, DInputState)
			Else
				Return dx_GetJoypadDirectInputState_x64(InputType, DInputState)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckJoypadXInput")> _
		Shared Function dx_CheckJoypadXInput_x86(InputType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckJoypadXInput")> _
		Shared Function dx_CheckJoypadXInput_x64(InputType As Integer) As Integer
		End Function
		Public Shared Function CheckJoypadXInput(InputType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckJoypadXInput_x86(InputType)
			Else
				Return dx_CheckJoypadXInput_x64(InputType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadXInputState")> _
		Shared Function dx_GetJoypadXInputState_x86(InputType As Integer, ByRef XInputState As XINPUT_STATE) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadXInputState")> _
		Shared Function dx_GetJoypadXInputState_x64(InputType As Integer, ByRef XInputState As XINPUT_STATE) As Integer
		End Function
		Public Shared Function GetJoypadXInputState(InputType As Integer, ByRef XInputState As XINPUT_STATE) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadXInputState_x86(InputType, XInputState)
			Else
				Return dx_GetJoypadXInputState_x64(InputType, XInputState)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_KeyboradBufferProcess")> _
		Shared Function dx_KeyboradBufferProcess_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_KeyboradBufferProcess")> _
		Shared Function dx_KeyboradBufferProcess_x64() As Integer
		End Function
		Public Shared Function KeyboradBufferProcess() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_KeyboradBufferProcess_x86()
			Else
				Return dx_KeyboradBufferProcess_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvertKeyCodeToVirtualKey")> _
		Shared Function dx_ConvertKeyCodeToVirtualKey_x86(KeyCode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvertKeyCodeToVirtualKey")> _
		Shared Function dx_ConvertKeyCodeToVirtualKey_x64(KeyCode As Integer) As Integer
		End Function
		Public Shared Function ConvertKeyCodeToVirtualKey(KeyCode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConvertKeyCodeToVirtualKey_x86(KeyCode)
			Else
				Return dx_ConvertKeyCodeToVirtualKey_x64(KeyCode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvertVirtualKeyToKeyCode")> _
		Shared Function dx_ConvertVirtualKeyToKeyCode_x86(VirtualKey As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvertVirtualKeyToKeyCode")> _
		Shared Function dx_ConvertVirtualKeyToKeyCode_x64(VirtualKey As Integer) As Integer
		End Function
		Public Shared Function ConvertVirtualKeyToKeyCode(VirtualKey As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConvertVirtualKeyToKeyCode_x86(VirtualKey)
			Else
				Return dx_ConvertVirtualKeyToKeyCode_x64(VirtualKey)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetJoypadInputToKeyInput")> _
		Shared Function dx_SetJoypadInputToKeyInput_x86(InputType As Integer, PadInput As Integer, KeyInput1 As Integer, KeyInput2 As Integer, KeyInput3 As Integer, KeyInput4 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetJoypadInputToKeyInput")> _
		Shared Function dx_SetJoypadInputToKeyInput_x64(InputType As Integer, PadInput As Integer, KeyInput1 As Integer, KeyInput2 As Integer, KeyInput3 As Integer, KeyInput4 As Integer) As Integer
		End Function
		Public Shared Function SetJoypadInputToKeyInput(InputType As Integer, PadInput As Integer, KeyInput1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetJoypadInputToKeyInput_x86(InputType, PadInput, KeyInput1, -1, -1, -1)
			Else
				Return dx_SetJoypadInputToKeyInput_x64(InputType, PadInput, KeyInput1, -1, -1, -1)
			End If
		End Function
		Public Shared Function SetJoypadInputToKeyInput(InputType As Integer, PadInput As Integer, KeyInput1 As Integer, KeyInput2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetJoypadInputToKeyInput_x86(InputType, PadInput, KeyInput1, KeyInput2, -1, -1)
			Else
				Return dx_SetJoypadInputToKeyInput_x64(InputType, PadInput, KeyInput1, KeyInput2, -1, -1)
			End If
		End Function
		Public Shared Function SetJoypadInputToKeyInput(InputType As Integer, PadInput As Integer, KeyInput1 As Integer, KeyInput2 As Integer, KeyInput3 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetJoypadInputToKeyInput_x86(InputType, PadInput, KeyInput1, KeyInput2, KeyInput3, -1)
			Else
				Return dx_SetJoypadInputToKeyInput_x64(InputType, PadInput, KeyInput1, KeyInput2, KeyInput3, -1)
			End If
		End Function
		Public Shared Function SetJoypadInputToKeyInput(InputType As Integer, PadInput As Integer, KeyInput1 As Integer, KeyInput2 As Integer, KeyInput3 As Integer, KeyInput4 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetJoypadInputToKeyInput_x86(InputType, PadInput, KeyInput1, KeyInput2, KeyInput3, KeyInput4)
			Else
				Return dx_SetJoypadInputToKeyInput_x64(InputType, PadInput, KeyInput1, KeyInput2, KeyInput3, KeyInput4)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetJoypadDeadZone")> _
		Shared Function dx_SetJoypadDeadZone_x86(InputType As Integer, Zone As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetJoypadDeadZone")> _
		Shared Function dx_SetJoypadDeadZone_x64(InputType As Integer, Zone As Double) As Integer
		End Function
		Public Shared Function SetJoypadDeadZone(InputType As Integer, Zone As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetJoypadDeadZone_x86(InputType, Zone)
			Else
				Return dx_SetJoypadDeadZone_x64(InputType, Zone)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StartJoypadVibration")> _
		Shared Function dx_StartJoypadVibration_x86(InputType As Integer, Power As Integer, Time As Integer, EffectIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StartJoypadVibration")> _
		Shared Function dx_StartJoypadVibration_x64(InputType As Integer, Power As Integer, Time As Integer, EffectIndex As Integer) As Integer
		End Function
		Public Shared Function StartJoypadVibration(InputType As Integer, Power As Integer, Time As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StartJoypadVibration_x86(InputType, Power, Time, -1)
			Else
				Return dx_StartJoypadVibration_x64(InputType, Power, Time, -1)
			End If
		End Function
		Public Shared Function StartJoypadVibration(InputType As Integer, Power As Integer, Time As Integer, EffectIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StartJoypadVibration_x86(InputType, Power, Time, EffectIndex)
			Else
				Return dx_StartJoypadVibration_x64(InputType, Power, Time, EffectIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopJoypadVibration")> _
		Shared Function dx_StopJoypadVibration_x86(InputType As Integer, EffectIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopJoypadVibration")> _
		Shared Function dx_StopJoypadVibration_x64(InputType As Integer, EffectIndex As Integer) As Integer
		End Function
		Public Shared Function StopJoypadVibration(InputType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopJoypadVibration_x86(InputType, -1)
			Else
				Return dx_StopJoypadVibration_x64(InputType, -1)
			End If
		End Function
		Public Shared Function StopJoypadVibration(InputType As Integer, EffectIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopJoypadVibration_x86(InputType, EffectIndex)
			Else
				Return dx_StopJoypadVibration_x64(InputType, EffectIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadPOVState")> _
		Shared Function dx_GetJoypadPOVState_x86(InputType As Integer, POVNumber As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadPOVState")> _
		Shared Function dx_GetJoypadPOVState_x64(InputType As Integer, POVNumber As Integer) As Integer
		End Function
		Public Shared Function GetJoypadPOVState(InputType As Integer, POVNumber As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadPOVState_x86(InputType, POVNumber)
			Else
				Return dx_GetJoypadPOVState_x64(InputType, POVNumber)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetJoypadName")> _
		Shared Function dx_GetJoypadName_x86(InputType As Integer, InstanceNameBuffer As System.Text.StringBuilder, ProductNameBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetJoypadName")> _
		Shared Function dx_GetJoypadName_x64(InputType As Integer, InstanceNameBuffer As System.Text.StringBuilder, ProductNameBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetJoypadName(InputType As Integer, InstanceNameBuffer As System.Text.StringBuilder, ProductNameBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetJoypadName_x86(InputType, InstanceNameBuffer, ProductNameBuffer)
			Else
				Return dx_GetJoypadName_x64(InputType, InstanceNameBuffer, ProductNameBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReSetupJoypad")> _
		Shared Function dx_ReSetupJoypad_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReSetupJoypad")> _
		Shared Function dx_ReSetupJoypad_x64() As Integer
		End Function
		Public Shared Function ReSetupJoypad() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReSetupJoypad_x86()
			Else
				Return dx_ReSetupJoypad_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetKeyboardNotDirectInputFlag")> _
		Shared Function dx_SetKeyboardNotDirectInputFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetKeyboardNotDirectInputFlag")> _
		Shared Function dx_SetKeyboardNotDirectInputFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetKeyboardNotDirectInputFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetKeyboardNotDirectInputFlag_x86(Flag)
			Else
				Return dx_SetKeyboardNotDirectInputFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDirectInputFlag")> _
		Shared Function dx_SetUseDirectInputFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDirectInputFlag")> _
		Shared Function dx_SetUseDirectInputFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDirectInputFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDirectInputFlag_x86(Flag)
			Else
				Return dx_SetUseDirectInputFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseXInputFlag")> _
		Shared Function dx_SetUseXInputFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseXInputFlag")> _
		Shared Function dx_SetUseXInputFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseXInputFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseXInputFlag_x86(Flag)
			Else
				Return dx_SetUseXInputFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseJoypadVibrationFlag")> _
		Shared Function dx_SetUseJoypadVibrationFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseJoypadVibrationFlag")> _
		Shared Function dx_SetUseJoypadVibrationFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseJoypadVibrationFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseJoypadVibrationFlag_x86(Flag)
			Else
				Return dx_SetUseJoypadVibrationFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeGraph")> _
		Shared Function dx_MakeGraph_x86(SizeX As Integer, SizeY As Integer, NotUse3DFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeGraph")> _
		Shared Function dx_MakeGraph_x64(SizeX As Integer, SizeY As Integer, NotUse3DFlag As Integer) As Integer
		End Function
		Public Shared Function MakeGraph(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeGraph_x86(SizeX, SizeY, [FALSE])
			Else
				Return dx_MakeGraph_x64(SizeX, SizeY, [FALSE])
			End If
		End Function
		Public Shared Function MakeGraph(SizeX As Integer, SizeY As Integer, NotUse3DFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeGraph_x86(SizeX, SizeY, NotUse3DFlag)
			Else
				Return dx_MakeGraph_x64(SizeX, SizeY, NotUse3DFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeScreen")> _
		Shared Function dx_MakeScreen_x86(SizeX As Integer, SizeY As Integer, UseAlphaChannel As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeScreen")> _
		Shared Function dx_MakeScreen_x64(SizeX As Integer, SizeY As Integer, UseAlphaChannel As Integer) As Integer
		End Function
		Public Shared Function MakeScreen(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeScreen_x86(SizeX, SizeY, [FALSE])
			Else
				Return dx_MakeScreen_x64(SizeX, SizeY, [FALSE])
			End If
		End Function
		Public Shared Function MakeScreen(SizeX As Integer, SizeY As Integer, UseAlphaChannel As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeScreen_x86(SizeX, SizeY, UseAlphaChannel)
			Else
				Return dx_MakeScreen_x64(SizeX, SizeY, UseAlphaChannel)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DerivationGraph")> _
		Shared Function dx_DerivationGraph_x86(SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, SrcGraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DerivationGraph")> _
		Shared Function dx_DerivationGraph_x64(SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, SrcGraphHandle As Integer) As Integer
		End Function
		Public Shared Function DerivationGraph(SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, SrcGraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DerivationGraph_x86(SrcX, SrcY, Width, Height, SrcGraphHandle)
			Else
				Return dx_DerivationGraph_x64(SrcX, SrcY, Width, Height, SrcGraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteGraph")> _
		Shared Function dx_DeleteGraph_x86(GrHandle As Integer, LogOutFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteGraph")> _
		Shared Function dx_DeleteGraph_x64(GrHandle As Integer, LogOutFlag As Integer) As Integer
		End Function
		Public Shared Function DeleteGraph(GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteGraph_x86(GrHandle, [FALSE])
			Else
				Return dx_DeleteGraph_x64(GrHandle, [FALSE])
			End If
		End Function
		Public Shared Function DeleteGraph(GrHandle As Integer, LogOutFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteGraph_x86(GrHandle, LogOutFlag)
			Else
				Return dx_DeleteGraph_x64(GrHandle, LogOutFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteSharingGraph")> _
		Shared Function dx_DeleteSharingGraph_x86(GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteSharingGraph")> _
		Shared Function dx_DeleteSharingGraph_x64(GrHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteSharingGraph(GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteSharingGraph_x86(GrHandle)
			Else
				Return dx_DeleteSharingGraph_x64(GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphNum")> _
		Shared Function dx_GetGraphNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphNum")> _
		Shared Function dx_GetGraphNum_x64() As Integer
		End Function
		Public Shared Function GetGraphNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphNum_x86()
			Else
				Return dx_GetGraphNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FillGraph")> _
		Shared Function dx_FillGraph_x86(GrHandle As Integer, Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FillGraph")> _
		Shared Function dx_FillGraph_x64(GrHandle As Integer, Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As Integer
		End Function
		Public Shared Function FillGraph(GrHandle As Integer, Red As Integer, Green As Integer, Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FillGraph_x86(GrHandle, Red, Green, Blue, 255)
			Else
				Return dx_FillGraph_x64(GrHandle, Red, Green, Blue, 255)
			End If
		End Function
		Public Shared Function FillGraph(GrHandle As Integer, Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FillGraph_x86(GrHandle, Red, Green, Blue, Alpha)
			Else
				Return dx_FillGraph_x64(GrHandle, Red, Green, Blue, Alpha)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGraphLostFlag")> _
		Shared Function dx_SetGraphLostFlag_x86(GrHandle As Integer, ByRef LostFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGraphLostFlag")> _
		Shared Function dx_SetGraphLostFlag_x64(GrHandle As Integer, ByRef LostFlag As Integer) As Integer
		End Function
		Public Shared Function SetGraphLostFlag(GrHandle As Integer, ByRef LostFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphLostFlag_x86(GrHandle, LostFlag)
			Else
				Return dx_SetGraphLostFlag_x64(GrHandle, LostFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitGraph")> _
		Shared Function dx_InitGraph_x86(LogOutFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitGraph")> _
		Shared Function dx_InitGraph_x64(LogOutFlag As Integer) As Integer
		End Function
		Public Shared Function InitGraph() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitGraph_x86([FALSE])
			Else
				Return dx_InitGraph_x64([FALSE])
			End If
		End Function
		Public Shared Function InitGraph(LogOutFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitGraph_x86(LogOutFlag)
			Else
				Return dx_InitGraph_x64(LogOutFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReloadFileGraphAll")> _
		Shared Function dx_ReloadFileGraphAll_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReloadFileGraphAll")> _
		Shared Function dx_ReloadFileGraphAll_x64() As Integer
		End Function
		Public Shared Function ReloadFileGraphAll() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadFileGraphAll_x86()
			Else
				Return dx_ReloadFileGraphAll_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeShadowMap")> _
		Shared Function dx_MakeShadowMap_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeShadowMap")> _
		Shared Function dx_MakeShadowMap_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakeShadowMap(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeShadowMap_x86(SizeX, SizeY)
			Else
				Return dx_MakeShadowMap_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteShadowMap")> _
		Shared Function dx_DeleteShadowMap_x86(SmHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteShadowMap")> _
		Shared Function dx_DeleteShadowMap_x64(SmHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteShadowMap(SmHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteShadowMap_x86(SmHandle)
			Else
				Return dx_DeleteShadowMap_x64(SmHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetShadowMapLightDirection")> _
		Shared Function dx_SetShadowMapLightDirection_x86(SmHandle As Integer, Direction As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetShadowMapLightDirection")> _
		Shared Function dx_SetShadowMapLightDirection_x64(SmHandle As Integer, Direction As VECTOR) As Integer
		End Function
		Public Shared Function SetShadowMapLightDirection(SmHandle As Integer, Direction As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetShadowMapLightDirection_x86(SmHandle, Direction)
			Else
				Return dx_SetShadowMapLightDirection_x64(SmHandle, Direction)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ShadowMap_DrawSetup")> _
		Shared Function dx_ShadowMap_DrawSetup_x86(SmHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ShadowMap_DrawSetup")> _
		Shared Function dx_ShadowMap_DrawSetup_x64(SmHandle As Integer) As Integer
		End Function
		Public Shared Function ShadowMap_DrawSetup(SmHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ShadowMap_DrawSetup_x86(SmHandle)
			Else
				Return dx_ShadowMap_DrawSetup_x64(SmHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ShadowMap_DrawEnd")> _
		Shared Function dx_ShadowMap_DrawEnd_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ShadowMap_DrawEnd")> _
		Shared Function dx_ShadowMap_DrawEnd_x64() As Integer
		End Function
		Public Shared Function ShadowMap_DrawEnd() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ShadowMap_DrawEnd_x86()
			Else
				Return dx_ShadowMap_DrawEnd_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseShadowMap")> _
		Shared Function dx_SetUseShadowMap_x86(SmSlotIndex As Integer, SmHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseShadowMap")> _
		Shared Function dx_SetUseShadowMap_x64(SmSlotIndex As Integer, SmHandle As Integer) As Integer
		End Function
		Public Shared Function SetUseShadowMap(SmSlotIndex As Integer, SmHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseShadowMap_x86(SmSlotIndex, SmHandle)
			Else
				Return dx_SetUseShadowMap_x64(SmSlotIndex, SmHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetShadowMapDrawArea")> _
		Shared Function dx_SetShadowMapDrawArea_x86(SmHandle As Integer, MinPosition As VECTOR, MaxPosition As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetShadowMapDrawArea")> _
		Shared Function dx_SetShadowMapDrawArea_x64(SmHandle As Integer, MinPosition As VECTOR, MaxPosition As VECTOR) As Integer
		End Function
		Public Shared Function SetShadowMapDrawArea(SmHandle As Integer, MinPosition As VECTOR, MaxPosition As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetShadowMapDrawArea_x86(SmHandle, MinPosition, MaxPosition)
			Else
				Return dx_SetShadowMapDrawArea_x64(SmHandle, MinPosition, MaxPosition)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetShadowMapDrawArea")> _
		Shared Function dx_ResetShadowMapDrawArea_x86(SmHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetShadowMapDrawArea")> _
		Shared Function dx_ResetShadowMapDrawArea_x64(SmHandle As Integer) As Integer
		End Function
		Public Shared Function ResetShadowMapDrawArea(SmHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetShadowMapDrawArea_x86(SmHandle)
			Else
				Return dx_ResetShadowMapDrawArea_x64(SmHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetShadowMapAdjustDepth")> _
		Shared Function dx_SetShadowMapAdjustDepth_x86(SmHandle As Integer, Depth As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetShadowMapAdjustDepth")> _
		Shared Function dx_SetShadowMapAdjustDepth_x64(SmHandle As Integer, Depth As Single) As Integer
		End Function
		Public Shared Function SetShadowMapAdjustDepth(SmHandle As Integer, Depth As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetShadowMapAdjustDepth_x86(SmHandle, Depth)
			Else
				Return dx_SetShadowMapAdjustDepth_x64(SmHandle, Depth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_TestDrawShadowMap")> _
		Shared Function dx_TestDrawShadowMap_x86(SmHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_TestDrawShadowMap")> _
		Shared Function dx_TestDrawShadowMap_x64(SmHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		Public Shared Function TestDrawShadowMap(SmHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_TestDrawShadowMap_x86(SmHandle, x1, y1, x2, y2)
			Else
				Return dx_TestDrawShadowMap_x64(SmHandle, x1, y1, x2, y2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadBmpToGraph")> _
		Shared Function dx_LoadBmpToGraph_x86(FileName As String, TextureFlag As Integer, ReverseFlag As Integer, SurfaceMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadBmpToGraph")> _
		Shared Function dx_LoadBmpToGraph_x64(FileName As String, TextureFlag As Integer, ReverseFlag As Integer, SurfaceMode As Integer) As Integer
		End Function
		Public Shared Function LoadBmpToGraph(FileName As String, TextureFlag As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadBmpToGraph_x86(FileName, TextureFlag, ReverseFlag, DX_MOVIESURFACE_NORMAL)
			Else
				Return dx_LoadBmpToGraph_x64(FileName, TextureFlag, ReverseFlag, DX_MOVIESURFACE_NORMAL)
			End If
		End Function
		Public Shared Function LoadBmpToGraph(FileName As String, TextureFlag As Integer, ReverseFlag As Integer, SurfaceMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadBmpToGraph_x86(FileName, TextureFlag, ReverseFlag, SurfaceMode)
			Else
				Return dx_LoadBmpToGraph_x64(FileName, TextureFlag, ReverseFlag, SurfaceMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadGraph")> _
		Shared Function dx_LoadGraph_x86(FileName As String, NotUse3DFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadGraph")> _
		Shared Function dx_LoadGraph_x64(FileName As String, NotUse3DFlag As Integer) As Integer
		End Function
		Public Shared Function LoadGraph(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadGraph_x86(FileName, [FALSE])
			Else
				Return dx_LoadGraph_x64(FileName, [FALSE])
			End If
		End Function
		Public Shared Function LoadGraph(FileName As String, NotUse3DFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadGraph_x86(FileName, NotUse3DFlag)
			Else
				Return dx_LoadGraph_x64(FileName, NotUse3DFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadReverseGraph")> _
		Shared Function dx_LoadReverseGraph_x86(FileName As String, NotUse3DFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadReverseGraph")> _
		Shared Function dx_LoadReverseGraph_x64(FileName As String, NotUse3DFlag As Integer) As Integer
		End Function
		Public Shared Function LoadReverseGraph(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadReverseGraph_x86(FileName, [FALSE])
			Else
				Return dx_LoadReverseGraph_x64(FileName, [FALSE])
			End If
		End Function
		Public Shared Function LoadReverseGraph(FileName As String, NotUse3DFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadReverseGraph_x86(FileName, NotUse3DFlag)
			Else
				Return dx_LoadReverseGraph_x64(FileName, NotUse3DFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadDivGraph")> _
		Shared Function dx_LoadDivGraph_x86(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, NotUse3DFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadDivGraph")> _
		Shared Function dx_LoadDivGraph_x64(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, NotUse3DFlag As Integer) As Integer
		End Function
		Public Shared Function LoadDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, [FALSE])
			Else
				Return dx_LoadDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, [FALSE])
			End If
		End Function
		Public Shared Function LoadDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, NotUse3DFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, NotUse3DFlag)
			Else
				Return dx_LoadDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, NotUse3DFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadDivBmpToGraph")> _
		Shared Function dx_LoadDivBmpToGraph_x86(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, SizeY As Integer, _
			ByRef HandleBuf As Integer, TextureFlag As Integer, ReverseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadDivBmpToGraph")> _
		Shared Function dx_LoadDivBmpToGraph_x64(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, SizeY As Integer, _
			ByRef HandleBuf As Integer, TextureFlag As Integer, ReverseFlag As Integer) As Integer
		End Function
		Public Shared Function LoadDivBmpToGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, SizeY As Integer, _
			ByRef HandleBuf As Integer, TextureFlag As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadDivBmpToGraph_x86(FileName, AllNum, XNum, YNum, SizeX, SizeY, _
					HandleBuf, TextureFlag, ReverseFlag)
			Else
				Return dx_LoadDivBmpToGraph_x64(FileName, AllNum, XNum, YNum, SizeX, SizeY, _
					HandleBuf, TextureFlag, ReverseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadReverseDivGraph")> _
		Shared Function dx_LoadReverseDivGraph_x86(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, NotUse3DFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadReverseDivGraph")> _
		Shared Function dx_LoadReverseDivGraph_x64(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, NotUse3DFlag As Integer) As Integer
		End Function
		Public Shared Function LoadReverseDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadReverseDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, [FALSE])
			Else
				Return dx_LoadReverseDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, [FALSE])
			End If
		End Function
		Public Shared Function LoadReverseDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, NotUse3DFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadReverseDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, NotUse3DFlag)
			Else
				Return dx_LoadReverseDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, NotUse3DFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadBlendGraph")> _
		Shared Function dx_LoadBlendGraph_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadBlendGraph")> _
		Shared Function dx_LoadBlendGraph_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadBlendGraph(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadBlendGraph_x86(FileName)
			Else
				Return dx_LoadBlendGraph_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadDivGraphToResource")> _
		Shared Function dx_LoadDivGraphToResource_x86(ResourceID As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadDivGraphToResource")> _
		Shared Function dx_LoadDivGraphToResource_x64(ResourceID As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		Public Shared Function LoadDivGraphToResource(ResourceID As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadDivGraphToResource_x86(ResourceID, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf)
			Else
				Return dx_LoadDivGraphToResource_x64(ResourceID, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadDivGraphToResource_2")> _
		Shared Function dx_LoadDivGraphToResource_2_x86(ResourceName As String, ResourceType As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, _
			YSize As Integer, ByRef HandleBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadDivGraphToResource_2")> _
		Shared Function dx_LoadDivGraphToResource_2_x64(ResourceName As String, ResourceType As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, _
			YSize As Integer, ByRef HandleBuf As Integer) As Integer
		End Function
		Public Shared Function LoadDivGraphToResource(ResourceName As String, ResourceType As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, _
			YSize As Integer, ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadDivGraphToResource_2_x86(ResourceName, ResourceType, AllNum, XNum, YNum, XSize, _
					YSize, HandleBuf)
			Else
				Return dx_LoadDivGraphToResource_2_x64(ResourceName, ResourceType, AllNum, XNum, YNum, XSize, _
					YSize, HandleBuf)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateGraphFromMem")> _
		Shared Function dx_CreateGraphFromMem_x86(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer, ReverseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateGraphFromMem")> _
		Shared Function dx_CreateGraphFromMem_x64(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer, ReverseFlag As Integer) As Integer
		End Function
		Public Shared Function CreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, Nothing, 0, [TRUE], [FALSE])
			Else
				Return dx_CreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, Nothing, 0, [TRUE], [FALSE])
			End If
		End Function
		Public Shared Function CreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AlphaFileImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AlphaFileImage, 0, [TRUE], [FALSE])
			Else
				Return dx_CreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AlphaFileImage, 0, [TRUE], [FALSE])
			End If
		End Function
		Public Shared Function CreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AlphaFileImage, AlphaFileImageSize, [TRUE], [FALSE])
			Else
				Return dx_CreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AlphaFileImage, AlphaFileImageSize, [TRUE], [FALSE])
			End If
		End Function
		Public Shared Function CreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AlphaFileImage, AlphaFileImageSize, TextureFlag, [FALSE])
			Else
				Return dx_CreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AlphaFileImage, AlphaFileImageSize, TextureFlag, [FALSE])
			End If
		End Function
		Public Shared Function CreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AlphaFileImage, AlphaFileImageSize, TextureFlag, ReverseFlag)
			Else
				Return dx_CreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AlphaFileImage, AlphaFileImageSize, TextureFlag, ReverseFlag)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_ReCreateGraphFromMem")> _
		Shared Function dx_ReCreateGraphFromMem_x86(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer, _
			ReverseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReCreateGraphFromMem")> _
		Shared Function dx_ReCreateGraphFromMem_x64(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer, _
			ReverseFlag As Integer) As Integer
		End Function
		Public Shared Function ReCreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, GrHandle, Nothing, 0, [TRUE], _
					[FALSE])
			Else
				Return dx_ReCreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, GrHandle, Nothing, 0, [TRUE], _
					[FALSE])
			End If
		End Function
		Public Shared Function ReCreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer, AlphaFileImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, 0, [TRUE], _
					[FALSE])
			Else
				Return dx_ReCreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, 0, [TRUE], _
					[FALSE])
			End If
		End Function
		Public Shared Function ReCreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, AlphaFileImageSize, [TRUE], _
					[FALSE])
			Else
				Return dx_ReCreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, AlphaFileImageSize, [TRUE], _
					[FALSE])
			End If
		End Function
		Public Shared Function ReCreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, AlphaFileImageSize, TextureFlag, _
					[FALSE])
			Else
				Return dx_ReCreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, AlphaFileImageSize, TextureFlag, _
					[FALSE])
			End If
		End Function
		Public Shared Function ReCreateGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, GrHandle As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer, TextureFlag As Integer, _
			ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromMem_x86(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, AlphaFileImageSize, TextureFlag, _
					ReverseFlag)
			Else
				Return dx_ReCreateGraphFromMem_x64(RGBFileImage, RGBFileImageSize, GrHandle, AlphaFileImage, AlphaFileImageSize, TextureFlag, _
					ReverseFlag)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateDivGraphFromMem")> _
		Shared Function dx_CreateDivGraphFromMem_x86(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateDivGraphFromMem")> _
		Shared Function dx_CreateDivGraphFromMem_x64(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
		End Function
		Public Shared Function CreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, [TRUE], [FALSE], Nothing, 0)
			Else
				Return dx_CreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, [TRUE], [FALSE], Nothing, 0)
			End If
		End Function
		Public Shared Function CreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, [FALSE], Nothing, 0)
			Else
				Return dx_CreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, [FALSE], Nothing, 0)
			End If
		End Function
		Public Shared Function CreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, Nothing, 0)
			Else
				Return dx_CreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, Nothing, 0)
			End If
		End Function
		Public Shared Function CreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, 0)
			Else
				Return dx_CreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, 0)
			End If
		End Function
		Public Shared Function CreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, AlphaFileImageSize)
			Else
				Return dx_CreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, AlphaFileImageSize)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_ReCreateDivGraphFromMem")> _
		Shared Function dx_ReCreateDivGraphFromMem_x86(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReCreateDivGraphFromMem")> _
		Shared Function dx_ReCreateDivGraphFromMem_x64(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
		End Function
		Public Shared Function ReCreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, [TRUE], [FALSE], Nothing, 0)
			Else
				Return dx_ReCreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, [TRUE], [FALSE], Nothing, 0)
			End If
		End Function
		Public Shared Function ReCreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, [FALSE], Nothing, 0)
			Else
				Return dx_ReCreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, [FALSE], Nothing, 0)
			End If
		End Function
		Public Shared Function ReCreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, Nothing, 0)
			Else
				Return dx_ReCreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, Nothing, 0)
			End If
		End Function
		Public Shared Function ReCreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, 0)
			Else
				Return dx_ReCreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, 0)
			End If
		End Function
		Public Shared Function ReCreateDivGraphFromMem(RGBFileImage As System.Void*, RGBFileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, _
			SizeY As Integer, HandleBuf As Integer*, TextureFlag As Integer, ReverseFlag As Integer, AlphaFileImage As System.Void*, AlphaFileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateDivGraphFromMem_x86(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, AlphaFileImageSize)
			Else
				Return dx_ReCreateDivGraphFromMem_x64(RGBFileImage, RGBFileImageSize, AllNum, XNum, YNum, SizeX, _
					SizeY, HandleBuf, TextureFlag, ReverseFlag, AlphaFileImage, AlphaFileImageSize)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateGraph")> _
		Shared Function dx_CreateGraph_x86(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AlphaImage As System.Void*, GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateGraph")> _
		Shared Function dx_CreateGraph_x64(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AlphaImage As System.Void*, GrHandle As Integer) As Integer
		End Function
		Public Shared Function CreateGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraph_x86(Width, Height, Pitch, RGBImage, Nothing, -1)
			Else
				Return dx_CreateGraph_x64(Width, Height, Pitch, RGBImage, Nothing, -1)
			End If
		End Function
		Public Shared Function CreateGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AlphaImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraph_x86(Width, Height, Pitch, RGBImage, AlphaImage, -1)
			Else
				Return dx_CreateGraph_x64(Width, Height, Pitch, RGBImage, AlphaImage, -1)
			End If
		End Function
		Public Shared Function CreateGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AlphaImage As System.Void*, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraph_x86(Width, Height, Pitch, RGBImage, AlphaImage, GrHandle)
			Else
				Return dx_CreateGraph_x64(Width, Height, Pitch, RGBImage, AlphaImage, GrHandle)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateDivGraph")> _
		Shared Function dx_CreateDivGraph_x86(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AllNum As Integer, XNum As Integer, _
			YNum As Integer, SizeX As Integer, SizeY As Integer, HandleBuf As Integer*, AlphaImage As System.Void*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateDivGraph")> _
		Shared Function dx_CreateDivGraph_x64(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AllNum As Integer, XNum As Integer, _
			YNum As Integer, SizeX As Integer, SizeY As Integer, HandleBuf As Integer*, AlphaImage As System.Void*) As Integer
		End Function
		Public Shared Function CreateDivGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AllNum As Integer, XNum As Integer, _
			YNum As Integer, SizeX As Integer, SizeY As Integer, HandleBuf As Integer*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraph_x86(Width, Height, Pitch, RGBImage, AllNum, XNum, _
					YNum, SizeX, SizeY, HandleBuf, Nothing)
			Else
				Return dx_CreateDivGraph_x64(Width, Height, Pitch, RGBImage, AllNum, XNum, _
					YNum, SizeX, SizeY, HandleBuf, Nothing)
			End If
		End Function
		Public Shared Function CreateDivGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, AllNum As Integer, XNum As Integer, _
			YNum As Integer, SizeX As Integer, SizeY As Integer, HandleBuf As Integer*, AlphaImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraph_x86(Width, Height, Pitch, RGBImage, AllNum, XNum, _
					YNum, SizeX, SizeY, HandleBuf, AlphaImage)
			Else
				Return dx_CreateDivGraph_x64(Width, Height, Pitch, RGBImage, AllNum, XNum, _
					YNum, SizeX, SizeY, HandleBuf, AlphaImage)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_ReCreateGraph")> _
		Shared Function dx_ReCreateGraph_x86(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, GrHandle As Integer, AlphaImage As System.Void*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReCreateGraph")> _
		Shared Function dx_ReCreateGraph_x64(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, GrHandle As Integer, AlphaImage As System.Void*) As Integer
		End Function
		Public Shared Function ReCreateGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraph_x86(Width, Height, Pitch, RGBImage, GrHandle, Nothing)
			Else
				Return dx_ReCreateGraph_x64(Width, Height, Pitch, RGBImage, GrHandle, Nothing)
			End If
		End Function
		Public Shared Function ReCreateGraph(Width As Integer, Height As Integer, Pitch As Integer, RGBImage As System.Void*, GrHandle As Integer, AlphaImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraph_x86(Width, Height, Pitch, RGBImage, GrHandle, AlphaImage)
			Else
				Return dx_ReCreateGraph_x64(Width, Height, Pitch, RGBImage, GrHandle, AlphaImage)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateBlendGraphFromSoftImage")> _
		Shared Function dx_CreateBlendGraphFromSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateBlendGraphFromSoftImage")> _
		Shared Function dx_CreateBlendGraphFromSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function CreateBlendGraphFromSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateBlendGraphFromSoftImage_x86(SIHandle)
			Else
				Return dx_CreateBlendGraphFromSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateGraphFromSoftImage")> _
		Shared Function dx_CreateGraphFromSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateGraphFromSoftImage")> _
		Shared Function dx_CreateGraphFromSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function CreateGraphFromSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromSoftImage_x86(SIHandle)
			Else
				Return dx_CreateGraphFromSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateGraphFromRectSoftImage")> _
		Shared Function dx_CreateGraphFromRectSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer, SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateGraphFromRectSoftImage")> _
		Shared Function dx_CreateGraphFromRectSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer, SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function CreateGraphFromRectSoftImage(SIHandle As Integer, x As Integer, y As Integer, SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGraphFromRectSoftImage_x86(SIHandle, x, y, SizeX, SizeY)
			Else
				Return dx_CreateGraphFromRectSoftImage_x64(SIHandle, x, y, SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReCreateGraphFromSoftImage")> _
		Shared Function dx_ReCreateGraphFromSoftImage_x86(SIHandle As Integer, GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReCreateGraphFromSoftImage")> _
		Shared Function dx_ReCreateGraphFromSoftImage_x64(SIHandle As Integer, GrHandle As Integer) As Integer
		End Function
		Public Shared Function ReCreateGraphFromSoftImage(SIHandle As Integer, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromSoftImage_x86(SIHandle, GrHandle)
			Else
				Return dx_ReCreateGraphFromSoftImage_x64(SIHandle, GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReCreateGraphFromRectSoftImage")> _
		Shared Function dx_ReCreateGraphFromRectSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer, SizeX As Integer, SizeY As Integer, GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReCreateGraphFromRectSoftImage")> _
		Shared Function dx_ReCreateGraphFromRectSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer, SizeX As Integer, SizeY As Integer, GrHandle As Integer) As Integer
		End Function
		Public Shared Function ReCreateGraphFromRectSoftImage(SIHandle As Integer, x As Integer, y As Integer, SizeX As Integer, SizeY As Integer, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReCreateGraphFromRectSoftImage_x86(SIHandle, x, y, SizeX, SizeY, GrHandle)
			Else
				Return dx_ReCreateGraphFromRectSoftImage_x64(SIHandle, x, y, SizeX, SizeY, GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateDivGraphFromSoftImage")> _
		Shared Function dx_CreateDivGraphFromSoftImage_x86(SIHandle As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, SizeY As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateDivGraphFromSoftImage")> _
		Shared Function dx_CreateDivGraphFromSoftImage_x64(SIHandle As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, SizeY As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		Public Shared Function CreateDivGraphFromSoftImage(SIHandle As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, SizeX As Integer, SizeY As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivGraphFromSoftImage_x86(SIHandle, AllNum, XNum, YNum, SizeX, SizeY, _
					HandleBuf)
			Else
				Return dx_CreateDivGraphFromSoftImage_x64(SIHandle, AllNum, XNum, YNum, SizeX, SizeY, _
					HandleBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReloadGraph")> _
		Shared Function dx_ReloadGraph_x86(FileName As String, GrHandle As Integer, ReverseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReloadGraph")> _
		Shared Function dx_ReloadGraph_x64(FileName As String, GrHandle As Integer, ReverseFlag As Integer) As Integer
		End Function
		Public Shared Function ReloadGraph(FileName As String, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadGraph_x86(FileName, GrHandle, [FALSE])
			Else
				Return dx_ReloadGraph_x64(FileName, GrHandle, [FALSE])
			End If
		End Function
		Public Shared Function ReloadGraph(FileName As String, GrHandle As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadGraph_x86(FileName, GrHandle, ReverseFlag)
			Else
				Return dx_ReloadGraph_x64(FileName, GrHandle, ReverseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReloadDivGraph")> _
		Shared Function dx_ReloadDivGraph_x86(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, ReverseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReloadDivGraph")> _
		Shared Function dx_ReloadDivGraph_x64(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, ReverseFlag As Integer) As Integer
		End Function
		Public Shared Function ReloadDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, [FALSE])
			Else
				Return dx_ReloadDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, [FALSE])
			End If
		End Function
		Public Shared Function ReloadDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer, ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, ReverseFlag)
			Else
				Return dx_ReloadDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf, ReverseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReloadReverseGraph")> _
		Shared Function dx_ReloadReverseGraph_x86(FileName As String, GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReloadReverseGraph")> _
		Shared Function dx_ReloadReverseGraph_x64(FileName As String, GrHandle As Integer) As Integer
		End Function
		Public Shared Function ReloadReverseGraph(FileName As String, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadReverseGraph_x86(FileName, GrHandle)
			Else
				Return dx_ReloadReverseGraph_x64(FileName, GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReloadReverseDivGraph")> _
		Shared Function dx_ReloadReverseDivGraph_x86(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReloadReverseDivGraph")> _
		Shared Function dx_ReloadReverseDivGraph_x64(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		Public Shared Function ReloadReverseDivGraph(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReloadReverseDivGraph_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf)
			Else
				Return dx_ReloadReverseDivGraph_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGraphColorBitDepth")> _
		Shared Function dx_SetGraphColorBitDepth_x86(ColorBitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGraphColorBitDepth")> _
		Shared Function dx_SetGraphColorBitDepth_x64(ColorBitDepth As Integer) As Integer
		End Function
		Public Shared Function SetGraphColorBitDepth(ColorBitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphColorBitDepth_x86(ColorBitDepth)
			Else
				Return dx_SetGraphColorBitDepth_x64(ColorBitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphColorBitDepth")> _
		Shared Function dx_GetGraphColorBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphColorBitDepth")> _
		Shared Function dx_GetGraphColorBitDepth_x64() As Integer
		End Function
		Public Shared Function GetGraphColorBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphColorBitDepth_x86()
			Else
				Return dx_GetGraphColorBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreateGraphColorBitDepth")> _
		Shared Function dx_SetCreateGraphColorBitDepth_x86(BitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreateGraphColorBitDepth")> _
		Shared Function dx_SetCreateGraphColorBitDepth_x64(BitDepth As Integer) As Integer
		End Function
		Public Shared Function SetCreateGraphColorBitDepth(BitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreateGraphColorBitDepth_x86(BitDepth)
			Else
				Return dx_SetCreateGraphColorBitDepth_x64(BitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCreateGraphColorBitDepth")> _
		Shared Function dx_GetCreateGraphColorBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCreateGraphColorBitDepth")> _
		Shared Function dx_GetCreateGraphColorBitDepth_x64() As Integer
		End Function
		Public Shared Function GetCreateGraphColorBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCreateGraphColorBitDepth_x86()
			Else
				Return dx_GetCreateGraphColorBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreateGraphChannelBitDepth")> _
		Shared Function dx_SetCreateGraphChannelBitDepth_x86(BitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreateGraphChannelBitDepth")> _
		Shared Function dx_SetCreateGraphChannelBitDepth_x64(BitDepth As Integer) As Integer
		End Function
		Public Shared Function SetCreateGraphChannelBitDepth(BitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreateGraphChannelBitDepth_x86(BitDepth)
			Else
				Return dx_SetCreateGraphChannelBitDepth_x64(BitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCreateGraphChannelBitDepth")> _
		Shared Function dx_GetCreateGraphChannelBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCreateGraphChannelBitDepth")> _
		Shared Function dx_GetCreateGraphChannelBitDepth_x64() As Integer
		End Function
		Public Shared Function GetCreateGraphChannelBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCreateGraphChannelBitDepth_x86()
			Else
				Return dx_GetCreateGraphChannelBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawValidGraphCreateFlag")> _
		Shared Function dx_SetDrawValidGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawValidGraphCreateFlag")> _
		Shared Function dx_SetDrawValidGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDrawValidGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawValidGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetDrawValidGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawValidGraphCreateFlag")> _
		Shared Function dx_GetDrawValidGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawValidGraphCreateFlag")> _
		Shared Function dx_GetDrawValidGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetDrawValidGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawValidGraphCreateFlag_x86()
			Else
				Return dx_GetDrawValidGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawValidFlagOf3DGraph")> _
		Shared Function dx_SetDrawValidFlagOf3DGraph_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawValidFlagOf3DGraph")> _
		Shared Function dx_SetDrawValidFlagOf3DGraph_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDrawValidFlagOf3DGraph(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawValidFlagOf3DGraph_x86(Flag)
			Else
				Return dx_SetDrawValidFlagOf3DGraph_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLeftUpColorIsTransColorFlag")> _
		Shared Function dx_SetLeftUpColorIsTransColorFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLeftUpColorIsTransColorFlag")> _
		Shared Function dx_SetLeftUpColorIsTransColorFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetLeftUpColorIsTransColorFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLeftUpColorIsTransColorFlag_x86(Flag)
			Else
				Return dx_SetLeftUpColorIsTransColorFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseBlendGraphCreateFlag")> _
		Shared Function dx_SetUseBlendGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseBlendGraphCreateFlag")> _
		Shared Function dx_SetUseBlendGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseBlendGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseBlendGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetUseBlendGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseBlendGraphCreateFlag")> _
		Shared Function dx_GetUseBlendGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseBlendGraphCreateFlag")> _
		Shared Function dx_GetUseBlendGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetUseBlendGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseBlendGraphCreateFlag_x86()
			Else
				Return dx_GetUseBlendGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseAlphaTestGraphCreateFlag")> _
		Shared Function dx_SetUseAlphaTestGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseAlphaTestGraphCreateFlag")> _
		Shared Function dx_SetUseAlphaTestGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseAlphaTestGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseAlphaTestGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetUseAlphaTestGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseAlphaTestGraphCreateFlag")> _
		Shared Function dx_GetUseAlphaTestGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseAlphaTestGraphCreateFlag")> _
		Shared Function dx_GetUseAlphaTestGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetUseAlphaTestGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseAlphaTestGraphCreateFlag_x86()
			Else
				Return dx_GetUseAlphaTestGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseAlphaTestFlag")> _
		Shared Function dx_SetUseAlphaTestFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseAlphaTestFlag")> _
		Shared Function dx_SetUseAlphaTestFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseAlphaTestFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseAlphaTestFlag_x86(Flag)
			Else
				Return dx_SetUseAlphaTestFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseAlphaTestFlag")> _
		Shared Function dx_GetUseAlphaTestFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseAlphaTestFlag")> _
		Shared Function dx_GetUseAlphaTestFlag_x64() As Integer
		End Function
		Public Shared Function GetUseAlphaTestFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseAlphaTestFlag_x86()
			Else
				Return dx_GetUseAlphaTestFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCubeMapTextureCreateFlag")> _
		Shared Function dx_SetCubeMapTextureCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCubeMapTextureCreateFlag")> _
		Shared Function dx_SetCubeMapTextureCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetCubeMapTextureCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCubeMapTextureCreateFlag_x86(Flag)
			Else
				Return dx_SetCubeMapTextureCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCubeMapTextureCreateFlag")> _
		Shared Function dx_GetCubeMapTextureCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCubeMapTextureCreateFlag")> _
		Shared Function dx_GetCubeMapTextureCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetCubeMapTextureCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCubeMapTextureCreateFlag_x86()
			Else
				Return dx_GetCubeMapTextureCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseNoBlendModeParam")> _
		Shared Function dx_SetUseNoBlendModeParam_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseNoBlendModeParam")> _
		Shared Function dx_SetUseNoBlendModeParam_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseNoBlendModeParam(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseNoBlendModeParam_x86(Flag)
			Else
				Return dx_SetUseNoBlendModeParam_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawValidAlphaChannelGraphCreateFlag")> _
		Shared Function dx_SetDrawValidAlphaChannelGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawValidAlphaChannelGraphCreateFlag")> _
		Shared Function dx_SetDrawValidAlphaChannelGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDrawValidAlphaChannelGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawValidAlphaChannelGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetDrawValidAlphaChannelGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawValidAlphaChannelGraphCreateFlag")> _
		Shared Function dx_GetDrawValidAlphaChannelGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawValidAlphaChannelGraphCreateFlag")> _
		Shared Function dx_GetDrawValidAlphaChannelGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetDrawValidAlphaChannelGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawValidAlphaChannelGraphCreateFlag_x86()
			Else
				Return dx_GetDrawValidAlphaChannelGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawValidFloatTypeGraphCreateFlag")> _
		Shared Function dx_SetDrawValidFloatTypeGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawValidFloatTypeGraphCreateFlag")> _
		Shared Function dx_SetDrawValidFloatTypeGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDrawValidFloatTypeGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawValidFloatTypeGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetDrawValidFloatTypeGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawValidFloatTypeGraphCreateFlag")> _
		Shared Function dx_GetDrawValidFloatTypeGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawValidFloatTypeGraphCreateFlag")> _
		Shared Function dx_GetDrawValidFloatTypeGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetDrawValidFloatTypeGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawValidFloatTypeGraphCreateFlag_x86()
			Else
				Return dx_GetDrawValidFloatTypeGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawValidGraphCreateZBufferFlag")> _
		Shared Function dx_SetDrawValidGraphCreateZBufferFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawValidGraphCreateZBufferFlag")> _
		Shared Function dx_SetDrawValidGraphCreateZBufferFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetDrawValidGraphCreateZBufferFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawValidGraphCreateZBufferFlag_x86(Flag)
			Else
				Return dx_SetDrawValidGraphCreateZBufferFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawValidGraphCreateZBufferFlag")> _
		Shared Function dx_GetDrawValidGraphCreateZBufferFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawValidGraphCreateZBufferFlag")> _
		Shared Function dx_GetDrawValidGraphCreateZBufferFlag_x64() As Integer
		End Function
		Public Shared Function GetDrawValidGraphCreateZBufferFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawValidGraphCreateZBufferFlag_x86()
			Else
				Return dx_GetDrawValidGraphCreateZBufferFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreateDrawValidGraphZBufferBitDepth")> _
		Shared Function dx_SetCreateDrawValidGraphZBufferBitDepth_x86(BitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreateDrawValidGraphZBufferBitDepth")> _
		Shared Function dx_SetCreateDrawValidGraphZBufferBitDepth_x64(BitDepth As Integer) As Integer
		End Function
		Public Shared Function SetCreateDrawValidGraphZBufferBitDepth(BitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreateDrawValidGraphZBufferBitDepth_x86(BitDepth)
			Else
				Return dx_SetCreateDrawValidGraphZBufferBitDepth_x64(BitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCreateDrawValidGraphZBufferBitDepth")> _
		Shared Function dx_GetCreateDrawValidGraphZBufferBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCreateDrawValidGraphZBufferBitDepth")> _
		Shared Function dx_GetCreateDrawValidGraphZBufferBitDepth_x64() As Integer
		End Function
		Public Shared Function GetCreateDrawValidGraphZBufferBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCreateDrawValidGraphZBufferBitDepth_x86()
			Else
				Return dx_GetCreateDrawValidGraphZBufferBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreateDrawValidGraphChannelNum")> _
		Shared Function dx_SetCreateDrawValidGraphChannelNum_x86(ChannelNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreateDrawValidGraphChannelNum")> _
		Shared Function dx_SetCreateDrawValidGraphChannelNum_x64(ChannelNum As Integer) As Integer
		End Function
		Public Shared Function SetCreateDrawValidGraphChannelNum(ChannelNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreateDrawValidGraphChannelNum_x86(ChannelNum)
			Else
				Return dx_SetCreateDrawValidGraphChannelNum_x64(ChannelNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCreateDrawValidGraphChannelNum")> _
		Shared Function dx_GetCreateDrawValidGraphChannelNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCreateDrawValidGraphChannelNum")> _
		Shared Function dx_GetCreateDrawValidGraphChannelNum_x64() As Integer
		End Function
		Public Shared Function GetCreateDrawValidGraphChannelNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCreateDrawValidGraphChannelNum_x86()
			Else
				Return dx_GetCreateDrawValidGraphChannelNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreateDrawValidGraphMultiSample")> _
		Shared Function dx_SetCreateDrawValidGraphMultiSample_x86(Samples As Integer, Quality As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreateDrawValidGraphMultiSample")> _
		Shared Function dx_SetCreateDrawValidGraphMultiSample_x64(Samples As Integer, Quality As Integer) As Integer
		End Function
		Public Shared Function SetCreateDrawValidGraphMultiSample(Samples As Integer, Quality As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreateDrawValidGraphMultiSample_x86(Samples, Quality)
			Else
				Return dx_SetCreateDrawValidGraphMultiSample_x64(Samples, Quality)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawValidMultiSample")> _
		Shared Function dx_SetDrawValidMultiSample_x86(Samples As Integer, Quality As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawValidMultiSample")> _
		Shared Function dx_SetDrawValidMultiSample_x64(Samples As Integer, Quality As Integer) As Integer
		End Function
		Public Shared Function SetDrawValidMultiSample(Samples As Integer, Quality As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawValidMultiSample_x86(Samples, Quality)
			Else
				Return dx_SetDrawValidMultiSample_x64(Samples, Quality)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMultiSampleQuality")> _
		Shared Function dx_GetMultiSampleQuality_x86(Samples As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMultiSampleQuality")> _
		Shared Function dx_GetMultiSampleQuality_x64(Samples As Integer) As Integer
		End Function
		Public Shared Function GetMultiSampleQuality(Samples As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMultiSampleQuality_x86(Samples)
			Else
				Return dx_GetMultiSampleQuality_x64(Samples)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseTransColor")> _
		Shared Function dx_SetUseTransColor_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseTransColor")> _
		Shared Function dx_SetUseTransColor_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseTransColor(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseTransColor_x86(Flag)
			Else
				Return dx_SetUseTransColor_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseTransColorGraphCreateFlag")> _
		Shared Function dx_SetUseTransColorGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseTransColorGraphCreateFlag")> _
		Shared Function dx_SetUseTransColorGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseTransColorGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseTransColorGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetUseTransColorGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseGraphAlphaChannel")> _
		Shared Function dx_SetUseGraphAlphaChannel_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseGraphAlphaChannel")> _
		Shared Function dx_SetUseGraphAlphaChannel_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseGraphAlphaChannel(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseGraphAlphaChannel_x86(Flag)
			Else
				Return dx_SetUseGraphAlphaChannel_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseGraphAlphaChannel")> _
		Shared Function dx_GetUseGraphAlphaChannel_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseGraphAlphaChannel")> _
		Shared Function dx_GetUseGraphAlphaChannel_x64() As Integer
		End Function
		Public Shared Function GetUseGraphAlphaChannel() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseGraphAlphaChannel_x86()
			Else
				Return dx_GetUseGraphAlphaChannel_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseAlphaChannelGraphCreateFlag")> _
		Shared Function dx_SetUseAlphaChannelGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseAlphaChannelGraphCreateFlag")> _
		Shared Function dx_SetUseAlphaChannelGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseAlphaChannelGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseAlphaChannelGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetUseAlphaChannelGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseAlphaChannelGraphCreateFlag")> _
		Shared Function dx_GetUseAlphaChannelGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseAlphaChannelGraphCreateFlag")> _
		Shared Function dx_GetUseAlphaChannelGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetUseAlphaChannelGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseAlphaChannelGraphCreateFlag_x86()
			Else
				Return dx_GetUseAlphaChannelGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseNotManageTextureFlag")> _
		Shared Function dx_SetUseNotManageTextureFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseNotManageTextureFlag")> _
		Shared Function dx_SetUseNotManageTextureFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseNotManageTextureFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseNotManageTextureFlag_x86(Flag)
			Else
				Return dx_SetUseNotManageTextureFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseNotManageTextureFlag")> _
		Shared Function dx_GetUseNotManageTextureFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseNotManageTextureFlag")> _
		Shared Function dx_GetUseNotManageTextureFlag_x64() As Integer
		End Function
		Public Shared Function GetUseNotManageTextureFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseNotManageTextureFlag_x86()
			Else
				Return dx_GetUseNotManageTextureFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransColor")> _
		Shared Function dx_SetTransColor_x86(Red As Integer, Green As Integer, Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransColor")> _
		Shared Function dx_SetTransColor_x64(Red As Integer, Green As Integer, Blue As Integer) As Integer
		End Function
		Public Shared Function SetTransColor(Red As Integer, Green As Integer, Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransColor_x86(Red, Green, Blue)
			Else
				Return dx_SetTransColor_x64(Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransColor")> _
		Shared Function dx_GetTransColor_x86(ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransColor")> _
		Shared Function dx_GetTransColor_x64(ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		Public Shared Function GetTransColor(ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransColor_x86(Red, Green, Blue)
			Else
				Return dx_GetTransColor_x64(Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDivGraphFlag")> _
		Shared Function dx_SetUseDivGraphFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDivGraphFlag")> _
		Shared Function dx_SetUseDivGraphFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDivGraphFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDivGraphFlag_x86(Flag)
			Else
				Return dx_SetUseDivGraphFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseAlphaImageLoadFlag")> _
		Shared Function dx_SetUseAlphaImageLoadFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseAlphaImageLoadFlag")> _
		Shared Function dx_SetUseAlphaImageLoadFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseAlphaImageLoadFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseAlphaImageLoadFlag_x86(Flag)
			Else
				Return dx_SetUseAlphaImageLoadFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseMaxTextureSize")> _
		Shared Function dx_SetUseMaxTextureSize_x86(Size As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseMaxTextureSize")> _
		Shared Function dx_SetUseMaxTextureSize_x64(Size As Integer) As Integer
		End Function
		Public Shared Function SetUseMaxTextureSize(Size As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseMaxTextureSize_x86(Size)
			Else
				Return dx_SetUseMaxTextureSize_x64(Size)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseGraphBaseDataBackup")> _
		Shared Function dx_SetUseGraphBaseDataBackup_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseGraphBaseDataBackup")> _
		Shared Function dx_SetUseGraphBaseDataBackup_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseGraphBaseDataBackup(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseGraphBaseDataBackup_x86(Flag)
			Else
				Return dx_SetUseGraphBaseDataBackup_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseGraphBaseDataBackup")> _
		Shared Function dx_GetUseGraphBaseDataBackup_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseGraphBaseDataBackup")> _
		Shared Function dx_GetUseGraphBaseDataBackup_x64() As Integer
		End Function
		Public Shared Function GetUseGraphBaseDataBackup() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseGraphBaseDataBackup_x86()
			Else
				Return dx_GetUseGraphBaseDataBackup_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseSystemMemGraphCreateFlag")> _
		Shared Function dx_SetUseSystemMemGraphCreateFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseSystemMemGraphCreateFlag")> _
		Shared Function dx_SetUseSystemMemGraphCreateFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseSystemMemGraphCreateFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseSystemMemGraphCreateFlag_x86(Flag)
			Else
				Return dx_SetUseSystemMemGraphCreateFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseSystemMemGraphCreateFlag")> _
		Shared Function dx_GetUseSystemMemGraphCreateFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseSystemMemGraphCreateFlag")> _
		Shared Function dx_GetUseSystemMemGraphCreateFlag_x64() As Integer
		End Function
		Public Shared Function GetUseSystemMemGraphCreateFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseSystemMemGraphCreateFlag_x86()
			Else
				Return dx_GetUseSystemMemGraphCreateFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GraphUnLock")> _
		Shared Function dx_GraphUnLock_x86(GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GraphUnLock")> _
		Shared Function dx_GraphUnLock_x64(GrHandle As Integer) As Integer
		End Function
		Public Shared Function GraphUnLock(GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GraphUnLock_x86(GrHandle)
			Else
				Return dx_GraphUnLock_x64(GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseGraphZBuffer")> _
		Shared Function dx_SetUseGraphZBuffer_x86(GrHandle As Integer, UseFlag As Integer, BitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseGraphZBuffer")> _
		Shared Function dx_SetUseGraphZBuffer_x64(GrHandle As Integer, UseFlag As Integer, BitDepth As Integer) As Integer
		End Function
		Public Shared Function SetUseGraphZBuffer(GrHandle As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseGraphZBuffer_x86(GrHandle, UseFlag, -1)
			Else
				Return dx_SetUseGraphZBuffer_x64(GrHandle, UseFlag, -1)
			End If
		End Function
		Public Shared Function SetUseGraphZBuffer(GrHandle As Integer, UseFlag As Integer, BitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseGraphZBuffer_x86(GrHandle, UseFlag, BitDepth)
			Else
				Return dx_SetUseGraphZBuffer_x64(GrHandle, UseFlag, BitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CopyGraphZBufferImage")> _
		Shared Function dx_CopyGraphZBufferImage_x86(DestGrHandle As Integer, SrcGrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CopyGraphZBufferImage")> _
		Shared Function dx_CopyGraphZBufferImage_x64(DestGrHandle As Integer, SrcGrHandle As Integer) As Integer
		End Function
		Public Shared Function CopyGraphZBufferImage(DestGrHandle As Integer, SrcGrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CopyGraphZBufferImage_x86(DestGrHandle, SrcGrHandle)
			Else
				Return dx_CopyGraphZBufferImage_x64(DestGrHandle, SrcGrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDeviceLostDeleteGraphFlag")> _
		Shared Function dx_SetDeviceLostDeleteGraphFlag_x86(GrHandle As Integer, DeleteFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDeviceLostDeleteGraphFlag")> _
		Shared Function dx_SetDeviceLostDeleteGraphFlag_x64(GrHandle As Integer, DeleteFlag As Integer) As Integer
		End Function
		Public Shared Function SetDeviceLostDeleteGraphFlag(GrHandle As Integer, DeleteFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDeviceLostDeleteGraphFlag_x86(GrHandle, DeleteFlag)
			Else
				Return dx_SetDeviceLostDeleteGraphFlag_x64(GrHandle, DeleteFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphSize")> _
		Shared Function dx_GetGraphSize_x86(GrHandle As Integer, ByRef SizeXBuf As Integer, ByRef SizeYBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphSize")> _
		Shared Function dx_GetGraphSize_x64(GrHandle As Integer, ByRef SizeXBuf As Integer, ByRef SizeYBuf As Integer) As Integer
		End Function
		Public Shared Function GetGraphSize(GrHandle As Integer, ByRef SizeXBuf As Integer, ByRef SizeYBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphSize_x86(GrHandle, SizeXBuf, SizeYBuf)
			Else
				Return dx_GetGraphSize_x64(GrHandle, SizeXBuf, SizeYBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphTextureSize")> _
		Shared Function dx_GetGraphTextureSize_x86(GrHandle As Integer, ByRef SizeXBuf As Integer, ByRef SizeYBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphTextureSize")> _
		Shared Function dx_GetGraphTextureSize_x64(GrHandle As Integer, ByRef SizeXBuf As Integer, ByRef SizeYBuf As Integer) As Integer
		End Function
		Public Shared Function GetGraphTextureSize(GrHandle As Integer, ByRef SizeXBuf As Integer, ByRef SizeYBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphTextureSize_x86(GrHandle, SizeXBuf, SizeYBuf)
			Else
				Return dx_GetGraphTextureSize_x64(GrHandle, SizeXBuf, SizeYBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphMipmapCount")> _
		Shared Function dx_GetGraphMipmapCount_x86(GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphMipmapCount")> _
		Shared Function dx_GetGraphMipmapCount_x64(GrHandle As Integer) As Integer
		End Function
		Public Shared Function GetGraphMipmapCount(GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphMipmapCount_x86(GrHandle)
			Else
				Return dx_GetGraphMipmapCount_x64(GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphFilePath")> _
		Shared Function dx_GetGraphFilePath_x86(GrHandle As Integer, FilePathBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphFilePath")> _
		Shared Function dx_GetGraphFilePath_x64(GrHandle As Integer, FilePathBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetGraphFilePath(GrHandle As Integer, FilePathBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphFilePath_x86(GrHandle, FilePathBuffer)
			Else
				Return dx_GetGraphFilePath_x64(GrHandle, FilePathBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMaxGraphTextureSize")> _
		Shared Function dx_GetMaxGraphTextureSize_x86(ByRef SizeX As Integer, ByRef SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMaxGraphTextureSize")> _
		Shared Function dx_GetMaxGraphTextureSize_x64(ByRef SizeX As Integer, ByRef SizeY As Integer) As Integer
		End Function
		Public Shared Function GetMaxGraphTextureSize(ByRef SizeX As Integer, ByRef SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMaxGraphTextureSize_x86(SizeX, SizeY)
			Else
				Return dx_GetMaxGraphTextureSize_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetValidRestoreShredPoint")> _
		Shared Function dx_GetValidRestoreShredPoint_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetValidRestoreShredPoint")> _
		Shared Function dx_GetValidRestoreShredPoint_x64() As Integer
		End Function
		Public Shared Function GetValidRestoreShredPoint() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetValidRestoreShredPoint_x86()
			Else
				Return dx_GetValidRestoreShredPoint_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCreateGraphColorData")> _
		Shared Function dx_GetCreateGraphColorData_x86(ByRef ColorData As COLORDATA, ByRef Format As IMAGEFORMATDESC) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCreateGraphColorData")> _
		Shared Function dx_GetCreateGraphColorData_x64(ByRef ColorData As COLORDATA, ByRef Format As IMAGEFORMATDESC) As Integer
		End Function
		Public Shared Function GetCreateGraphColorData(ByRef ColorData As COLORDATA, ByRef Format As IMAGEFORMATDESC) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCreateGraphColorData_x86(ColorData, Format)
			Else
				Return dx_GetCreateGraphColorData_x64(ColorData, Format)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphPalette")> _
		Shared Function dx_GetGraphPalette_x86(GrHandle As Integer, ColorIndex As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphPalette")> _
		Shared Function dx_GetGraphPalette_x64(GrHandle As Integer, ColorIndex As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		Public Shared Function GetGraphPalette(GrHandle As Integer, ColorIndex As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphPalette_x86(GrHandle, ColorIndex, Red, Green, Blue)
			Else
				Return dx_GetGraphPalette_x64(GrHandle, ColorIndex, Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphOriginalPalette")> _
		Shared Function dx_GetGraphOriginalPalette_x86(GrHandle As Integer, ColorIndex As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphOriginalPalette")> _
		Shared Function dx_GetGraphOriginalPalette_x64(GrHandle As Integer, ColorIndex As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		Public Shared Function GetGraphOriginalPalette(GrHandle As Integer, ColorIndex As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphOriginalPalette_x86(GrHandle, ColorIndex, Red, Green, Blue)
			Else
				Return dx_GetGraphOriginalPalette_x64(GrHandle, ColorIndex, Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGraphPalette")> _
		Shared Function dx_SetGraphPalette_x86(GrHandle As Integer, ColorIndex As Integer, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGraphPalette")> _
		Shared Function dx_SetGraphPalette_x64(GrHandle As Integer, ColorIndex As Integer, Color As Integer) As Integer
		End Function
		Public Shared Function SetGraphPalette(GrHandle As Integer, ColorIndex As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphPalette_x86(GrHandle, ColorIndex, Color)
			Else
				Return dx_SetGraphPalette_x64(GrHandle, ColorIndex, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetGraphPalette")> _
		Shared Function dx_ResetGraphPalette_x86(GrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetGraphPalette")> _
		Shared Function dx_ResetGraphPalette_x64(GrHandle As Integer) As Integer
		End Function
		Public Shared Function ResetGraphPalette(GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetGraphPalette_x86(GrHandle)
			Else
				Return dx_ResetGraphPalette_x64(GrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawLine")> _
		Shared Function dx_DrawLine_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer, Thickness As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawLine")> _
		Shared Function dx_DrawLine_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer, Thickness As Integer) As Integer
		End Function
		Public Shared Function DrawLine(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLine_x86(x1, y1, x2, y2, Color, 1)
			Else
				Return dx_DrawLine_x64(x1, y1, x2, y2, Color, 1)
			End If
		End Function
		Public Shared Function DrawLine(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer, Thickness As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLine_x86(x1, y1, x2, y2, Color, Thickness)
			Else
				Return dx_DrawLine_x64(x1, y1, x2, y2, Color, Thickness)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawBox")> _
		Shared Function dx_DrawBox_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawBox")> _
		Shared Function dx_DrawBox_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawBox_x86(x1, y1, x2, y2, Color, FillFlag)
			Else
				Return dx_DrawBox_x64(x1, y1, x2, y2, Color, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawFillBox")> _
		Shared Function dx_DrawFillBox_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawFillBox")> _
		Shared Function dx_DrawFillBox_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
		End Function
		Public Shared Function DrawFillBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawFillBox_x86(x1, y1, x2, y2, Color)
			Else
				Return dx_DrawFillBox_x64(x1, y1, x2, y2, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawLineBox")> _
		Shared Function dx_DrawLineBox_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawLineBox")> _
		Shared Function dx_DrawLineBox_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
		End Function
		Public Shared Function DrawLineBox(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLineBox_x86(x1, y1, x2, y2, Color)
			Else
				Return dx_DrawLineBox_x64(x1, y1, x2, y2, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCircle")> _
		Shared Function dx_DrawCircle_x86(x As Integer, y As Integer, r As Integer, Color As Integer, FillFlag As Integer, LineThickness As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCircle")> _
		Shared Function dx_DrawCircle_x64(x As Integer, y As Integer, r As Integer, Color As Integer, FillFlag As Integer, LineThickness As Integer) As Integer
		End Function
		Public Shared Function DrawCircle(x As Integer, y As Integer, r As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCircle_x86(x, y, r, Color, [TRUE], 1)
			Else
				Return dx_DrawCircle_x64(x, y, r, Color, [TRUE], 1)
			End If
		End Function
		Public Shared Function DrawCircle(x As Integer, y As Integer, r As Integer, Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCircle_x86(x, y, r, Color, FillFlag, 1)
			Else
				Return dx_DrawCircle_x64(x, y, r, Color, FillFlag, 1)
			End If
		End Function
		Public Shared Function DrawCircle(x As Integer, y As Integer, r As Integer, Color As Integer, FillFlag As Integer, LineThickness As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCircle_x86(x, y, r, Color, FillFlag, LineThickness)
			Else
				Return dx_DrawCircle_x64(x, y, r, Color, FillFlag, LineThickness)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawOval")> _
		Shared Function dx_DrawOval_x86(x As Integer, y As Integer, rx As Integer, ry As Integer, Color As Integer, FillFlag As Integer, _
			LineThickness As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawOval")> _
		Shared Function dx_DrawOval_x64(x As Integer, y As Integer, rx As Integer, ry As Integer, Color As Integer, FillFlag As Integer, _
			LineThickness As Integer) As Integer
		End Function
		Public Shared Function DrawOval(x As Integer, y As Integer, rx As Integer, ry As Integer, Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawOval_x86(x, y, rx, ry, Color, FillFlag, _
					1)
			Else
				Return dx_DrawOval_x64(x, y, rx, ry, Color, FillFlag, _
					1)
			End If
		End Function
		Public Shared Function DrawOval(x As Integer, y As Integer, rx As Integer, ry As Integer, Color As Integer, FillFlag As Integer, _
			LineThickness As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawOval_x86(x, y, rx, ry, Color, FillFlag, _
					LineThickness)
			Else
				Return dx_DrawOval_x64(x, y, rx, ry, Color, FillFlag, _
					LineThickness)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTriangle")> _
		Shared Function dx_DrawTriangle_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			Color As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTriangle")> _
		Shared Function dx_DrawTriangle_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			Color As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawTriangle(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTriangle_x86(x1, y1, x2, y2, x3, y3, _
					Color, FillFlag)
			Else
				Return dx_DrawTriangle_x64(x1, y1, x2, y2, x3, y3, _
					Color, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawQuadrangle")> _
		Shared Function dx_DrawQuadrangle_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, Color As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawQuadrangle")> _
		Shared Function dx_DrawQuadrangle_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, Color As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawQuadrangle(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawQuadrangle_x86(x1, y1, x2, y2, x3, y3, _
					x4, y4, Color, FillFlag)
			Else
				Return dx_DrawQuadrangle_x64(x1, y1, x2, y2, x3, y3, _
					x4, y4, Color, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRoundRect")> _
		Shared Function dx_DrawRoundRect_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, rx As Integer, ry As Integer, _
			Color As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRoundRect")> _
		Shared Function dx_DrawRoundRect_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, rx As Integer, ry As Integer, _
			Color As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRoundRect(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, rx As Integer, ry As Integer, _
			Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRoundRect_x86(x1, y1, x2, y2, rx, ry, _
					Color, FillFlag)
			Else
				Return dx_DrawRoundRect_x64(x1, y1, x2, y2, rx, ry, _
					Color, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixel")> _
		Shared Function dx_DrawPixel_x86(x As Integer, y As Integer, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixel")> _
		Shared Function dx_DrawPixel_x64(x As Integer, y As Integer, Color As Integer) As Integer
		End Function
		Public Shared Function DrawPixel(x As Integer, y As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPixel_x86(x, y, Color)
			Else
				Return dx_DrawPixel_x64(x, y, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Paint")> _
		Shared Function dx_Paint_x86(x As Integer, y As Integer, FillColor As Integer, BoundaryColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Paint")> _
		Shared Function dx_Paint_x64(x As Integer, y As Integer, FillColor As Integer, BoundaryColor As Integer) As Integer
		End Function
		Public Shared Function Paint(x As Integer, y As Integer, FillColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Paint_x86(x, y, FillColor, -1)
			Else
				Return dx_Paint_x64(x, y, FillColor, -1)
			End If
		End Function
		Public Shared Function Paint(x As Integer, y As Integer, FillColor As Integer, BoundaryColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Paint_x86(x, y, FillColor, BoundaryColor)
			Else
				Return dx_Paint_x64(x, y, FillColor, BoundaryColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixelSet")> _
		Shared Function dx_DrawPixelSet_x86(ByRef PointData As POINTDATA, Num As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixelSet")> _
		Shared Function dx_DrawPixelSet_x64(ByRef PointData As POINTDATA, Num As Integer) As Integer
		End Function
		Public Shared Function DrawPixelSet(ByRef PointData As POINTDATA, Num As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPixelSet_x86(PointData, Num)
			Else
				Return dx_DrawPixelSet_x64(PointData, Num)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawLineSet")> _
		Shared Function dx_DrawLineSet_x86(ByRef LineData As LINEDATA, Num As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawLineSet")> _
		Shared Function dx_DrawLineSet_x64(ByRef LineData As LINEDATA, Num As Integer) As Integer
		End Function
		Public Shared Function DrawLineSet(ByRef LineData As LINEDATA, Num As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLineSet_x86(LineData, Num)
			Else
				Return dx_DrawLineSet_x64(LineData, Num)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixel3D")> _
		Shared Function dx_DrawPixel3D_x86(Pos As VECTOR, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixel3D")> _
		Shared Function dx_DrawPixel3D_x64(Pos As VECTOR, Color As Integer) As Integer
		End Function
		Public Shared Function DrawPixel3D(Pos As VECTOR, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPixel3D_x86(Pos, Color)
			Else
				Return dx_DrawPixel3D_x64(Pos, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixel3DD")> _
		Shared Function dx_DrawPixel3DD_x86(Pos As VECTOR_D, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixel3DD")> _
		Shared Function dx_DrawPixel3DD_x64(Pos As VECTOR_D, Color As Integer) As Integer
		End Function
		Public Shared Function DrawPixel3DD(Pos As VECTOR_D, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPixel3DD_x86(Pos, Color)
			Else
				Return dx_DrawPixel3DD_x64(Pos, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawLine3D")> _
		Shared Function dx_DrawLine3D_x86(Pos1 As VECTOR, Pos2 As VECTOR, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawLine3D")> _
		Shared Function dx_DrawLine3D_x64(Pos1 As VECTOR, Pos2 As VECTOR, Color As Integer) As Integer
		End Function
		Public Shared Function DrawLine3D(Pos1 As VECTOR, Pos2 As VECTOR, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLine3D_x86(Pos1, Pos2, Color)
			Else
				Return dx_DrawLine3D_x64(Pos1, Pos2, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawLine3DD")> _
		Shared Function dx_DrawLine3DD_x86(Pos1 As VECTOR_D, Pos2 As VECTOR_D, Color As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawLine3DD")> _
		Shared Function dx_DrawLine3DD_x64(Pos1 As VECTOR_D, Pos2 As VECTOR_D, Color As Integer) As Integer
		End Function
		Public Shared Function DrawLine3DD(Pos1 As VECTOR_D, Pos2 As VECTOR_D, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLine3DD_x86(Pos1, Pos2, Color)
			Else
				Return dx_DrawLine3DD_x64(Pos1, Pos2, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTriangle3D")> _
		Shared Function dx_DrawTriangle3D_x86(Pos1 As VECTOR, Pos2 As VECTOR, Pos3 As VECTOR, Color As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTriangle3D")> _
		Shared Function dx_DrawTriangle3D_x64(Pos1 As VECTOR, Pos2 As VECTOR, Pos3 As VECTOR, Color As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawTriangle3D(Pos1 As VECTOR, Pos2 As VECTOR, Pos3 As VECTOR, Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTriangle3D_x86(Pos1, Pos2, Pos3, Color, FillFlag)
			Else
				Return dx_DrawTriangle3D_x64(Pos1, Pos2, Pos3, Color, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTriangle3DD")> _
		Shared Function dx_DrawTriangle3DD_x86(Pos1 As VECTOR_D, Pos2 As VECTOR_D, Pos3 As VECTOR_D, Color As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTriangle3DD")> _
		Shared Function dx_DrawTriangle3DD_x64(Pos1 As VECTOR_D, Pos2 As VECTOR_D, Pos3 As VECTOR_D, Color As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawTriangle3DD(Pos1 As VECTOR_D, Pos2 As VECTOR_D, Pos3 As VECTOR_D, Color As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTriangle3DD_x86(Pos1, Pos2, Pos3, Color, FillFlag)
			Else
				Return dx_DrawTriangle3DD_x64(Pos1, Pos2, Pos3, Color, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCube3D")> _
		Shared Function dx_DrawCube3D_x86(Pos1 As VECTOR, Pos2 As VECTOR, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCube3D")> _
		Shared Function dx_DrawCube3D_x64(Pos1 As VECTOR, Pos2 As VECTOR, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawCube3D(Pos1 As VECTOR, Pos2 As VECTOR, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCube3D_x86(Pos1, Pos2, DifColor, SpcColor, FillFlag)
			Else
				Return dx_DrawCube3D_x64(Pos1, Pos2, DifColor, SpcColor, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCube3DD")> _
		Shared Function dx_DrawCube3DD_x86(Pos1 As VECTOR_D, Pos2 As VECTOR_D, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCube3DD")> _
		Shared Function dx_DrawCube3DD_x64(Pos1 As VECTOR_D, Pos2 As VECTOR_D, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawCube3DD(Pos1 As VECTOR_D, Pos2 As VECTOR_D, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCube3DD_x86(Pos1, Pos2, DifColor, SpcColor, FillFlag)
			Else
				Return dx_DrawCube3DD_x64(Pos1, Pos2, DifColor, SpcColor, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawSphere3D")> _
		Shared Function dx_DrawSphere3D_x86(CenterPos As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawSphere3D")> _
		Shared Function dx_DrawSphere3D_x64(CenterPos As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawSphere3D(CenterPos As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawSphere3D_x86(CenterPos, r, DivNum, DifColor, SpcColor, FillFlag)
			Else
				Return dx_DrawSphere3D_x64(CenterPos, r, DivNum, DifColor, SpcColor, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawSphere3DD")> _
		Shared Function dx_DrawSphere3DD_x86(CenterPos As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawSphere3DD")> _
		Shared Function dx_DrawSphere3DD_x64(CenterPos As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawSphere3DD(CenterPos As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawSphere3DD_x86(CenterPos, r, DivNum, DifColor, SpcColor, FillFlag)
			Else
				Return dx_DrawSphere3DD_x64(CenterPos, r, DivNum, DifColor, SpcColor, FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCapsule3D")> _
		Shared Function dx_DrawCapsule3D_x86(Pos1 As VECTOR, Pos2 As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCapsule3D")> _
		Shared Function dx_DrawCapsule3D_x64(Pos1 As VECTOR, Pos2 As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawCapsule3D(Pos1 As VECTOR, Pos2 As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCapsule3D_x86(Pos1, Pos2, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			Else
				Return dx_DrawCapsule3D_x64(Pos1, Pos2, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCapsule3DD")> _
		Shared Function dx_DrawCapsule3DD_x86(Pos1 As VECTOR_D, Pos2 As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCapsule3DD")> _
		Shared Function dx_DrawCapsule3DD_x64(Pos1 As VECTOR_D, Pos2 As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawCapsule3DD(Pos1 As VECTOR_D, Pos2 As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCapsule3DD_x86(Pos1, Pos2, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			Else
				Return dx_DrawCapsule3DD_x64(Pos1, Pos2, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCone3D")> _
		Shared Function dx_DrawCone3D_x86(TopPos As VECTOR, BottomPos As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCone3D")> _
		Shared Function dx_DrawCone3D_x64(TopPos As VECTOR, BottomPos As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawCone3D(TopPos As VECTOR, BottomPos As VECTOR, r As Single, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCone3D_x86(TopPos, BottomPos, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			Else
				Return dx_DrawCone3D_x64(TopPos, BottomPos, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCone3DD")> _
		Shared Function dx_DrawCone3DD_x86(TopPos As VECTOR_D, BottomPos As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCone3DD")> _
		Shared Function dx_DrawCone3DD_x64(TopPos As VECTOR_D, BottomPos As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
		End Function
		Public Shared Function DrawCone3DD(TopPos As VECTOR_D, BottomPos As VECTOR_D, r As Double, DivNum As Integer, DifColor As Integer, SpcColor As Integer, _
			FillFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCone3DD_x86(TopPos, BottomPos, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			Else
				Return dx_DrawCone3DD_x64(TopPos, BottomPos, r, DivNum, DifColor, SpcColor, _
					FillFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadGraphScreen")> _
		Shared Function dx_LoadGraphScreen_x86(x As Integer, y As Integer, GraphName As String, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadGraphScreen")> _
		Shared Function dx_LoadGraphScreen_x64(x As Integer, y As Integer, GraphName As String, TransFlag As Integer) As Integer
		End Function
		Public Shared Function LoadGraphScreen(x As Integer, y As Integer, GraphName As String, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadGraphScreen_x86(x, y, GraphName, TransFlag)
			Else
				Return dx_LoadGraphScreen_x64(x, y, GraphName, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawGraph")> _
		Shared Function dx_DrawGraph_x86(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawGraph")> _
		Shared Function dx_DrawGraph_x64(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawGraph(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawGraph_x86(x, y, GrHandle, TransFlag)
			Else
				Return dx_DrawGraph_x64(x, y, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendGraph")> _
		Shared Function dx_DrawExtendGraph_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendGraph")> _
		Shared Function dx_DrawExtendGraph_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawExtendGraph(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendGraph_x86(x1, y1, x2, y2, GrHandle, TransFlag)
			Else
				Return dx_DrawExtendGraph_x64(x1, y1, x2, y2, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph")> _
		Shared Function dx_DrawRotaGraph_x86(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph")> _
		Shared Function dx_DrawRotaGraph_x64(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph_x86(x, y, ExRate, Angle, GrHandle, TransFlag, _
					[FALSE])
			Else
				Return dx_DrawRotaGraph_x64(x, y, ExRate, Angle, GrHandle, TransFlag, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph_x86(x, y, ExRate, Angle, GrHandle, TransFlag, _
					TurnFlag)
			Else
				Return dx_DrawRotaGraph_x64(x, y, ExRate, Angle, GrHandle, TransFlag, _
					TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph2")> _
		Shared Function dx_DrawRotaGraph2_x86(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph2")> _
		Shared Function dx_DrawRotaGraph2_x64(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph2(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph2_x86(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawRotaGraph2_x64(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph2(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph2_x86(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRotaGraph2_x64(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph3")> _
		Shared Function dx_DrawRotaGraph3_x86(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph3")> _
		Shared Function dx_DrawRotaGraph3_x64(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph3(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3_x86(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawRotaGraph3_x64(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph3(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3_x86(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRotaGraph3_x64(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawModiGraph")> _
		Shared Function dx_DrawModiGraph_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawModiGraph")> _
		Shared Function dx_DrawModiGraph_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawModiGraph(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawModiGraph_x86(x1, y1, x2, y2, x3, y3, _
					x4, y4, GrHandle, TransFlag)
			Else
				Return dx_DrawModiGraph_x64(x1, y1, x2, y2, x3, y3, _
					x4, y4, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTurnGraph")> _
		Shared Function dx_DrawTurnGraph_x86(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTurnGraph")> _
		Shared Function dx_DrawTurnGraph_x64(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawTurnGraph(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTurnGraph_x86(x, y, GrHandle, TransFlag)
			Else
				Return dx_DrawTurnGraph_x64(x, y, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawGraphF")> _
		Shared Function dx_DrawGraphF_x86(xf As Single, yf As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawGraphF")> _
		Shared Function dx_DrawGraphF_x64(xf As Single, yf As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawGraphF(xf As Single, yf As Single, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawGraphF_x86(xf, yf, GrHandle, TransFlag)
			Else
				Return dx_DrawGraphF_x64(xf, yf, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendGraphF")> _
		Shared Function dx_DrawExtendGraphF_x86(x1f As Single, y1f As Single, x2f As Single, y2 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendGraphF")> _
		Shared Function dx_DrawExtendGraphF_x64(x1f As Single, y1f As Single, x2f As Single, y2 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawExtendGraphF(x1f As Single, y1f As Single, x2f As Single, y2 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendGraphF_x86(x1f, y1f, x2f, y2, GrHandle, TransFlag)
			Else
				Return dx_DrawExtendGraphF_x64(x1f, y1f, x2f, y2, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraphF")> _
		Shared Function dx_DrawRotaGraphF_x86(xf As Single, yf As Single, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraphF")> _
		Shared Function dx_DrawRotaGraphF_x64(xf As Single, yf As Single, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraphF(xf As Single, yf As Single, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraphF_x86(xf, yf, ExRate, Angle, GrHandle, TransFlag, _
					[FALSE])
			Else
				Return dx_DrawRotaGraphF_x64(xf, yf, ExRate, Angle, GrHandle, TransFlag, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraphF(xf As Single, yf As Single, ExRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraphF_x86(xf, yf, ExRate, Angle, GrHandle, TransFlag, _
					TurnFlag)
			Else
				Return dx_DrawRotaGraphF_x64(xf, yf, ExRate, Angle, GrHandle, TransFlag, _
					TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph2F")> _
		Shared Function dx_DrawRotaGraph2F_x86(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph2F")> _
		Shared Function dx_DrawRotaGraph2F_x64(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph2F(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph2F_x86(xf, yf, cxf, cyf, ExtRate, Angle, _
					GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawRotaGraph2F_x64(xf, yf, cxf, cyf, ExtRate, Angle, _
					GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph2F(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph2F_x86(xf, yf, cxf, cyf, ExtRate, Angle, _
					GrHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRotaGraph2F_x64(xf, yf, cxf, cyf, ExtRate, Angle, _
					GrHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph3F")> _
		Shared Function dx_DrawRotaGraph3F_x86(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph3F")> _
		Shared Function dx_DrawRotaGraph3F_x64(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph3F(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3F_x86(xf, yf, cxf, cyf, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawRotaGraph3F_x64(xf, yf, cxf, cyf, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph3F(xf As Single, yf As Single, cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3F_x86(xf, yf, cxf, cyf, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRotaGraph3F_x64(xf, yf, cxf, cyf, ExtRateX, ExtRateY, _
					Angle, GrHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawModiGraphF")> _
		Shared Function dx_DrawModiGraphF_x86(x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, y3 As Single, _
			x4 As Single, y4 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawModiGraphF")> _
		Shared Function dx_DrawModiGraphF_x64(x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, y3 As Single, _
			x4 As Single, y4 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawModiGraphF(x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, y3 As Single, _
			x4 As Single, y4 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawModiGraphF_x86(x1, y1, x2, y2, x3, y3, _
					x4, y4, GrHandle, TransFlag)
			Else
				Return dx_DrawModiGraphF_x64(x1, y1, x2, y2, x3, y3, _
					x4, y4, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTurnGraphF")> _
		Shared Function dx_DrawTurnGraphF_x86(xf As Single, yf As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTurnGraphF")> _
		Shared Function dx_DrawTurnGraphF_x64(xf As Single, yf As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawTurnGraphF(xf As Single, yf As Single, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTurnGraphF_x86(xf, yf, GrHandle, TransFlag)
			Else
				Return dx_DrawTurnGraphF_x64(xf, yf, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTile")> _
		Shared Function dx_DrawTile_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Tx As Integer, Ty As Integer, _
			ExtRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTile")> _
		Shared Function dx_DrawTile_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Tx As Integer, Ty As Integer, _
			ExtRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawTile(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Tx As Integer, Ty As Integer, _
			ExtRate As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTile_x86(x1, y1, x2, y2, Tx, Ty, _
					ExtRate, Angle, GrHandle, TransFlag)
			Else
				Return dx_DrawTile_x64(x1, y1, x2, y2, Tx, Ty, _
					ExtRate, Angle, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectGraph")> _
		Shared Function dx_DrawRectGraph_x86(DestX As Integer, DestY As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectGraph")> _
		Shared Function dx_DrawRectGraph_x64(DestX As Integer, DestY As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectGraph(DestX As Integer, DestY As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectGraph_x86(DestX, DestY, SrcX, SrcY, Width, Height, _
					GraphHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRectGraph_x64(DestX, DestY, SrcX, SrcY, Width, Height, _
					GraphHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectExtendGraph")> _
		Shared Function dx_DrawRectExtendGraph_x86(DestX1 As Integer, DestY1 As Integer, DestX2 As Integer, DestY2 As Integer, SrcX As Integer, SrcY As Integer, _
			SrcWidth As Integer, SrcHeight As Integer, GraphHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectExtendGraph")> _
		Shared Function dx_DrawRectExtendGraph_x64(DestX1 As Integer, DestY1 As Integer, DestX2 As Integer, DestY2 As Integer, SrcX As Integer, SrcY As Integer, _
			SrcWidth As Integer, SrcHeight As Integer, GraphHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectExtendGraph(DestX1 As Integer, DestY1 As Integer, DestX2 As Integer, DestY2 As Integer, SrcX As Integer, SrcY As Integer, _
			SrcWidth As Integer, SrcHeight As Integer, GraphHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectExtendGraph_x86(DestX1, DestY1, DestX2, DestY2, SrcX, SrcY, _
					SrcWidth, SrcHeight, GraphHandle, TransFlag)
			Else
				Return dx_DrawRectExtendGraph_x64(DestX1, DestY1, DestX2, DestY2, SrcX, SrcY, _
					SrcWidth, SrcHeight, GraphHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectRotaGraph")> _
		Shared Function dx_DrawRectRotaGraph_x86(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectRotaGraph")> _
		Shared Function dx_DrawRectRotaGraph_x64(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectRotaGraph(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectRotaGraph_x86(x, y, SrcX, SrcY, Width, Height, _
					ExtRate, Angle, GraphHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRectRotaGraph_x64(x, y, SrcX, SrcY, Width, Height, _
					ExtRate, Angle, GraphHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectRotaGraph2")> _
		Shared Function dx_DrawRectRotaGraph2_x86(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectRotaGraph2")> _
		Shared Function dx_DrawRectRotaGraph2_x64(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectRotaGraph2(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectRotaGraph2_x86(x, y, SrcX, SrcY, Width, Height, _
					cx, cy, ExtRate, Angle, GraphHandle, TransFlag, _
					TurnFlag)
			Else
				Return dx_DrawRectRotaGraph2_x64(x, y, SrcX, SrcY, Width, Height, _
					cx, cy, ExtRate, Angle, GraphHandle, TransFlag, _
					TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectRotaGraph3")> _
		Shared Function dx_DrawRectRotaGraph3_x86(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, Angle As Double, GraphHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectRotaGraph3")> _
		Shared Function dx_DrawRectRotaGraph3_x64(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, Angle As Double, GraphHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectRotaGraph3(x As Integer, y As Integer, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, Angle As Double, GraphHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectRotaGraph3_x86(x, y, SrcX, SrcY, Width, Height, _
					cx, cy, ExtRateX, ExtRateY, Angle, GraphHandle, _
					TransFlag, TurnFlag)
			Else
				Return dx_DrawRectRotaGraph3_x64(x, y, SrcX, SrcY, Width, Height, _
					cx, cy, ExtRateX, ExtRateY, Angle, GraphHandle, _
					TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectGraphF")> _
		Shared Function dx_DrawRectGraphF_x86(DestX As Single, DestY As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectGraphF")> _
		Shared Function dx_DrawRectGraphF_x64(DestX As Single, DestY As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectGraphF(DestX As Single, DestY As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectGraphF_x86(DestX, DestY, SrcX, SrcY, Width, Height, _
					GraphHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRectGraphF_x64(DestX, DestY, SrcX, SrcY, Width, Height, _
					GraphHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectExtendGraphF")> _
		Shared Function dx_DrawRectExtendGraphF_x86(DestX1 As Single, DestY1 As Single, DestX2 As Single, DestY2 As Single, SrcX As Integer, SrcY As Integer, _
			SrcWidth As Integer, SrcHeight As Integer, GraphHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectExtendGraphF")> _
		Shared Function dx_DrawRectExtendGraphF_x64(DestX1 As Single, DestY1 As Single, DestX2 As Single, DestY2 As Single, SrcX As Integer, SrcY As Integer, _
			SrcWidth As Integer, SrcHeight As Integer, GraphHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectExtendGraphF(DestX1 As Single, DestY1 As Single, DestX2 As Single, DestY2 As Single, SrcX As Integer, SrcY As Integer, _
			SrcWidth As Integer, SrcHeight As Integer, GraphHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectExtendGraphF_x86(DestX1, DestY1, DestX2, DestY2, SrcX, SrcY, _
					SrcWidth, SrcHeight, GraphHandle, TransFlag)
			Else
				Return dx_DrawRectExtendGraphF_x64(DestX1, DestY1, DestX2, DestY2, SrcX, SrcY, _
					SrcWidth, SrcHeight, GraphHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectRotaGraphF")> _
		Shared Function dx_DrawRectRotaGraphF_x86(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectRotaGraphF")> _
		Shared Function dx_DrawRectRotaGraphF_x64(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectRotaGraphF(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectRotaGraphF_x86(x, y, SrcX, SrcY, Width, Height, _
					ExtRate, Angle, GraphHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRectRotaGraphF_x64(x, y, SrcX, SrcY, Width, Height, _
					ExtRate, Angle, GraphHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectRotaGraph2F")> _
		Shared Function dx_DrawRectRotaGraph2F_x86(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectRotaGraph2F")> _
		Shared Function dx_DrawRectRotaGraph2F_x64(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectRotaGraph2F(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cxf As Single, cyf As Single, ExtRate As Double, Angle As Double, GraphHandle As Integer, TransFlag As Integer, _
			TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectRotaGraph2F_x86(x, y, SrcX, SrcY, Width, Height, _
					cxf, cyf, ExtRate, Angle, GraphHandle, TransFlag, _
					TurnFlag)
			Else
				Return dx_DrawRectRotaGraph2F_x64(x, y, SrcX, SrcY, Width, Height, _
					cxf, cyf, ExtRate, Angle, GraphHandle, TransFlag, _
					TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRectRotaGraph3F")> _
		Shared Function dx_DrawRectRotaGraph3F_x86(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, Angle As Double, GraphHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRectRotaGraph3F")> _
		Shared Function dx_DrawRectRotaGraph3F_x64(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, Angle As Double, GraphHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRectRotaGraph3F(x As Single, y As Single, SrcX As Integer, SrcY As Integer, Width As Integer, Height As Integer, _
			cxf As Single, cyf As Single, ExtRateX As Double, ExtRateY As Double, Angle As Double, GraphHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRectRotaGraph3F_x86(x, y, SrcX, SrcY, Width, Height, _
					cxf, cyf, ExtRateX, ExtRateY, Angle, GraphHandle, _
					TransFlag, TurnFlag)
			Else
				Return dx_DrawRectRotaGraph3F_x64(x, y, SrcX, SrcY, Width, Height, _
					cxf, cyf, ExtRateX, ExtRateY, Angle, GraphHandle, _
					TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawBlendGraph")> _
		Shared Function dx_DrawBlendGraph_x86(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer, BlendGraph As Integer, BorderParam As Integer, _
			BorderRange As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawBlendGraph")> _
		Shared Function dx_DrawBlendGraph_x64(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer, BlendGraph As Integer, BorderParam As Integer, _
			BorderRange As Integer) As Integer
		End Function
		Public Shared Function DrawBlendGraph(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer, BlendGraph As Integer, BorderParam As Integer, _
			BorderRange As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawBlendGraph_x86(x, y, GrHandle, TransFlag, BlendGraph, BorderParam, _
					BorderRange)
			Else
				Return dx_DrawBlendGraph_x64(x, y, GrHandle, TransFlag, BlendGraph, BorderParam, _
					BorderRange)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawBlendGraphPos")> _
		Shared Function dx_DrawBlendGraphPos_x86(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer, bx As Integer, by As Integer, _
			BlendGraph As Integer, BorderParam As Integer, BorderRange As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawBlendGraphPos")> _
		Shared Function dx_DrawBlendGraphPos_x64(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer, bx As Integer, by As Integer, _
			BlendGraph As Integer, BorderParam As Integer, BorderRange As Integer) As Integer
		End Function
		Public Shared Function DrawBlendGraphPos(x As Integer, y As Integer, GrHandle As Integer, TransFlag As Integer, bx As Integer, by As Integer, _
			BlendGraph As Integer, BorderParam As Integer, BorderRange As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawBlendGraphPos_x86(x, y, GrHandle, TransFlag, bx, by, _
					BlendGraph, BorderParam, BorderRange)
			Else
				Return dx_DrawBlendGraphPos_x64(x, y, GrHandle, TransFlag, bx, by, _
					BlendGraph, BorderParam, BorderRange)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCircleGauge")> _
		Shared Function dx_DrawCircleGauge_x86(CenterX As Integer, CenterY As Integer, Percent As Double, GrHandle As Integer, StartPercent As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCircleGauge")> _
		Shared Function dx_DrawCircleGauge_x64(CenterX As Integer, CenterY As Integer, Percent As Double, GrHandle As Integer, StartPercent As Double) As Integer
		End Function
		Public Shared Function DrawCircleGauge(CenterX As Integer, CenterY As Integer, Percent As Double, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCircleGauge_x86(CenterX, CenterY, Percent, GrHandle, 0.0)
			Else
				Return dx_DrawCircleGauge_x64(CenterX, CenterY, Percent, GrHandle, 0.0)
			End If
		End Function
		Public Shared Function DrawCircleGauge(CenterX As Integer, CenterY As Integer, Percent As Double, GrHandle As Integer, StartPercent As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCircleGauge_x86(CenterX, CenterY, Percent, GrHandle, StartPercent)
			Else
				Return dx_DrawCircleGauge_x64(CenterX, CenterY, Percent, GrHandle, StartPercent)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawGraphToZBuffer")> _
		Shared Function dx_DrawGraphToZBuffer_x86(X As Integer, Y As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawGraphToZBuffer")> _
		Shared Function dx_DrawGraphToZBuffer_x64(X As Integer, Y As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawGraphToZBuffer(X As Integer, Y As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawGraphToZBuffer_x86(X, Y, GrHandle, WriteZMode)
			Else
				Return dx_DrawGraphToZBuffer_x64(X, Y, GrHandle, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTurnGraphToZBuffer")> _
		Shared Function dx_DrawTurnGraphToZBuffer_x86(x As Integer, y As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTurnGraphToZBuffer")> _
		Shared Function dx_DrawTurnGraphToZBuffer_x64(x As Integer, y As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawTurnGraphToZBuffer(x As Integer, y As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTurnGraphToZBuffer_x86(x, y, GrHandle, WriteZMode)
			Else
				Return dx_DrawTurnGraphToZBuffer_x64(x, y, GrHandle, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendGraphToZBuffer")> _
		Shared Function dx_DrawExtendGraphToZBuffer_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendGraphToZBuffer")> _
		Shared Function dx_DrawExtendGraphToZBuffer_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawExtendGraphToZBuffer(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendGraphToZBuffer_x86(x1, y1, x2, y2, GrHandle, WriteZMode)
			Else
				Return dx_DrawExtendGraphToZBuffer_x64(x1, y1, x2, y2, GrHandle, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraphToZBuffer")> _
		Shared Function dx_DrawRotaGraphToZBuffer_x86(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, WriteZMode As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraphToZBuffer")> _
		Shared Function dx_DrawRotaGraphToZBuffer_x64(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, WriteZMode As Integer, _
			TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraphToZBuffer(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraphToZBuffer_x86(x, y, ExRate, Angle, GrHandle, WriteZMode, _
					[FALSE])
			Else
				Return dx_DrawRotaGraphToZBuffer_x64(x, y, ExRate, Angle, GrHandle, WriteZMode, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraphToZBuffer(x As Integer, y As Integer, ExRate As Double, Angle As Double, GrHandle As Integer, WriteZMode As Integer, _
			TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraphToZBuffer_x86(x, y, ExRate, Angle, GrHandle, WriteZMode, _
					TurnFlag)
			Else
				Return dx_DrawRotaGraphToZBuffer_x64(x, y, ExRate, Angle, GrHandle, WriteZMode, _
					TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph2ToZBuffer")> _
		Shared Function dx_DrawRotaGraph2ToZBuffer_x86(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, WriteZMode As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph2ToZBuffer")> _
		Shared Function dx_DrawRotaGraph2ToZBuffer_x64(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, WriteZMode As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph2ToZBuffer(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph2ToZBuffer_x86(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, WriteZMode, [FALSE])
			Else
				Return dx_DrawRotaGraph2ToZBuffer_x64(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, WriteZMode, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph2ToZBuffer(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRate As Double, Angle As Double, _
			GrHandle As Integer, WriteZMode As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph2ToZBuffer_x86(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, WriteZMode, TurnFlag)
			Else
				Return dx_DrawRotaGraph2ToZBuffer_x64(x, y, cx, cy, ExtRate, Angle, _
					GrHandle, WriteZMode, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph3ToZBuffer")> _
		Shared Function dx_DrawRotaGraph3ToZBuffer_x86(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, WriteZMode As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph3ToZBuffer")> _
		Shared Function dx_DrawRotaGraph3ToZBuffer_x64(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, WriteZMode As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph3ToZBuffer(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3ToZBuffer_x86(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, WriteZMode, [FALSE])
			Else
				Return dx_DrawRotaGraph3ToZBuffer_x64(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, WriteZMode, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph3ToZBuffer(x As Integer, y As Integer, cx As Integer, cy As Integer, ExtRateX As Double, ExtRateY As Double, _
			Angle As Double, GrHandle As Integer, WriteZMode As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3ToZBuffer_x86(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, WriteZMode, TurnFlag)
			Else
				Return dx_DrawRotaGraph3ToZBuffer_x64(x, y, cx, cy, ExtRateX, ExtRateY, _
					Angle, GrHandle, WriteZMode, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawModiGraphToZBuffer")> _
		Shared Function dx_DrawModiGraphToZBuffer_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawModiGraphToZBuffer")> _
		Shared Function dx_DrawModiGraphToZBuffer_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawModiGraphToZBuffer(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, GrHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawModiGraphToZBuffer_x86(x1, y1, x2, y2, x3, y3, _
					x4, y4, GrHandle, WriteZMode)
			Else
				Return dx_DrawModiGraphToZBuffer_x64(x1, y1, x2, y2, x3, y3, _
					x4, y4, GrHandle, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawBoxToZBuffer")> _
		Shared Function dx_DrawBoxToZBuffer_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawBoxToZBuffer")> _
		Shared Function dx_DrawBoxToZBuffer_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawBoxToZBuffer(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawBoxToZBuffer_x86(x1, y1, x2, y2, FillFlag, WriteZMode)
			Else
				Return dx_DrawBoxToZBuffer_x64(x1, y1, x2, y2, FillFlag, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawCircleToZBuffer")> _
		Shared Function dx_DrawCircleToZBuffer_x86(x As Integer, y As Integer, r As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawCircleToZBuffer")> _
		Shared Function dx_DrawCircleToZBuffer_x64(x As Integer, y As Integer, r As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawCircleToZBuffer(x As Integer, y As Integer, r As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawCircleToZBuffer_x86(x, y, r, FillFlag, WriteZMode)
			Else
				Return dx_DrawCircleToZBuffer_x64(x, y, r, FillFlag, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawTriangleToZBuffer")> _
		Shared Function dx_DrawTriangleToZBuffer_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawTriangleToZBuffer")> _
		Shared Function dx_DrawTriangleToZBuffer_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawTriangleToZBuffer(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			FillFlag As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawTriangleToZBuffer_x86(x1, y1, x2, y2, x3, y3, _
					FillFlag, WriteZMode)
			Else
				Return dx_DrawTriangleToZBuffer_x64(x1, y1, x2, y2, x3, y3, _
					FillFlag, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawQuadrangleToZBuffer")> _
		Shared Function dx_DrawQuadrangleToZBuffer_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawQuadrangleToZBuffer")> _
		Shared Function dx_DrawQuadrangleToZBuffer_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawQuadrangleToZBuffer(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, x3 As Integer, y3 As Integer, _
			x4 As Integer, y4 As Integer, FillFlag As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawQuadrangleToZBuffer_x86(x1, y1, x2, y2, x3, y3, _
					x4, y4, FillFlag, WriteZMode)
			Else
				Return dx_DrawQuadrangleToZBuffer_x64(x1, y1, x2, y2, x3, y3, _
					x4, y4, FillFlag, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRoundRectToZBuffer")> _
		Shared Function dx_DrawRoundRectToZBuffer_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, rx As Integer, ry As Integer, _
			FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRoundRectToZBuffer")> _
		Shared Function dx_DrawRoundRectToZBuffer_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, rx As Integer, ry As Integer, _
			FillFlag As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawRoundRectToZBuffer(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, rx As Integer, ry As Integer, _
			FillFlag As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRoundRectToZBuffer_x86(x1, y1, x2, y2, rx, ry, _
					FillFlag, WriteZMode)
			Else
				Return dx_DrawRoundRectToZBuffer_x64(x1, y1, x2, y2, rx, ry, _
					FillFlag, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon")> _
		Shared Function dx_DrawPolygon_x86(ByRef Vertex As VERTEX, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer, UVScaling As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon")> _
		Shared Function dx_DrawPolygon_x64(ByRef Vertex As VERTEX, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer, UVScaling As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon(ByRef Vertex As VERTEX, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon_x86(Vertex, PolygonNum, GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawPolygon_x64(Vertex, PolygonNum, GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawPolygon(ByRef Vertex As VERTEX, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer, UVScaling As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon_x86(Vertex, PolygonNum, GrHandle, TransFlag, UVScaling)
			Else
				Return dx_DrawPolygon_x64(Vertex, PolygonNum, GrHandle, TransFlag, UVScaling)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon2D")> _
		Shared Function dx_DrawPolygon2D_x86(ByRef Vertex As VERTEX2D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon2D")> _
		Shared Function dx_DrawPolygon2D_x64(ByRef Vertex As VERTEX2D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon2D(ByRef Vertex As VERTEX2D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon2D_x86(Vertex, PolygonNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygon2D_x64(Vertex, PolygonNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon3D")> _
		Shared Function dx_DrawPolygon3D_x86(ByRef Vertex As VERTEX3D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon3D")> _
		Shared Function dx_DrawPolygon3D_x64(ByRef Vertex As VERTEX3D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon3D(ByRef Vertex As VERTEX3D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon3D_x86(Vertex, PolygonNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygon3D_x64(Vertex, PolygonNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed2D")> _
		Shared Function dx_DrawPolygonIndexed2D_x86(ByRef Vertex As VERTEX2D, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed2D")> _
		Shared Function dx_DrawPolygonIndexed2D_x64(ByRef Vertex As VERTEX2D, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed2D(ByRef Vertex As VERTEX2D, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed2D_x86(Vertex, VertexNum, Indices, PolygonNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygonIndexed2D_x64(Vertex, VertexNum, Indices, PolygonNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed3D")> _
		Shared Function dx_DrawPolygonIndexed3D_x86(ByRef Vertex As VERTEX3D, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed3D")> _
		Shared Function dx_DrawPolygonIndexed3D_x64(ByRef Vertex As VERTEX3D, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed3D(ByRef Vertex As VERTEX3D, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed3D_x86(Vertex, VertexNum, Indices, PolygonNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygonIndexed3D_x64(Vertex, VertexNum, Indices, PolygonNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed3DBase")> _
		Shared Function dx_DrawPolygonIndexed3DBase_x86(ByRef Vertex As VERTEX_3D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed3DBase")> _
		Shared Function dx_DrawPolygonIndexed3DBase_x64(ByRef Vertex As VERTEX_3D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed3DBase(ByRef Vertex As VERTEX_3D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed3DBase_x86(Vertex, VertexNum, Indices, IndexNum, PrimitiveType, GrHandle, _
					TransFlag)
			Else
				Return dx_DrawPolygonIndexed3DBase_x64(Vertex, VertexNum, Indices, IndexNum, PrimitiveType, GrHandle, _
					TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon3DBase")> _
		Shared Function dx_DrawPolygon3DBase_x86(ByRef Vertex As VERTEX_3D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon3DBase")> _
		Shared Function dx_DrawPolygon3DBase_x64(ByRef Vertex As VERTEX_3D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon3DBase(ByRef Vertex As VERTEX_3D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon3DBase_x86(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygon3DBase_x64(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon3D_2")> _
		Shared Function dx_DrawPolygon3D_2_x86(ByRef Vertex As VERTEX_3D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon3D_2")> _
		Shared Function dx_DrawPolygon3D_2_x64(ByRef Vertex As VERTEX_3D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon3D(ByRef Vertex As VERTEX_3D, PolygonNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon3D_2_x86(Vertex, PolygonNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygon3D_2_x64(Vertex, PolygonNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonBase")> _
		Shared Function dx_DrawPolygonBase_x86(ByRef Vertex As VERTEX, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer, UVScaling As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonBase")> _
		Shared Function dx_DrawPolygonBase_x64(ByRef Vertex As VERTEX, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer, UVScaling As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonBase(ByRef Vertex As VERTEX, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonBase_x86(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawPolygonBase_x64(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawPolygonBase(ByRef Vertex As VERTEX, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer, UVScaling As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonBase_x86(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag, UVScaling)
			Else
				Return dx_DrawPolygonBase_x64(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag, UVScaling)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive2D")> _
		Shared Function dx_DrawPrimitive2D_x86(ByRef Vertex As VERTEX2D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive2D")> _
		Shared Function dx_DrawPrimitive2D_x64(ByRef Vertex As VERTEX2D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive2D(ByRef Vertex As VERTEX2D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive2D_x86(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag)
			Else
				Return dx_DrawPrimitive2D_x64(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive3D")> _
		Shared Function dx_DrawPrimitive3D_x86(ByRef Vertex As VERTEX3D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive3D")> _
		Shared Function dx_DrawPrimitive3D_x64(ByRef Vertex As VERTEX3D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive3D(ByRef Vertex As VERTEX3D, VertexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive3D_x86(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag)
			Else
				Return dx_DrawPrimitive3D_x64(Vertex, VertexNum, PrimitiveType, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed2D")> _
		Shared Function dx_DrawPrimitiveIndexed2D_x86(ByRef Vertex As VERTEX2D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed2D")> _
		Shared Function dx_DrawPrimitiveIndexed2D_x64(ByRef Vertex As VERTEX2D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed2D(ByRef Vertex As VERTEX2D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed2D_x86(Vertex, VertexNum, Indices, IndexNum, PrimitiveType, GrHandle, _
					TransFlag)
			Else
				Return dx_DrawPrimitiveIndexed2D_x64(Vertex, VertexNum, Indices, IndexNum, PrimitiveType, GrHandle, _
					TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed3D")> _
		Shared Function dx_DrawPrimitiveIndexed3D_x86(ByRef Vertex As VERTEX3D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed3D")> _
		Shared Function dx_DrawPrimitiveIndexed3D_x64(ByRef Vertex As VERTEX3D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed3D(ByRef Vertex As VERTEX3D, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer, GrHandle As Integer, _
			TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed3D_x86(Vertex, VertexNum, Indices, IndexNum, PrimitiveType, GrHandle, _
					TransFlag)
			Else
				Return dx_DrawPrimitiveIndexed3D_x64(Vertex, VertexNum, Indices, IndexNum, PrimitiveType, GrHandle, _
					TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon3D_UseVertexBuffer")> _
		Shared Function dx_DrawPolygon3D_UseVertexBuffer_x86(VertexBufHandle As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon3D_UseVertexBuffer")> _
		Shared Function dx_DrawPolygon3D_UseVertexBuffer_x64(VertexBufHandle As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon3D_UseVertexBuffer(VertexBufHandle As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon3D_UseVertexBuffer_x86(VertexBufHandle, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygon3D_UseVertexBuffer_x64(VertexBufHandle, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive3D_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitive3D_UseVertexBuffer_x86(VertexBufHandle As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive3D_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitive3D_UseVertexBuffer_x64(VertexBufHandle As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive3D_UseVertexBuffer(VertexBufHandle As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive3D_UseVertexBuffer_x86(VertexBufHandle, PrimitiveType, GrHandle, TransFlag)
			Else
				Return dx_DrawPrimitive3D_UseVertexBuffer_x64(VertexBufHandle, PrimitiveType, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive3D_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitive3D_UseVertexBuffer2_x86(VertexBufHandle As Integer, PrimitiveType As Integer, StartVertex As Integer, UseVertexNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive3D_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitive3D_UseVertexBuffer2_x64(VertexBufHandle As Integer, PrimitiveType As Integer, StartVertex As Integer, UseVertexNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive3D_UseVertexBuffer2(VertexBufHandle As Integer, PrimitiveType As Integer, StartVertex As Integer, UseVertexNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive3D_UseVertexBuffer2_x86(VertexBufHandle, PrimitiveType, StartVertex, UseVertexNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPrimitive3D_UseVertexBuffer2_x64(VertexBufHandle, PrimitiveType, StartVertex, UseVertexNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed3D_UseVertexBuffer")> _
		Shared Function dx_DrawPolygonIndexed3D_UseVertexBuffer_x86(VertexBufHandle As Integer, IndexBufHandle As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed3D_UseVertexBuffer")> _
		Shared Function dx_DrawPolygonIndexed3D_UseVertexBuffer_x64(VertexBufHandle As Integer, IndexBufHandle As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed3D_UseVertexBuffer(VertexBufHandle As Integer, IndexBufHandle As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed3D_UseVertexBuffer_x86(VertexBufHandle, IndexBufHandle, GrHandle, TransFlag)
			Else
				Return dx_DrawPolygonIndexed3D_UseVertexBuffer_x64(VertexBufHandle, IndexBufHandle, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed3D_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitiveIndexed3D_UseVertexBuffer_x86(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed3D_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitiveIndexed3D_UseVertexBuffer_x64(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed3D_UseVertexBuffer(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed3D_UseVertexBuffer_x86(VertexBufHandle, IndexBufHandle, PrimitiveType, GrHandle, TransFlag)
			Else
				Return dx_DrawPrimitiveIndexed3D_UseVertexBuffer_x64(VertexBufHandle, IndexBufHandle, PrimitiveType, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed3D_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitiveIndexed3D_UseVertexBuffer2_x86(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, BaseVertex As Integer, StartVertex As Integer, UseVertexNum As Integer, _
			StartIndex As Integer, UseIndexNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed3D_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitiveIndexed3D_UseVertexBuffer2_x64(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, BaseVertex As Integer, StartVertex As Integer, UseVertexNum As Integer, _
			StartIndex As Integer, UseIndexNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed3D_UseVertexBuffer2(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, BaseVertex As Integer, StartVertex As Integer, UseVertexNum As Integer, _
			StartIndex As Integer, UseIndexNum As Integer, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed3D_UseVertexBuffer2_x86(VertexBufHandle, IndexBufHandle, PrimitiveType, BaseVertex, StartVertex, UseVertexNum, _
					StartIndex, UseIndexNum, GrHandle, TransFlag)
			Else
				Return dx_DrawPrimitiveIndexed3D_UseVertexBuffer2_x64(VertexBufHandle, IndexBufHandle, PrimitiveType, BaseVertex, StartVertex, UseVertexNum, _
					StartIndex, UseIndexNum, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawGraph3D")> _
		Shared Function dx_DrawGraph3D_x86(x As Single, y As Single, z As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawGraph3D")> _
		Shared Function dx_DrawGraph3D_x64(x As Single, y As Single, z As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawGraph3D(x As Single, y As Single, z As Single, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawGraph3D_x86(x, y, z, GrHandle, TransFlag)
			Else
				Return dx_DrawGraph3D_x64(x, y, z, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendGraph3D")> _
		Shared Function dx_DrawExtendGraph3D_x86(x As Single, y As Single, z As Single, ExRateX As Double, ExRateY As Double, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendGraph3D")> _
		Shared Function dx_DrawExtendGraph3D_x64(x As Single, y As Single, z As Single, ExRateX As Double, ExRateY As Double, GrHandle As Integer, _
			TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawExtendGraph3D(x As Single, y As Single, z As Single, ExRateX As Double, ExRateY As Double, GrHandle As Integer, _
			TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendGraph3D_x86(x, y, z, ExRateX, ExRateY, GrHandle, _
					TransFlag)
			Else
				Return dx_DrawExtendGraph3D_x64(x, y, z, ExRateX, ExRateY, GrHandle, _
					TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRotaGraph3D")> _
		Shared Function dx_DrawRotaGraph3D_x86(x As Single, y As Single, z As Single, ExRate As Double, Angle As Double, GrHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRotaGraph3D")> _
		Shared Function dx_DrawRotaGraph3D_x64(x As Single, y As Single, z As Single, ExRate As Double, Angle As Double, GrHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRotaGraph3D(x As Single, y As Single, z As Single, ExRate As Double, Angle As Double, GrHandle As Integer, _
			TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3D_x86(x, y, z, ExRate, Angle, GrHandle, _
					TransFlag, [FALSE])
			Else
				Return dx_DrawRotaGraph3D_x64(x, y, z, ExRate, Angle, GrHandle, _
					TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawRotaGraph3D(x As Single, y As Single, z As Single, ExRate As Double, Angle As Double, GrHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRotaGraph3D_x86(x, y, z, ExRate, Angle, GrHandle, _
					TransFlag, TurnFlag)
			Else
				Return dx_DrawRotaGraph3D_x64(x, y, z, ExRate, Angle, GrHandle, _
					TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawRota2Graph3D")> _
		Shared Function dx_DrawRota2Graph3D_x86(x As Single, y As Single, z As Single, cx As Single, cy As Single, ExtRateX As Double, _
			ExtRateY As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawRota2Graph3D")> _
		Shared Function dx_DrawRota2Graph3D_x64(x As Single, y As Single, z As Single, cx As Single, cy As Single, ExtRateX As Double, _
			ExtRateY As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawRota2Graph3D(x As Single, y As Single, z As Single, cx As Single, cy As Single, ExtRateX As Double, _
			ExtRateY As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRota2Graph3D_x86(x, y, z, cx, cy, ExtRateX, _
					ExtRateY, Angle, GrHandle, TransFlag, [FALSE])
			Else
				Return dx_DrawRota2Graph3D_x64(x, y, z, cx, cy, ExtRateX, _
					ExtRateY, Angle, GrHandle, TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawRota2Graph3D(x As Single, y As Single, z As Single, cx As Single, cy As Single, ExtRateX As Double, _
			ExtRateY As Double, Angle As Double, GrHandle As Integer, TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawRota2Graph3D_x86(x, y, z, cx, cy, ExtRateX, _
					ExtRateY, Angle, GrHandle, TransFlag, TurnFlag)
			Else
				Return dx_DrawRota2Graph3D_x64(x, y, z, cx, cy, ExtRateX, _
					ExtRateY, Angle, GrHandle, TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawModiBillboard3D")> _
		Shared Function dx_DrawModiBillboard3D_x86(Pos As VECTOR, x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, _
			y3 As Single, x4 As Single, y4 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawModiBillboard3D")> _
		Shared Function dx_DrawModiBillboard3D_x64(Pos As VECTOR, x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, _
			y3 As Single, x4 As Single, y4 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
		End Function
		Public Shared Function DrawModiBillboard3D(Pos As VECTOR, x1 As Single, y1 As Single, x2 As Single, y2 As Single, x3 As Single, _
			y3 As Single, x4 As Single, y4 As Single, GrHandle As Integer, TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawModiBillboard3D_x86(Pos, x1, y1, x2, y2, x3, _
					y3, x4, y4, GrHandle, TransFlag)
			Else
				Return dx_DrawModiBillboard3D_x64(Pos, x1, y1, x2, y2, x3, _
					y3, x4, y4, GrHandle, TransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawBillboard3D")> _
		Shared Function dx_DrawBillboard3D_x86(Pos As VECTOR, cx As Single, cy As Single, Size As Single, Angle As Single, GrHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawBillboard3D")> _
		Shared Function dx_DrawBillboard3D_x64(Pos As VECTOR, cx As Single, cy As Single, Size As Single, Angle As Single, GrHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
		End Function
		Public Shared Function DrawBillboard3D(Pos As VECTOR, cx As Single, cy As Single, Size As Single, Angle As Single, GrHandle As Integer, _
			TransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawBillboard3D_x86(Pos, cx, cy, Size, Angle, GrHandle, _
					TransFlag, [FALSE])
			Else
				Return dx_DrawBillboard3D_x64(Pos, cx, cy, Size, Angle, GrHandle, _
					TransFlag, [FALSE])
			End If
		End Function
		Public Shared Function DrawBillboard3D(Pos As VECTOR, cx As Single, cy As Single, Size As Single, Angle As Single, GrHandle As Integer, _
			TransFlag As Integer, TurnFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawBillboard3D_x86(Pos, cx, cy, Size, Angle, GrHandle, _
					TransFlag, TurnFlag)
			Else
				Return dx_DrawBillboard3D_x64(Pos, cx, cy, Size, Angle, GrHandle, _
					TransFlag, TurnFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawMode")> _
		Shared Function dx_SetDrawMode_x86(DrawMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawMode")> _
		Shared Function dx_SetDrawMode_x64(DrawMode As Integer) As Integer
		End Function
		Public Shared Function SetDrawMode(DrawMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawMode_x86(DrawMode)
			Else
				Return dx_SetDrawMode_x64(DrawMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawMode")> _
		Shared Function dx_GetDrawMode_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawMode")> _
		Shared Function dx_GetDrawMode_x64() As Integer
		End Function
		Public Shared Function GetDrawMode() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawMode_x86()
			Else
				Return dx_GetDrawMode_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawBlendMode")> _
		Shared Function dx_SetDrawBlendMode_x86(BlendMode As Integer, BlendParam As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawBlendMode")> _
		Shared Function dx_SetDrawBlendMode_x64(BlendMode As Integer, BlendParam As Integer) As Integer
		End Function
		Public Shared Function SetDrawBlendMode(BlendMode As Integer, BlendParam As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawBlendMode_x86(BlendMode, BlendParam)
			Else
				Return dx_SetDrawBlendMode_x64(BlendMode, BlendParam)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawBlendMode")> _
		Shared Function dx_GetDrawBlendMode_x86(ByRef BlendMode As Integer, ByRef BlendParam As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawBlendMode")> _
		Shared Function dx_GetDrawBlendMode_x64(ByRef BlendMode As Integer, ByRef BlendParam As Integer) As Integer
		End Function
		Public Shared Function GetDrawBlendMode(ByRef BlendMode As Integer, ByRef BlendParam As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawBlendMode_x86(BlendMode, BlendParam)
			Else
				Return dx_GetDrawBlendMode_x64(BlendMode, BlendParam)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawAlphaTest")> _
		Shared Function dx_SetDrawAlphaTest_x86(TestMode As Integer, TestParam As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawAlphaTest")> _
		Shared Function dx_SetDrawAlphaTest_x64(TestMode As Integer, TestParam As Integer) As Integer
		End Function
		Public Shared Function SetDrawAlphaTest(TestMode As Integer, TestParam As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawAlphaTest_x86(TestMode, TestParam)
			Else
				Return dx_SetDrawAlphaTest_x64(TestMode, TestParam)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetBlendGraph")> _
		Shared Function dx_SetBlendGraph_x86(BlendGraph As Integer, BorderParam As Integer, BorderRange As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetBlendGraph")> _
		Shared Function dx_SetBlendGraph_x64(BlendGraph As Integer, BorderParam As Integer, BorderRange As Integer) As Integer
		End Function
		Public Shared Function SetBlendGraph(BlendGraph As Integer, BorderParam As Integer, BorderRange As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraph_x86(BlendGraph, BorderParam, BorderRange)
			Else
				Return dx_SetBlendGraph_x64(BlendGraph, BorderParam, BorderRange)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetBlendGraphPosition")> _
		Shared Function dx_SetBlendGraphPosition_x86(x As Integer, y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetBlendGraphPosition")> _
		Shared Function dx_SetBlendGraphPosition_x64(x As Integer, y As Integer) As Integer
		End Function
		Public Shared Function SetBlendGraphPosition(x As Integer, y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBlendGraphPosition_x86(x, y)
			Else
				Return dx_SetBlendGraphPosition_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawBright")> _
		Shared Function dx_SetDrawBright_x86(RedBright As Integer, GreenBright As Integer, BlueBright As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawBright")> _
		Shared Function dx_SetDrawBright_x64(RedBright As Integer, GreenBright As Integer, BlueBright As Integer) As Integer
		End Function
		Public Shared Function SetDrawBright(RedBright As Integer, GreenBright As Integer, BlueBright As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawBright_x86(RedBright, GreenBright, BlueBright)
			Else
				Return dx_SetDrawBright_x64(RedBright, GreenBright, BlueBright)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawBright")> _
		Shared Function dx_GetDrawBright_x86(ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawBright")> _
		Shared Function dx_GetDrawBright_x64(ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		Public Shared Function GetDrawBright(ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawBright_x86(Red, Green, Blue)
			Else
				Return dx_GetDrawBright_x64(Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetIgnoreDrawGraphColor")> _
		Shared Function dx_SetIgnoreDrawGraphColor_x86(EnableFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetIgnoreDrawGraphColor")> _
		Shared Function dx_SetIgnoreDrawGraphColor_x64(EnableFlag As Integer) As Integer
		End Function
		Public Shared Function SetIgnoreDrawGraphColor(EnableFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetIgnoreDrawGraphColor_x86(EnableFlag)
			Else
				Return dx_SetIgnoreDrawGraphColor_x64(EnableFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMaxAnisotropy")> _
		Shared Function dx_SetMaxAnisotropy_x86(MaxAnisotropy As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMaxAnisotropy")> _
		Shared Function dx_SetMaxAnisotropy_x64(MaxAnisotropy As Integer) As Integer
		End Function
		Public Shared Function SetMaxAnisotropy(MaxAnisotropy As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMaxAnisotropy_x86(MaxAnisotropy)
			Else
				Return dx_SetMaxAnisotropy_x64(MaxAnisotropy)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseLarge3DPositionSupport")> _
		Shared Function dx_SetUseLarge3DPositionSupport_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseLarge3DPositionSupport")> _
		Shared Function dx_SetUseLarge3DPositionSupport_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetUseLarge3DPositionSupport(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseLarge3DPositionSupport_x86(UseFlag)
			Else
				Return dx_SetUseLarge3DPositionSupport_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseZBufferFlag")> _
		Shared Function dx_SetUseZBufferFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseZBufferFlag")> _
		Shared Function dx_SetUseZBufferFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseZBufferFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseZBufferFlag_x86(Flag)
			Else
				Return dx_SetUseZBufferFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWriteZBufferFlag")> _
		Shared Function dx_SetWriteZBufferFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWriteZBufferFlag")> _
		Shared Function dx_SetWriteZBufferFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetWriteZBufferFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWriteZBufferFlag_x86(Flag)
			Else
				Return dx_SetWriteZBufferFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetZBufferCmpType")> _
		Shared Function dx_SetZBufferCmpType_x86(CmpType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetZBufferCmpType")> _
		Shared Function dx_SetZBufferCmpType_x64(CmpType As Integer) As Integer
		End Function
		Public Shared Function SetZBufferCmpType(CmpType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetZBufferCmpType_x86(CmpType)
			Else
				Return dx_SetZBufferCmpType_x64(CmpType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetZBias")> _
		Shared Function dx_SetZBias_x86(Bias As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetZBias")> _
		Shared Function dx_SetZBias_x64(Bias As Integer) As Integer
		End Function
		Public Shared Function SetZBias(Bias As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetZBias_x86(Bias)
			Else
				Return dx_SetZBias_x64(Bias)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseZBuffer3D")> _
		Shared Function dx_SetUseZBuffer3D_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseZBuffer3D")> _
		Shared Function dx_SetUseZBuffer3D_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseZBuffer3D(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseZBuffer3D_x86(Flag)
			Else
				Return dx_SetUseZBuffer3D_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWriteZBuffer3D")> _
		Shared Function dx_SetWriteZBuffer3D_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWriteZBuffer3D")> _
		Shared Function dx_SetWriteZBuffer3D_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetWriteZBuffer3D(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWriteZBuffer3D_x86(Flag)
			Else
				Return dx_SetWriteZBuffer3D_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetZBufferCmpType3D")> _
		Shared Function dx_SetZBufferCmpType3D_x86(CmpType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetZBufferCmpType3D")> _
		Shared Function dx_SetZBufferCmpType3D_x64(CmpType As Integer) As Integer
		End Function
		Public Shared Function SetZBufferCmpType3D(CmpType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetZBufferCmpType3D_x86(CmpType)
			Else
				Return dx_SetZBufferCmpType3D_x64(CmpType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetZBias3D")> _
		Shared Function dx_SetZBias3D_x86(Bias As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetZBias3D")> _
		Shared Function dx_SetZBias3D_x64(Bias As Integer) As Integer
		End Function
		Public Shared Function SetZBias3D(Bias As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetZBias3D_x86(Bias)
			Else
				Return dx_SetZBias3D_x64(Bias)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawZ")> _
		Shared Function dx_SetDrawZ_x86(Z As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawZ")> _
		Shared Function dx_SetDrawZ_x64(Z As Single) As Integer
		End Function
		Public Shared Function SetDrawZ(Z As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawZ_x86(Z)
			Else
				Return dx_SetDrawZ_x64(Z)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawArea")> _
		Shared Function dx_SetDrawArea_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawArea")> _
		Shared Function dx_SetDrawArea_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		Public Shared Function SetDrawArea(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawArea_x86(x1, y1, x2, y2)
			Else
				Return dx_SetDrawArea_x64(x1, y1, x2, y2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawArea")> _
		Shared Function dx_GetDrawArea_x86(ByRef Rect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawArea")> _
		Shared Function dx_GetDrawArea_x64(ByRef Rect As RECT) As Integer
		End Function
		Public Shared Function GetDrawArea(ByRef Rect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawArea_x86(Rect)
			Else
				Return dx_GetDrawArea_x64(Rect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawAreaFull")> _
		Shared Function dx_SetDrawAreaFull_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawAreaFull")> _
		Shared Function dx_SetDrawAreaFull_x64() As Integer
		End Function
		Public Shared Function SetDrawAreaFull() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawAreaFull_x86()
			Else
				Return dx_SetDrawAreaFull_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDraw3DScale")> _
		Shared Function dx_SetDraw3DScale_x86(Scale As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDraw3DScale")> _
		Shared Function dx_SetDraw3DScale_x64(Scale As Single) As Integer
		End Function
		Public Shared Function SetDraw3DScale(Scale As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDraw3DScale_x86(Scale)
			Else
				Return dx_SetDraw3DScale_x64(Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_RunRestoreShred")> _
		Shared Function dx_RunRestoreShred_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_RunRestoreShred")> _
		Shared Function dx_RunRestoreShred_x64() As Integer
		End Function
		Public Shared Function RunRestoreShred() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_RunRestoreShred_x86()
			Else
				Return dx_RunRestoreShred_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToWorld")> _
		Shared Function dx_SetTransformToWorld_x86(ByRef Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToWorld")> _
		Shared Function dx_SetTransformToWorld_x64(ByRef Matrix As MATRIX) As Integer
		End Function
		Public Shared Function SetTransformToWorld(ByRef Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToWorld_x86(Matrix)
			Else
				Return dx_SetTransformToWorld_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToWorldD")> _
		Shared Function dx_SetTransformToWorldD_x86(ByRef Matrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToWorldD")> _
		Shared Function dx_SetTransformToWorldD_x64(ByRef Matrix As MATRIX_D) As Integer
		End Function
		Public Shared Function SetTransformToWorldD(ByRef Matrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToWorldD_x86(Matrix)
			Else
				Return dx_SetTransformToWorldD_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToWorldMatrix")> _
		Shared Function dx_GetTransformToWorldMatrix_x86(ByRef MatBuf As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToWorldMatrix")> _
		Shared Function dx_GetTransformToWorldMatrix_x64(ByRef MatBuf As MATRIX) As Integer
		End Function
		Public Shared Function GetTransformToWorldMatrix(ByRef MatBuf As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToWorldMatrix_x86(MatBuf)
			Else
				Return dx_GetTransformToWorldMatrix_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToWorldMatrixD")> _
		Shared Function dx_GetTransformToWorldMatrixD_x86(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToWorldMatrixD")> _
		Shared Function dx_GetTransformToWorldMatrixD_x64(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		Public Shared Function GetTransformToWorldMatrixD(ByRef MatBuf As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToWorldMatrixD_x86(MatBuf)
			Else
				Return dx_GetTransformToWorldMatrixD_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToView")> _
		Shared Function dx_SetTransformToView_x86(ByRef Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToView")> _
		Shared Function dx_SetTransformToView_x64(ByRef Matrix As MATRIX) As Integer
		End Function
		Public Shared Function SetTransformToView(ByRef Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToView_x86(Matrix)
			Else
				Return dx_SetTransformToView_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToViewD")> _
		Shared Function dx_SetTransformToViewD_x86(ByRef Matrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToViewD")> _
		Shared Function dx_SetTransformToViewD_x64(ByRef Matrix As MATRIX_D) As Integer
		End Function
		Public Shared Function SetTransformToViewD(ByRef Matrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToViewD_x86(Matrix)
			Else
				Return dx_SetTransformToViewD_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToViewMatrix")> _
		Shared Function dx_GetTransformToViewMatrix_x86(ByRef MatBuf As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToViewMatrix")> _
		Shared Function dx_GetTransformToViewMatrix_x64(ByRef MatBuf As MATRIX) As Integer
		End Function
		Public Shared Function GetTransformToViewMatrix(ByRef MatBuf As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToViewMatrix_x86(MatBuf)
			Else
				Return dx_GetTransformToViewMatrix_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToViewMatrixD")> _
		Shared Function dx_GetTransformToViewMatrixD_x86(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToViewMatrixD")> _
		Shared Function dx_GetTransformToViewMatrixD_x64(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		Public Shared Function GetTransformToViewMatrixD(ByRef MatBuf As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToViewMatrixD_x86(MatBuf)
			Else
				Return dx_GetTransformToViewMatrixD_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToProjection")> _
		Shared Function dx_SetTransformToProjection_x86(ByRef Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToProjection")> _
		Shared Function dx_SetTransformToProjection_x64(ByRef Matrix As MATRIX) As Integer
		End Function
		Public Shared Function SetTransformToProjection(ByRef Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToProjection_x86(Matrix)
			Else
				Return dx_SetTransformToProjection_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToProjectionD")> _
		Shared Function dx_SetTransformToProjectionD_x86(ByRef Matrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToProjectionD")> _
		Shared Function dx_SetTransformToProjectionD_x64(ByRef Matrix As MATRIX_D) As Integer
		End Function
		Public Shared Function SetTransformToProjectionD(ByRef Matrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToProjectionD_x86(Matrix)
			Else
				Return dx_SetTransformToProjectionD_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToProjectionMatrix")> _
		Shared Function dx_GetTransformToProjectionMatrix_x86(ByRef MatBuf As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToProjectionMatrix")> _
		Shared Function dx_GetTransformToProjectionMatrix_x64(ByRef MatBuf As MATRIX) As Integer
		End Function
		Public Shared Function GetTransformToProjectionMatrix(ByRef MatBuf As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToProjectionMatrix_x86(MatBuf)
			Else
				Return dx_GetTransformToProjectionMatrix_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToProjectionMatrixD")> _
		Shared Function dx_GetTransformToProjectionMatrixD_x86(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToProjectionMatrixD")> _
		Shared Function dx_GetTransformToProjectionMatrixD_x64(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		Public Shared Function GetTransformToProjectionMatrixD(ByRef MatBuf As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToProjectionMatrixD_x86(MatBuf)
			Else
				Return dx_GetTransformToProjectionMatrixD_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToViewport")> _
		Shared Function dx_SetTransformToViewport_x86(ByRef Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToViewport")> _
		Shared Function dx_SetTransformToViewport_x64(ByRef Matrix As MATRIX) As Integer
		End Function
		Public Shared Function SetTransformToViewport(ByRef Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToViewport_x86(Matrix)
			Else
				Return dx_SetTransformToViewport_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTransformToViewportD")> _
		Shared Function dx_SetTransformToViewportD_x86(ByRef Matrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTransformToViewportD")> _
		Shared Function dx_SetTransformToViewportD_x64(ByRef Matrix As MATRIX_D) As Integer
		End Function
		Public Shared Function SetTransformToViewportD(ByRef Matrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTransformToViewportD_x86(Matrix)
			Else
				Return dx_SetTransformToViewportD_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToViewportMatrix")> _
		Shared Function dx_GetTransformToViewportMatrix_x86(ByRef MatBuf As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToViewportMatrix")> _
		Shared Function dx_GetTransformToViewportMatrix_x64(ByRef MatBuf As MATRIX) As Integer
		End Function
		Public Shared Function GetTransformToViewportMatrix(ByRef MatBuf As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToViewportMatrix_x86(MatBuf)
			Else
				Return dx_GetTransformToViewportMatrix_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToViewportMatrixD")> _
		Shared Function dx_GetTransformToViewportMatrixD_x86(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToViewportMatrixD")> _
		Shared Function dx_GetTransformToViewportMatrixD_x64(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		Public Shared Function GetTransformToViewportMatrixD(ByRef MatBuf As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToViewportMatrixD_x86(MatBuf)
			Else
				Return dx_GetTransformToViewportMatrixD_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToAPIViewportMatrix")> _
		Shared Function dx_GetTransformToAPIViewportMatrix_x86(ByRef MatBuf As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToAPIViewportMatrix")> _
		Shared Function dx_GetTransformToAPIViewportMatrix_x64(ByRef MatBuf As MATRIX) As Integer
		End Function
		Public Shared Function GetTransformToAPIViewportMatrix(ByRef MatBuf As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToAPIViewportMatrix_x86(MatBuf)
			Else
				Return dx_GetTransformToAPIViewportMatrix_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformToAPIViewportMatrixD")> _
		Shared Function dx_GetTransformToAPIViewportMatrixD_x86(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformToAPIViewportMatrixD")> _
		Shared Function dx_GetTransformToAPIViewportMatrixD_x64(ByRef MatBuf As MATRIX_D) As Integer
		End Function
		Public Shared Function GetTransformToAPIViewportMatrixD(ByRef MatBuf As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformToAPIViewportMatrixD_x86(MatBuf)
			Else
				Return dx_GetTransformToAPIViewportMatrixD_x64(MatBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDefTransformMatrix")> _
		Shared Function dx_SetDefTransformMatrix_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDefTransformMatrix")> _
		Shared Function dx_SetDefTransformMatrix_x64() As Integer
		End Function
		Public Shared Function SetDefTransformMatrix() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDefTransformMatrix_x86()
			Else
				Return dx_SetDefTransformMatrix_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformPosition")> _
		Shared Function dx_GetTransformPosition_x86(ByRef LocalPos As VECTOR, ByRef x As Single, ByRef y As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformPosition")> _
		Shared Function dx_GetTransformPosition_x64(ByRef LocalPos As VECTOR, ByRef x As Single, ByRef y As Single) As Integer
		End Function
		Public Shared Function GetTransformPosition(ByRef LocalPos As VECTOR, ByRef x As Single, ByRef y As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformPosition_x86(LocalPos, x, y)
			Else
				Return dx_GetTransformPosition_x64(LocalPos, x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTransformPositionD")> _
		Shared Function dx_GetTransformPositionD_x86(ByRef LocalPos As VECTOR_D, ByRef x As Double, ByRef y As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTransformPositionD")> _
		Shared Function dx_GetTransformPositionD_x64(ByRef LocalPos As VECTOR_D, ByRef x As Double, ByRef y As Double) As Integer
		End Function
		Public Shared Function GetTransformPositionD(ByRef LocalPos As VECTOR_D, ByRef x As Double, ByRef y As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTransformPositionD_x86(LocalPos, x, y)
			Else
				Return dx_GetTransformPositionD_x64(LocalPos, x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetBillboardPixelSize")> _
		Shared Function dx_GetBillboardPixelSize_x86(WorldPos As VECTOR, WorldSize As Single) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetBillboardPixelSize")> _
		Shared Function dx_GetBillboardPixelSize_x64(WorldPos As VECTOR, WorldSize As Single) As Single
		End Function
		Public Shared Function GetBillboardPixelSize(WorldPos As VECTOR, WorldSize As Single) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetBillboardPixelSize_x86(WorldPos, WorldSize)
			Else
				Return dx_GetBillboardPixelSize_x64(WorldPos, WorldSize)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvWorldPosToViewPos")> _
		Shared Function dx_ConvWorldPosToViewPos_x86(WorldPos As VECTOR) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvWorldPosToViewPos")> _
		Shared Function dx_ConvWorldPosToViewPos_x64(WorldPos As VECTOR) As VECTOR
		End Function
		Public Shared Function ConvWorldPosToViewPos(WorldPos As VECTOR) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_ConvWorldPosToViewPos_x86(WorldPos)
			Else
				Return dx_ConvWorldPosToViewPos_x64(WorldPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvWorldPosToViewPosD")> _
		Shared Function dx_ConvWorldPosToViewPosD_x86(WorldPos As VECTOR_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvWorldPosToViewPosD")> _
		Shared Function dx_ConvWorldPosToViewPosD_x64(WorldPos As VECTOR_D) As VECTOR_D
		End Function
		Public Shared Function ConvWorldPosToViewPosD(WorldPos As VECTOR_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_ConvWorldPosToViewPosD_x86(WorldPos)
			Else
				Return dx_ConvWorldPosToViewPosD_x64(WorldPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvWorldPosToScreenPos")> _
		Shared Function dx_ConvWorldPosToScreenPos_x86(WorldPos As VECTOR) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvWorldPosToScreenPos")> _
		Shared Function dx_ConvWorldPosToScreenPos_x64(WorldPos As VECTOR) As VECTOR
		End Function
		Public Shared Function ConvWorldPosToScreenPos(WorldPos As VECTOR) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_ConvWorldPosToScreenPos_x86(WorldPos)
			Else
				Return dx_ConvWorldPosToScreenPos_x64(WorldPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvWorldPosToScreenPosD")> _
		Shared Function dx_ConvWorldPosToScreenPosD_x86(WorldPos As VECTOR_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvWorldPosToScreenPosD")> _
		Shared Function dx_ConvWorldPosToScreenPosD_x64(WorldPos As VECTOR_D) As VECTOR_D
		End Function
		Public Shared Function ConvWorldPosToScreenPosD(WorldPos As VECTOR_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_ConvWorldPosToScreenPosD_x86(WorldPos)
			Else
				Return dx_ConvWorldPosToScreenPosD_x64(WorldPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvWorldPosToScreenPosPlusW")> _
		Shared Function dx_ConvWorldPosToScreenPosPlusW_x86(WorldPos As VECTOR) As FLOAT4
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvWorldPosToScreenPosPlusW")> _
		Shared Function dx_ConvWorldPosToScreenPosPlusW_x64(WorldPos As VECTOR) As FLOAT4
		End Function
		Public Shared Function ConvWorldPosToScreenPosPlusW(WorldPos As VECTOR) As FLOAT4
			If System.IntPtr.Size = 4 Then
				Return dx_ConvWorldPosToScreenPosPlusW_x86(WorldPos)
			Else
				Return dx_ConvWorldPosToScreenPosPlusW_x64(WorldPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvWorldPosToScreenPosPlusWD")> _
		Shared Function dx_ConvWorldPosToScreenPosPlusWD_x86(WorldPos As VECTOR_D) As DOUBLE4
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvWorldPosToScreenPosPlusWD")> _
		Shared Function dx_ConvWorldPosToScreenPosPlusWD_x64(WorldPos As VECTOR_D) As DOUBLE4
		End Function
		Public Shared Function ConvWorldPosToScreenPosPlusWD(WorldPos As VECTOR_D) As DOUBLE4
			If System.IntPtr.Size = 4 Then
				Return dx_ConvWorldPosToScreenPosPlusWD_x86(WorldPos)
			Else
				Return dx_ConvWorldPosToScreenPosPlusWD_x64(WorldPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvScreenPosToWorldPos")> _
		Shared Function dx_ConvScreenPosToWorldPos_x86(ScreenPos As VECTOR) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvScreenPosToWorldPos")> _
		Shared Function dx_ConvScreenPosToWorldPos_x64(ScreenPos As VECTOR) As VECTOR
		End Function
		Public Shared Function ConvScreenPosToWorldPos(ScreenPos As VECTOR) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_ConvScreenPosToWorldPos_x86(ScreenPos)
			Else
				Return dx_ConvScreenPosToWorldPos_x64(ScreenPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvScreenPosToWorldPosD")> _
		Shared Function dx_ConvScreenPosToWorldPosD_x86(ScreenPos As VECTOR_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvScreenPosToWorldPosD")> _
		Shared Function dx_ConvScreenPosToWorldPosD_x64(ScreenPos As VECTOR_D) As VECTOR_D
		End Function
		Public Shared Function ConvScreenPosToWorldPosD(ScreenPos As VECTOR_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_ConvScreenPosToWorldPosD_x86(ScreenPos)
			Else
				Return dx_ConvScreenPosToWorldPosD_x64(ScreenPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvScreenPosToWorldPos_ZLinear")> _
		Shared Function dx_ConvScreenPosToWorldPos_ZLinear_x86(ScreenPos As VECTOR) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvScreenPosToWorldPos_ZLinear")> _
		Shared Function dx_ConvScreenPosToWorldPos_ZLinear_x64(ScreenPos As VECTOR) As VECTOR
		End Function
		Public Shared Function ConvScreenPosToWorldPos_ZLinear(ScreenPos As VECTOR) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_ConvScreenPosToWorldPos_ZLinear_x86(ScreenPos)
			Else
				Return dx_ConvScreenPosToWorldPos_ZLinear_x64(ScreenPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvScreenPosToWorldPos_ZLinearD")> _
		Shared Function dx_ConvScreenPosToWorldPos_ZLinearD_x86(ScreenPos As VECTOR_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvScreenPosToWorldPos_ZLinearD")> _
		Shared Function dx_ConvScreenPosToWorldPos_ZLinearD_x64(ScreenPos As VECTOR_D) As VECTOR_D
		End Function
		Public Shared Function ConvScreenPosToWorldPos_ZLinearD(ScreenPos As VECTOR_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_ConvScreenPosToWorldPos_ZLinearD_x86(ScreenPos)
			Else
				Return dx_ConvScreenPosToWorldPos_ZLinearD_x64(ScreenPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseCullingFlag")> _
		Shared Function dx_SetUseCullingFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseCullingFlag")> _
		Shared Function dx_SetUseCullingFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseCullingFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseCullingFlag_x86(Flag)
			Else
				Return dx_SetUseCullingFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseBackCulling")> _
		Shared Function dx_SetUseBackCulling_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseBackCulling")> _
		Shared Function dx_SetUseBackCulling_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseBackCulling(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseBackCulling_x86(Flag)
			Else
				Return dx_SetUseBackCulling_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseBackCulling")> _
		Shared Function dx_GetUseBackCulling_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseBackCulling")> _
		Shared Function dx_GetUseBackCulling_x64() As Integer
		End Function
		Public Shared Function GetUseBackCulling() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseBackCulling_x86()
			Else
				Return dx_GetUseBackCulling_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTextureAddressMode")> _
		Shared Function dx_SetTextureAddressMode_x86(Mode As Integer, Stage As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTextureAddressMode")> _
		Shared Function dx_SetTextureAddressMode_x64(Mode As Integer, Stage As Integer) As Integer
		End Function
		Public Shared Function SetTextureAddressMode(Mode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTextureAddressMode_x86(Mode, -1)
			Else
				Return dx_SetTextureAddressMode_x64(Mode, -1)
			End If
		End Function
		Public Shared Function SetTextureAddressMode(Mode As Integer, Stage As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTextureAddressMode_x86(Mode, Stage)
			Else
				Return dx_SetTextureAddressMode_x64(Mode, Stage)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTextureAddressModeUV")> _
		Shared Function dx_SetTextureAddressModeUV_x86(ModeU As Integer, ModeV As Integer, Stage As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTextureAddressModeUV")> _
		Shared Function dx_SetTextureAddressModeUV_x64(ModeU As Integer, ModeV As Integer, Stage As Integer) As Integer
		End Function
		Public Shared Function SetTextureAddressModeUV(ModeU As Integer, ModeV As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTextureAddressModeUV_x86(ModeU, ModeV, -1)
			Else
				Return dx_SetTextureAddressModeUV_x64(ModeU, ModeV, -1)
			End If
		End Function
		Public Shared Function SetTextureAddressModeUV(ModeU As Integer, ModeV As Integer, Stage As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTextureAddressModeUV_x86(ModeU, ModeV, Stage)
			Else
				Return dx_SetTextureAddressModeUV_x64(ModeU, ModeV, Stage)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTextureAddressTransform")> _
		Shared Function dx_SetTextureAddressTransform_x86(TransU As Single, TransV As Single, ScaleU As Single, ScaleV As Single, RotCenterU As Single, RotCenterV As Single, _
			Rotate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTextureAddressTransform")> _
		Shared Function dx_SetTextureAddressTransform_x64(TransU As Single, TransV As Single, ScaleU As Single, ScaleV As Single, RotCenterU As Single, RotCenterV As Single, _
			Rotate As Single) As Integer
		End Function
		Public Shared Function SetTextureAddressTransform(TransU As Single, TransV As Single, ScaleU As Single, ScaleV As Single, RotCenterU As Single, RotCenterV As Single, _
			Rotate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTextureAddressTransform_x86(TransU, TransV, ScaleU, ScaleV, RotCenterU, RotCenterV, _
					Rotate)
			Else
				Return dx_SetTextureAddressTransform_x64(TransU, TransV, ScaleU, ScaleV, RotCenterU, RotCenterV, _
					Rotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetTextureAddressTransformMatrix")> _
		Shared Function dx_SetTextureAddressTransformMatrix_x86(Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetTextureAddressTransformMatrix")> _
		Shared Function dx_SetTextureAddressTransformMatrix_x64(Matrix As MATRIX) As Integer
		End Function
		Public Shared Function SetTextureAddressTransformMatrix(Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetTextureAddressTransformMatrix_x86(Matrix)
			Else
				Return dx_SetTextureAddressTransformMatrix_x64(Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetTextureAddressTransform")> _
		Shared Function dx_ResetTextureAddressTransform_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetTextureAddressTransform")> _
		Shared Function dx_ResetTextureAddressTransform_x64() As Integer
		End Function
		Public Shared Function ResetTextureAddressTransform() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetTextureAddressTransform_x86()
			Else
				Return dx_ResetTextureAddressTransform_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFogEnable")> _
		Shared Function dx_SetFogEnable_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFogEnable")> _
		Shared Function dx_SetFogEnable_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetFogEnable(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFogEnable_x86(Flag)
			Else
				Return dx_SetFogEnable_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFogEnable")> _
		Shared Function dx_GetFogEnable_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFogEnable")> _
		Shared Function dx_GetFogEnable_x64() As Integer
		End Function
		Public Shared Function GetFogEnable() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFogEnable_x86()
			Else
				Return dx_GetFogEnable_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFogMode")> _
		Shared Function dx_SetFogMode_x86(Mode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFogMode")> _
		Shared Function dx_SetFogMode_x64(Mode As Integer) As Integer
		End Function
		Public Shared Function SetFogMode(Mode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFogMode_x86(Mode)
			Else
				Return dx_SetFogMode_x64(Mode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFogMode")> _
		Shared Function dx_GetFogMode_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFogMode")> _
		Shared Function dx_GetFogMode_x64() As Integer
		End Function
		Public Shared Function GetFogMode() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFogMode_x86()
			Else
				Return dx_GetFogMode_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFogColor")> _
		Shared Function dx_SetFogColor_x86(r As Integer, g As Integer, b As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFogColor")> _
		Shared Function dx_SetFogColor_x64(r As Integer, g As Integer, b As Integer) As Integer
		End Function
		Public Shared Function SetFogColor(r As Integer, g As Integer, b As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFogColor_x86(r, g, b)
			Else
				Return dx_SetFogColor_x64(r, g, b)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFogColor")> _
		Shared Function dx_GetFogColor_x86(ByRef r As Integer, ByRef g As Integer, ByRef b As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFogColor")> _
		Shared Function dx_GetFogColor_x64(ByRef r As Integer, ByRef g As Integer, ByRef b As Integer) As Integer
		End Function
		Public Shared Function GetFogColor(ByRef r As Integer, ByRef g As Integer, ByRef b As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFogColor_x86(r, g, b)
			Else
				Return dx_GetFogColor_x64(r, g, b)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFogStartEnd")> _
		Shared Function dx_SetFogStartEnd_x86(start As Single, [end] As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFogStartEnd")> _
		Shared Function dx_SetFogStartEnd_x64(start As Single, [end] As Single) As Integer
		End Function
		Public Shared Function SetFogStartEnd(start As Single, [end] As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFogStartEnd_x86(start, [end])
			Else
				Return dx_SetFogStartEnd_x64(start, [end])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFogStartEnd")> _
		Shared Function dx_GetFogStartEnd_x86(ByRef start As Single, ByRef [end] As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFogStartEnd")> _
		Shared Function dx_GetFogStartEnd_x64(ByRef start As Single, ByRef [end] As Single) As Integer
		End Function
		Public Shared Function GetFogStartEnd(ByRef start As Single, ByRef [end] As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFogStartEnd_x86(start, [end])
			Else
				Return dx_GetFogStartEnd_x64(start, [end])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFogDensity")> _
		Shared Function dx_SetFogDensity_x86(density As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFogDensity")> _
		Shared Function dx_SetFogDensity_x64(density As Single) As Integer
		End Function
		Public Shared Function SetFogDensity(density As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFogDensity_x86(density)
			Else
				Return dx_SetFogDensity_x64(density)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFogDensity")> _
		Shared Function dx_GetFogDensity_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFogDensity")> _
		Shared Function dx_GetFogDensity_x64() As Single
		End Function
		Public Shared Function GetFogDensity() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetFogDensity_x86()
			Else
				Return dx_GetFogDensity_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPixel")> _
		Shared Function dx_GetPixel_x86(x As Integer, y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPixel")> _
		Shared Function dx_GetPixel_x64(x As Integer, y As Integer) As Integer
		End Function
		Public Shared Function GetPixel(x As Integer, y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPixel_x86(x, y)
			Else
				Return dx_GetPixel_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetBackgroundColor")> _
		Shared Function dx_SetBackgroundColor_x86(Red As Integer, Green As Integer, Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetBackgroundColor")> _
		Shared Function dx_SetBackgroundColor_x64(Red As Integer, Green As Integer, Blue As Integer) As Integer
		End Function
		Public Shared Function SetBackgroundColor(Red As Integer, Green As Integer, Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBackgroundColor_x86(Red, Green, Blue)
			Else
				Return dx_SetBackgroundColor_x64(Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawScreenGraph")> _
		Shared Function dx_GetDrawScreenGraph_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, UseClientFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawScreenGraph")> _
		Shared Function dx_GetDrawScreenGraph_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, UseClientFlag As Integer) As Integer
		End Function
		Public Shared Function GetDrawScreenGraph(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawScreenGraph_x86(x1, y1, x2, y2, GrHandle, [TRUE])
			Else
				Return dx_GetDrawScreenGraph_x64(x1, y1, x2, y2, GrHandle, [TRUE])
			End If
		End Function
		Public Shared Function GetDrawScreenGraph(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, GrHandle As Integer, UseClientFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawScreenGraph_x86(x1, y1, x2, y2, GrHandle, UseClientFlag)
			Else
				Return dx_GetDrawScreenGraph_x64(x1, y1, x2, y2, GrHandle, UseClientFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltDrawValidGraph")> _
		Shared Function dx_BltDrawValidGraph_x86(TargetDrawValidGrHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, DestX As Integer, _
			DestY As Integer, DestGrHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltDrawValidGraph")> _
		Shared Function dx_BltDrawValidGraph_x64(TargetDrawValidGrHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, DestX As Integer, _
			DestY As Integer, DestGrHandle As Integer) As Integer
		End Function
		Public Shared Function BltDrawValidGraph(TargetDrawValidGrHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, DestX As Integer, _
			DestY As Integer, DestGrHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltDrawValidGraph_x86(TargetDrawValidGrHandle, x1, y1, x2, y2, DestX, _
					DestY, DestGrHandle)
			Else
				Return dx_BltDrawValidGraph_x64(TargetDrawValidGrHandle, x1, y1, x2, y2, DestX, _
					DestY, DestGrHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ScreenFlip")> _
		Shared Function dx_ScreenFlip_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ScreenFlip")> _
		Shared Function dx_ScreenFlip_x64() As Integer
		End Function
		Public Shared Function ScreenFlip() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ScreenFlip_x86()
			Else
				Return dx_ScreenFlip_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ScreenCopy")> _
		Shared Function dx_ScreenCopy_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ScreenCopy")> _
		Shared Function dx_ScreenCopy_x64() As Integer
		End Function
		Public Shared Function ScreenCopy() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ScreenCopy_x86()
			Else
				Return dx_ScreenCopy_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_WaitVSync")> _
		Shared Function dx_WaitVSync_x86(SyncNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_WaitVSync")> _
		Shared Function dx_WaitVSync_x64(SyncNum As Integer) As Integer
		End Function
		Public Shared Function WaitVSync(SyncNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_WaitVSync_x86(SyncNum)
			Else
				Return dx_WaitVSync_x64(SyncNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClsDrawScreen")> _
		Shared Function dx_ClsDrawScreen_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClsDrawScreen")> _
		Shared Function dx_ClsDrawScreen_x64() As Integer
		End Function
		Public Shared Function ClsDrawScreen() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClsDrawScreen_x86()
			Else
				Return dx_ClsDrawScreen_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawScreen")> _
		Shared Function dx_SetDrawScreen_x86(DrawScreen As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawScreen")> _
		Shared Function dx_SetDrawScreen_x64(DrawScreen As Integer) As Integer
		End Function
		Public Shared Function SetDrawScreen(DrawScreen As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawScreen_x86(DrawScreen)
			Else
				Return dx_SetDrawScreen_x64(DrawScreen)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawScreen")> _
		Shared Function dx_GetDrawScreen_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawScreen")> _
		Shared Function dx_GetDrawScreen_x64() As Integer
		End Function
		Public Shared Function GetDrawScreen() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawScreen_x86()
			Else
				Return dx_GetDrawScreen_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetActiveGraph")> _
		Shared Function dx_GetActiveGraph_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetActiveGraph")> _
		Shared Function dx_GetActiveGraph_x64() As Integer
		End Function
		Public Shared Function GetActiveGraph() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetActiveGraph_x86()
			Else
				Return dx_GetActiveGraph_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDrawZBuffer")> _
		Shared Function dx_SetDrawZBuffer_x86(DrawScreen As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDrawZBuffer")> _
		Shared Function dx_SetDrawZBuffer_x64(DrawScreen As Integer) As Integer
		End Function
		Public Shared Function SetDrawZBuffer(DrawScreen As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDrawZBuffer_x86(DrawScreen)
			Else
				Return dx_SetDrawZBuffer_x64(DrawScreen)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltBackScreenToWindow")> _
		Shared Function dx_BltBackScreenToWindow_x86(Window As System.IntPtr, ClientX As Integer, ClientY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltBackScreenToWindow")> _
		Shared Function dx_BltBackScreenToWindow_x64(Window As System.IntPtr, ClientX As Integer, ClientY As Integer) As Integer
		End Function
		Public Shared Function BltBackScreenToWindow(Window As System.IntPtr, ClientX As Integer, ClientY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltBackScreenToWindow_x86(Window, ClientX, ClientY)
			Else
				Return dx_BltBackScreenToWindow_x64(Window, ClientX, ClientY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltRectBackScreenToWindow")> _
		Shared Function dx_BltRectBackScreenToWindow_x86(Window As System.IntPtr, BackScreenRect As RECT, WindowClientRect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltRectBackScreenToWindow")> _
		Shared Function dx_BltRectBackScreenToWindow_x64(Window As System.IntPtr, BackScreenRect As RECT, WindowClientRect As RECT) As Integer
		End Function
		Public Shared Function BltRectBackScreenToWindow(Window As System.IntPtr, BackScreenRect As RECT, WindowClientRect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltRectBackScreenToWindow_x86(Window, BackScreenRect, WindowClientRect)
			Else
				Return dx_BltRectBackScreenToWindow_x64(Window, BackScreenRect, WindowClientRect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetScreenFlipTargetWindow")> _
		Shared Function dx_SetScreenFlipTargetWindow_x86(TargetWindow As System.IntPtr) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetScreenFlipTargetWindow")> _
		Shared Function dx_SetScreenFlipTargetWindow_x64(TargetWindow As System.IntPtr) As Integer
		End Function
		Public Shared Function SetScreenFlipTargetWindow(TargetWindow As System.IntPtr) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetScreenFlipTargetWindow_x86(TargetWindow)
			Else
				Return dx_SetScreenFlipTargetWindow_x64(TargetWindow)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGraphMode")> _
		Shared Function dx_SetGraphMode_x86(ScreenSizeX As Integer, ScreenSizeY As Integer, ColorBitDepth As Integer, RefreshRate As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGraphMode")> _
		Shared Function dx_SetGraphMode_x64(ScreenSizeX As Integer, ScreenSizeY As Integer, ColorBitDepth As Integer, RefreshRate As Integer) As Integer
		End Function
		Public Shared Function SetGraphMode(ScreenSizeX As Integer, ScreenSizeY As Integer, ColorBitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphMode_x86(ScreenSizeX, ScreenSizeY, ColorBitDepth, 60)
			Else
				Return dx_SetGraphMode_x64(ScreenSizeX, ScreenSizeY, ColorBitDepth, 60)
			End If
		End Function
		Public Shared Function SetGraphMode(ScreenSizeX As Integer, ScreenSizeY As Integer, ColorBitDepth As Integer, RefreshRate As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphMode_x86(ScreenSizeX, ScreenSizeY, ColorBitDepth, RefreshRate)
			Else
				Return dx_SetGraphMode_x64(ScreenSizeX, ScreenSizeY, ColorBitDepth, RefreshRate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFullScreenResolutionMode")> _
		Shared Function dx_SetFullScreenResolutionMode_x86(ResolutionMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFullScreenResolutionMode")> _
		Shared Function dx_SetFullScreenResolutionMode_x64(ResolutionMode As Integer) As Integer
		End Function
		Public Shared Function SetFullScreenResolutionMode(ResolutionMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFullScreenResolutionMode_x86(ResolutionMode)
			Else
				Return dx_SetFullScreenResolutionMode_x64(ResolutionMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFullScreenScalingMode")> _
		Shared Function dx_SetFullScreenScalingMode_x86(ScalingMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFullScreenScalingMode")> _
		Shared Function dx_SetFullScreenScalingMode_x64(ScalingMode As Integer) As Integer
		End Function
		Public Shared Function SetFullScreenScalingMode(ScalingMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFullScreenScalingMode_x86(ScalingMode)
			Else
				Return dx_SetFullScreenScalingMode_x64(ScalingMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetEmulation320x240")> _
		Shared Function dx_SetEmulation320x240_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetEmulation320x240")> _
		Shared Function dx_SetEmulation320x240_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetEmulation320x240(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetEmulation320x240_x86(Flag)
			Else
				Return dx_SetEmulation320x240_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetZBufferSize")> _
		Shared Function dx_SetZBufferSize_x86(ZBufferSizeX As Integer, ZBufferSizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetZBufferSize")> _
		Shared Function dx_SetZBufferSize_x64(ZBufferSizeX As Integer, ZBufferSizeY As Integer) As Integer
		End Function
		Public Shared Function SetZBufferSize(ZBufferSizeX As Integer, ZBufferSizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetZBufferSize_x86(ZBufferSizeX, ZBufferSizeY)
			Else
				Return dx_SetZBufferSize_x64(ZBufferSizeX, ZBufferSizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetZBufferBitDepth")> _
		Shared Function dx_SetZBufferBitDepth_x86(BitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetZBufferBitDepth")> _
		Shared Function dx_SetZBufferBitDepth_x64(BitDepth As Integer) As Integer
		End Function
		Public Shared Function SetZBufferBitDepth(BitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetZBufferBitDepth_x86(BitDepth)
			Else
				Return dx_SetZBufferBitDepth_x64(BitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWaitVSyncFlag")> _
		Shared Function dx_SetWaitVSyncFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWaitVSyncFlag")> _
		Shared Function dx_SetWaitVSyncFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetWaitVSyncFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWaitVSyncFlag_x86(Flag)
			Else
				Return dx_SetWaitVSyncFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetWaitVSyncFlag")> _
		Shared Function dx_GetWaitVSyncFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetWaitVSyncFlag")> _
		Shared Function dx_GetWaitVSyncFlag_x64() As Integer
		End Function
		Public Shared Function GetWaitVSyncFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetWaitVSyncFlag_x86()
			Else
				Return dx_GetWaitVSyncFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFullSceneAntiAliasingMode")> _
		Shared Function dx_SetFullSceneAntiAliasingMode_x86(Samples As Integer, Quality As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFullSceneAntiAliasingMode")> _
		Shared Function dx_SetFullSceneAntiAliasingMode_x64(Samples As Integer, Quality As Integer) As Integer
		End Function
		Public Shared Function SetFullSceneAntiAliasingMode(Samples As Integer, Quality As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFullSceneAntiAliasingMode_x86(Samples, Quality)
			Else
				Return dx_SetFullSceneAntiAliasingMode_x64(Samples, Quality)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGraphDisplayArea")> _
		Shared Function dx_SetGraphDisplayArea_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGraphDisplayArea")> _
		Shared Function dx_SetGraphDisplayArea_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		Public Shared Function SetGraphDisplayArea(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphDisplayArea_x86(x1, y1, x2, y2)
			Else
				Return dx_SetGraphDisplayArea_x64(x1, y1, x2, y2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetChangeScreenModeGraphicsSystemResetFlag")> _
		Shared Function dx_SetChangeScreenModeGraphicsSystemResetFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetChangeScreenModeGraphicsSystemResetFlag")> _
		Shared Function dx_SetChangeScreenModeGraphicsSystemResetFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetChangeScreenModeGraphicsSystemResetFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetChangeScreenModeGraphicsSystemResetFlag_x86(Flag)
			Else
				Return dx_SetChangeScreenModeGraphicsSystemResetFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetScreenState")> _
		Shared Function dx_GetScreenState_x86(ByRef SizeX As Integer, ByRef SizeY As Integer, ByRef ColorBitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetScreenState")> _
		Shared Function dx_GetScreenState_x64(ByRef SizeX As Integer, ByRef SizeY As Integer, ByRef ColorBitDepth As Integer) As Integer
		End Function
		Public Shared Function GetScreenState(ByRef SizeX As Integer, ByRef SizeY As Integer, ByRef ColorBitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetScreenState_x86(SizeX, SizeY, ColorBitDepth)
			Else
				Return dx_GetScreenState_x64(SizeX, SizeY, ColorBitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawScreenSize")> _
		Shared Function dx_GetDrawScreenSize_x86(ByRef XBuf As Integer, ByRef YBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawScreenSize")> _
		Shared Function dx_GetDrawScreenSize_x64(ByRef XBuf As Integer, ByRef YBuf As Integer) As Integer
		End Function
		Public Shared Function GetDrawScreenSize(ByRef XBuf As Integer, ByRef YBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawScreenSize_x86(XBuf, YBuf)
			Else
				Return dx_GetDrawScreenSize_x64(XBuf, YBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetScreenBitDepth")> _
		Shared Function dx_GetScreenBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetScreenBitDepth")> _
		Shared Function dx_GetScreenBitDepth_x64() As Integer
		End Function
		Public Shared Function GetScreenBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetScreenBitDepth_x86()
			Else
				Return dx_GetScreenBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColorBitDepth")> _
		Shared Function dx_GetColorBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColorBitDepth")> _
		Shared Function dx_GetColorBitDepth_x64() As Integer
		End Function
		Public Shared Function GetColorBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColorBitDepth_x86()
			Else
				Return dx_GetColorBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetChangeDisplayFlag")> _
		Shared Function dx_GetChangeDisplayFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetChangeDisplayFlag")> _
		Shared Function dx_GetChangeDisplayFlag_x64() As Integer
		End Function
		Public Shared Function GetChangeDisplayFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetChangeDisplayFlag_x86()
			Else
				Return dx_GetChangeDisplayFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetVideoMemorySize")> _
		Shared Function dx_GetVideoMemorySize_x86(ByRef AllSize As Integer, ByRef FreeSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetVideoMemorySize")> _
		Shared Function dx_GetVideoMemorySize_x64(ByRef AllSize As Integer, ByRef FreeSize As Integer) As Integer
		End Function
		Public Shared Function GetVideoMemorySize(ByRef AllSize As Integer, ByRef FreeSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetVideoMemorySize_x86(AllSize, FreeSize)
			Else
				Return dx_GetVideoMemorySize_x64(AllSize, FreeSize)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetRefreshRate")> _
		Shared Function dx_GetRefreshRate_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetRefreshRate")> _
		Shared Function dx_GetRefreshRate_x64() As Integer
		End Function
		Public Shared Function GetRefreshRate() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetRefreshRate_x86()
			Else
				Return dx_GetRefreshRate_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDisplayModeNum")> _
		Shared Function dx_GetDisplayModeNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDisplayModeNum")> _
		Shared Function dx_GetDisplayModeNum_x64() As Integer
		End Function
		Public Shared Function GetDisplayModeNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDisplayModeNum_x86()
			Else
				Return dx_GetDisplayModeNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDisplayMode")> _
		Shared Function dx_GetDisplayMode_x86(ModeIndex As Integer) As DISPLAYMODEDATA
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDisplayMode")> _
		Shared Function dx_GetDisplayMode_x64(ModeIndex As Integer) As DISPLAYMODEDATA
		End Function
		Public Shared Function GetDisplayMode(ModeIndex As Integer) As DISPLAYMODEDATA
			If System.IntPtr.Size = 4 Then
				Return dx_GetDisplayMode_x86(ModeIndex)
			Else
				Return dx_GetDisplayMode_x64(ModeIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDisplayMaxResolution")> _
		Shared Function dx_GetDisplayMaxResolution_x86(ByRef SizeX As Integer, ByRef SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDisplayMaxResolution")> _
		Shared Function dx_GetDisplayMaxResolution_x64(ByRef SizeX As Integer, ByRef SizeY As Integer) As Integer
		End Function
		Public Shared Function GetDisplayMaxResolution(ByRef SizeX As Integer, ByRef SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDisplayMaxResolution_x86(SizeX, SizeY)
			Else
				Return dx_GetDisplayMaxResolution_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMultiDrawScreenNum")> _
		Shared Function dx_GetMultiDrawScreenNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMultiDrawScreenNum")> _
		Shared Function dx_GetMultiDrawScreenNum_x64() As Integer
		End Function
		Public Shared Function GetMultiDrawScreenNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMultiDrawScreenNum_x86()
			Else
				Return dx_GetMultiDrawScreenNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDisplayRefreshRate")> _
		Shared Function dx_SetDisplayRefreshRate_x86(RefreshRate As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDisplayRefreshRate")> _
		Shared Function dx_SetDisplayRefreshRate_x64(RefreshRate As Integer) As Integer
		End Function
		Public Shared Function SetDisplayRefreshRate(RefreshRate As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDisplayRefreshRate_x86(RefreshRate)
			Else
				Return dx_SetDisplayRefreshRate_x64(RefreshRate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseNormalDrawShader")> _
		Shared Function dx_SetUseNormalDrawShader_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseNormalDrawShader")> _
		Shared Function dx_SetUseNormalDrawShader_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseNormalDrawShader(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseNormalDrawShader_x86(Flag)
			Else
				Return dx_SetUseNormalDrawShader_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseSoftwareRenderModeFlag")> _
		Shared Function dx_SetUseSoftwareRenderModeFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseSoftwareRenderModeFlag")> _
		Shared Function dx_SetUseSoftwareRenderModeFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseSoftwareRenderModeFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseSoftwareRenderModeFlag_x86(Flag)
			Else
				Return dx_SetUseSoftwareRenderModeFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNotUse3DFlag")> _
		Shared Function dx_SetNotUse3DFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNotUse3DFlag")> _
		Shared Function dx_SetNotUse3DFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetNotUse3DFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNotUse3DFlag_x86(Flag)
			Else
				Return dx_SetNotUse3DFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUse3DFlag")> _
		Shared Function dx_SetUse3DFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUse3DFlag")> _
		Shared Function dx_SetUse3DFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUse3DFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUse3DFlag_x86(Flag)
			Else
				Return dx_SetUse3DFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUse3DFlag")> _
		Shared Function dx_GetUse3DFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUse3DFlag")> _
		Shared Function dx_GetUse3DFlag_x64() As Integer
		End Function
		Public Shared Function GetUse3DFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUse3DFlag_x86()
			Else
				Return dx_GetUse3DFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetScreenMemToVramFlag")> _
		Shared Function dx_SetScreenMemToVramFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetScreenMemToVramFlag")> _
		Shared Function dx_SetScreenMemToVramFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetScreenMemToVramFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetScreenMemToVramFlag_x86(Flag)
			Else
				Return dx_SetScreenMemToVramFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetScreenMemToSystemMemFlag")> _
		Shared Function dx_GetScreenMemToSystemMemFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetScreenMemToSystemMemFlag")> _
		Shared Function dx_GetScreenMemToSystemMemFlag_x64() As Integer
		End Function
		Public Shared Function GetScreenMemToSystemMemFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetScreenMemToSystemMemFlag_x86()
			Else
				Return dx_GetScreenMemToSystemMemFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetWindowDrawRect")> _
		Shared Function dx_SetWindowDrawRect_x86(ByRef DrawRect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetWindowDrawRect")> _
		Shared Function dx_SetWindowDrawRect_x64(ByRef DrawRect As RECT) As Integer
		End Function
		Public Shared Function SetWindowDrawRect(ByRef DrawRect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetWindowDrawRect_x86(DrawRect)
			Else
				Return dx_SetWindowDrawRect_x64(DrawRect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_RestoreGraphSystem")> _
		Shared Function dx_RestoreGraphSystem_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_RestoreGraphSystem")> _
		Shared Function dx_RestoreGraphSystem_x64() As Integer
		End Function
		Public Shared Function RestoreGraphSystem() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_RestoreGraphSystem_x86()
			Else
				Return dx_RestoreGraphSystem_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseHardwareVertexProcessing")> _
		Shared Function dx_SetUseHardwareVertexProcessing_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseHardwareVertexProcessing")> _
		Shared Function dx_SetUseHardwareVertexProcessing_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseHardwareVertexProcessing(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseHardwareVertexProcessing_x86(Flag)
			Else
				Return dx_SetUseHardwareVertexProcessing_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUsePixelLighting")> _
		Shared Function dx_SetUsePixelLighting_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUsePixelLighting")> _
		Shared Function dx_SetUsePixelLighting_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUsePixelLighting(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUsePixelLighting_x86(Flag)
			Else
				Return dx_SetUsePixelLighting_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseOldDrawModiGraphCodeFlag")> _
		Shared Function dx_SetUseOldDrawModiGraphCodeFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseOldDrawModiGraphCodeFlag")> _
		Shared Function dx_SetUseOldDrawModiGraphCodeFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseOldDrawModiGraphCodeFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseOldDrawModiGraphCodeFlag_x86(Flag)
			Else
				Return dx_SetUseOldDrawModiGraphCodeFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseVramFlag")> _
		Shared Function dx_SetUseVramFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseVramFlag")> _
		Shared Function dx_SetUseVramFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseVramFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseVramFlag_x86(Flag)
			Else
				Return dx_SetUseVramFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseVramFlag")> _
		Shared Function dx_GetUseVramFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseVramFlag")> _
		Shared Function dx_GetUseVramFlag_x64() As Integer
		End Function
		Public Shared Function GetUseVramFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseVramFlag_x86()
			Else
				Return dx_GetUseVramFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetBasicBlendFlag")> _
		Shared Function dx_SetBasicBlendFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetBasicBlendFlag")> _
		Shared Function dx_SetBasicBlendFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetBasicBlendFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetBasicBlendFlag_x86(Flag)
			Else
				Return dx_SetBasicBlendFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseBasicGraphDraw3DDeviceMethodFlag")> _
		Shared Function dx_SetUseBasicGraphDraw3DDeviceMethodFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseBasicGraphDraw3DDeviceMethodFlag")> _
		Shared Function dx_SetUseBasicGraphDraw3DDeviceMethodFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseBasicGraphDraw3DDeviceMethodFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseBasicGraphDraw3DDeviceMethodFlag_x86(Flag)
			Else
				Return dx_SetUseBasicGraphDraw3DDeviceMethodFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMultiThreadFlag")> _
		Shared Function dx_SetMultiThreadFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMultiThreadFlag")> _
		Shared Function dx_SetMultiThreadFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetMultiThreadFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMultiThreadFlag_x86(Flag)
			Else
				Return dx_SetMultiThreadFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDirectDrawDeviceIndex")> _
		Shared Function dx_SetUseDirectDrawDeviceIndex_x86(Index As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDirectDrawDeviceIndex")> _
		Shared Function dx_SetUseDirectDrawDeviceIndex_x64(Index As Integer) As Integer
		End Function
		Public Shared Function SetUseDirectDrawDeviceIndex(Index As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDirectDrawDeviceIndex_x86(Index)
			Else
				Return dx_SetUseDirectDrawDeviceIndex_x64(Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetAeroDisableFlag")> _
		Shared Function dx_SetAeroDisableFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetAeroDisableFlag")> _
		Shared Function dx_SetAeroDisableFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetAeroDisableFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetAeroDisableFlag_x86(Flag)
			Else
				Return dx_SetAeroDisableFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDirect3D9Ex")> _
		Shared Function dx_SetUseDirect3D9Ex_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDirect3D9Ex")> _
		Shared Function dx_SetUseDirect3D9Ex_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDirect3D9Ex(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDirect3D9Ex_x86(Flag)
			Else
				Return dx_SetUseDirect3D9Ex_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDirectDrawFlag")> _
		Shared Function dx_SetUseDirectDrawFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDirectDrawFlag")> _
		Shared Function dx_SetUseDirectDrawFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDirectDrawFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDirectDrawFlag_x86(Flag)
			Else
				Return dx_SetUseDirectDrawFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseGDIFlag")> _
		Shared Function dx_SetUseGDIFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseGDIFlag")> _
		Shared Function dx_SetUseGDIFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseGDIFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseGDIFlag_x86(Flag)
			Else
				Return dx_SetUseGDIFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseGDIFlag")> _
		Shared Function dx_GetUseGDIFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseGDIFlag")> _
		Shared Function dx_GetUseGDIFlag_x64() As Integer
		End Function
		Public Shared Function GetUseGDIFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseGDIFlag_x86()
			Else
				Return dx_GetUseGDIFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDirectDrawDeviceDescription")> _
		Shared Function dx_GetDirectDrawDeviceDescription_x86(Number As Integer, StringBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDirectDrawDeviceDescription")> _
		Shared Function dx_GetDirectDrawDeviceDescription_x64(Number As Integer, StringBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function GetDirectDrawDeviceDescription(Number As Integer, StringBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDirectDrawDeviceDescription_x86(Number, StringBuffer)
			Else
				Return dx_GetDirectDrawDeviceDescription_x64(Number, StringBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDirectDrawDeviceNum")> _
		Shared Function dx_GetDirectDrawDeviceNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDirectDrawDeviceNum")> _
		Shared Function dx_GetDirectDrawDeviceNum_x64() As Integer
		End Function
		Public Shared Function GetDirectDrawDeviceNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDirectDrawDeviceNum_x86()
			Else
				Return dx_GetDirectDrawDeviceNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_RefreshDxLibDirect3DSetting")> _
		Shared Function dx_RefreshDxLibDirect3DSetting_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_RefreshDxLibDirect3DSetting")> _
		Shared Function dx_RefreshDxLibDirect3DSetting_x64() As Integer
		End Function
		Public Shared Function RefreshDxLibDirect3DSetting() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_RefreshDxLibDirect3DSetting_x86()
			Else
				Return dx_RefreshDxLibDirect3DSetting_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_RenderVertex")> _
		Shared Function dx_RenderVertex_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_RenderVertex")> _
		Shared Function dx_RenderVertex_x64() As Integer
		End Function
		Public Shared Function RenderVertex() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_RenderVertex_x86()
			Else
				Return dx_RenderVertex_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveDrawScreen")> _
		Shared Function dx_SaveDrawScreen_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, SaveType As Integer, _
			Jpeg_Quality As Integer, Jpeg_Sample2x1 As Integer, Png_CompressionLevel As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveDrawScreen")> _
		Shared Function dx_SaveDrawScreen_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, SaveType As Integer, _
			Jpeg_Quality As Integer, Jpeg_Sample2x1 As Integer, Png_CompressionLevel As Integer) As Integer
		End Function
		Public Shared Function SaveDrawScreen(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreen_x86(x1, y1, x2, y2, FileName, DX_IMAGESAVETYPE_BMP, _
					80, [TRUE], -1)
			Else
				Return dx_SaveDrawScreen_x64(x1, y1, x2, y2, FileName, DX_IMAGESAVETYPE_BMP, _
					80, [TRUE], -1)
			End If
		End Function
		Public Shared Function SaveDrawScreen(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, SaveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreen_x86(x1, y1, x2, y2, FileName, SaveType, _
					80, [TRUE], -1)
			Else
				Return dx_SaveDrawScreen_x64(x1, y1, x2, y2, FileName, SaveType, _
					80, [TRUE], -1)
			End If
		End Function
		Public Shared Function SaveDrawScreen(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, SaveType As Integer, _
			Jpeg_Quality As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreen_x86(x1, y1, x2, y2, FileName, SaveType, _
					Jpeg_Quality, [TRUE], -1)
			Else
				Return dx_SaveDrawScreen_x64(x1, y1, x2, y2, FileName, SaveType, _
					Jpeg_Quality, [TRUE], -1)
			End If
		End Function
		Public Shared Function SaveDrawScreen(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, SaveType As Integer, _
			Jpeg_Quality As Integer, Jpeg_Sample2x1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreen_x86(x1, y1, x2, y2, FileName, SaveType, _
					Jpeg_Quality, Jpeg_Sample2x1, -1)
			Else
				Return dx_SaveDrawScreen_x64(x1, y1, x2, y2, FileName, SaveType, _
					Jpeg_Quality, Jpeg_Sample2x1, -1)
			End If
		End Function
		Public Shared Function SaveDrawScreen(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, SaveType As Integer, _
			Jpeg_Quality As Integer, Jpeg_Sample2x1 As Integer, Png_CompressionLevel As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreen_x86(x1, y1, x2, y2, FileName, SaveType, _
					Jpeg_Quality, Jpeg_Sample2x1, Png_CompressionLevel)
			Else
				Return dx_SaveDrawScreen_x64(x1, y1, x2, y2, FileName, SaveType, _
					Jpeg_Quality, Jpeg_Sample2x1, Png_CompressionLevel)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveDrawScreenToBMP")> _
		Shared Function dx_SaveDrawScreenToBMP_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveDrawScreenToBMP")> _
		Shared Function dx_SaveDrawScreenToBMP_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String) As Integer
		End Function
		Public Shared Function SaveDrawScreenToBMP(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreenToBMP_x86(x1, y1, x2, y2, FileName)
			Else
				Return dx_SaveDrawScreenToBMP_x64(x1, y1, x2, y2, FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveDrawScreenToJPEG")> _
		Shared Function dx_SaveDrawScreenToJPEG_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, Quality As Integer, _
			Sample2x1 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveDrawScreenToJPEG")> _
		Shared Function dx_SaveDrawScreenToJPEG_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, Quality As Integer, _
			Sample2x1 As Integer) As Integer
		End Function
		Public Shared Function SaveDrawScreenToJPEG(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreenToJPEG_x86(x1, y1, x2, y2, FileName, 80, _
					[TRUE])
			Else
				Return dx_SaveDrawScreenToJPEG_x64(x1, y1, x2, y2, FileName, 80, _
					[TRUE])
			End If
		End Function
		Public Shared Function SaveDrawScreenToJPEG(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, Quality As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreenToJPEG_x86(x1, y1, x2, y2, FileName, Quality, _
					[TRUE])
			Else
				Return dx_SaveDrawScreenToJPEG_x64(x1, y1, x2, y2, FileName, Quality, _
					[TRUE])
			End If
		End Function
		Public Shared Function SaveDrawScreenToJPEG(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, Quality As Integer, _
			Sample2x1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreenToJPEG_x86(x1, y1, x2, y2, FileName, Quality, _
					Sample2x1)
			Else
				Return dx_SaveDrawScreenToJPEG_x64(x1, y1, x2, y2, FileName, Quality, _
					Sample2x1)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveDrawScreenToPNG")> _
		Shared Function dx_SaveDrawScreenToPNG_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, CompressionLevel As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveDrawScreenToPNG")> _
		Shared Function dx_SaveDrawScreenToPNG_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, CompressionLevel As Integer) As Integer
		End Function
		Public Shared Function SaveDrawScreenToPNG(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreenToPNG_x86(x1, y1, x2, y2, FileName, -1)
			Else
				Return dx_SaveDrawScreenToPNG_x64(x1, y1, x2, y2, FileName, -1)
			End If
		End Function
		Public Shared Function SaveDrawScreenToPNG(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, FileName As String, CompressionLevel As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveDrawScreenToPNG_x86(x1, y1, x2, y2, FileName, CompressionLevel)
			Else
				Return dx_SaveDrawScreenToPNG_x64(x1, y1, x2, y2, FileName, CompressionLevel)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateVertexBuffer")> _
		Shared Function dx_CreateVertexBuffer_x86(VertexNum As Integer, VertexType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateVertexBuffer")> _
		Shared Function dx_CreateVertexBuffer_x64(VertexNum As Integer, VertexType As Integer) As Integer
		End Function
		Public Shared Function CreateVertexBuffer(VertexNum As Integer, VertexType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateVertexBuffer_x86(VertexNum, VertexType)
			Else
				Return dx_CreateVertexBuffer_x64(VertexNum, VertexType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteVertexBuffer")> _
		Shared Function dx_DeleteVertexBuffer_x86(VertexBufHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteVertexBuffer")> _
		Shared Function dx_DeleteVertexBuffer_x64(VertexBufHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteVertexBuffer(VertexBufHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteVertexBuffer_x86(VertexBufHandle)
			Else
				Return dx_DeleteVertexBuffer_x64(VertexBufHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitVertexBuffer")> _
		Shared Function dx_InitVertexBuffer_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitVertexBuffer")> _
		Shared Function dx_InitVertexBuffer_x64() As Integer
		End Function
		Public Shared Function InitVertexBuffer() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitVertexBuffer_x86()
			Else
				Return dx_InitVertexBuffer_x64()
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVertexBufferData")> _
		Shared Function dx_SetVertexBufferData_x86(SetIndex As Integer, VertexData As System.Void*, VertexNum As Integer, VertexBufHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVertexBufferData")> _
		Shared Function dx_SetVertexBufferData_x64(SetIndex As Integer, VertexData As System.Void*, VertexNum As Integer, VertexBufHandle As Integer) As Integer
		End Function
		Public Shared Function SetVertexBufferData(SetIndex As Integer, VertexData As System.Void*, VertexNum As Integer, VertexBufHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVertexBufferData_x86(SetIndex, VertexData, VertexNum, VertexBufHandle)
			Else
				Return dx_SetVertexBufferData_x64(SetIndex, VertexData, VertexNum, VertexBufHandle)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateIndexBuffer")> _
		Shared Function dx_CreateIndexBuffer_x86(IndexNum As Integer, IndexType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateIndexBuffer")> _
		Shared Function dx_CreateIndexBuffer_x64(IndexNum As Integer, IndexType As Integer) As Integer
		End Function
		Public Shared Function CreateIndexBuffer(IndexNum As Integer, IndexType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateIndexBuffer_x86(IndexNum, IndexType)
			Else
				Return dx_CreateIndexBuffer_x64(IndexNum, IndexType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteIndexBuffer")> _
		Shared Function dx_DeleteIndexBuffer_x86(IndexBufHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteIndexBuffer")> _
		Shared Function dx_DeleteIndexBuffer_x64(IndexBufHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteIndexBuffer(IndexBufHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteIndexBuffer_x86(IndexBufHandle)
			Else
				Return dx_DeleteIndexBuffer_x64(IndexBufHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitIndexBuffer")> _
		Shared Function dx_InitIndexBuffer_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitIndexBuffer")> _
		Shared Function dx_InitIndexBuffer_x64() As Integer
		End Function
		Public Shared Function InitIndexBuffer() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitIndexBuffer_x86()
			Else
				Return dx_InitIndexBuffer_x64()
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetIndexBufferData")> _
		Shared Function dx_SetIndexBufferData_x86(SetIndex As Integer, IndexData As System.Void*, IndexNum As Integer, IndexBufHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetIndexBufferData")> _
		Shared Function dx_SetIndexBufferData_x64(SetIndex As Integer, IndexData As System.Void*, IndexNum As Integer, IndexBufHandle As Integer) As Integer
		End Function
		Public Shared Function SetIndexBufferData(SetIndex As Integer, IndexData As System.Void*, IndexNum As Integer, IndexBufHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetIndexBufferData_x86(SetIndex, IndexData, IndexNum, IndexBufHandle)
			Else
				Return dx_SetIndexBufferData_x64(SetIndex, IndexData, IndexNum, IndexBufHandle)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMaxPrimitiveCount")> _
		Shared Function dx_GetMaxPrimitiveCount_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMaxPrimitiveCount")> _
		Shared Function dx_GetMaxPrimitiveCount_x64() As Integer
		End Function
		Public Shared Function GetMaxPrimitiveCount() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMaxPrimitiveCount_x86()
			Else
				Return dx_GetMaxPrimitiveCount_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMaxVertexIndex")> _
		Shared Function dx_GetMaxVertexIndex_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMaxVertexIndex")> _
		Shared Function dx_GetMaxVertexIndex_x64() As Integer
		End Function
		Public Shared Function GetMaxVertexIndex() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMaxVertexIndex_x86()
			Else
				Return dx_GetMaxVertexIndex_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetValidShaderVersion")> _
		Shared Function dx_GetValidShaderVersion_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetValidShaderVersion")> _
		Shared Function dx_GetValidShaderVersion_x64() As Integer
		End Function
		Public Shared Function GetValidShaderVersion() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetValidShaderVersion_x86()
			Else
				Return dx_GetValidShaderVersion_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadVertexShader")> _
		Shared Function dx_LoadVertexShader_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadVertexShader")> _
		Shared Function dx_LoadVertexShader_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadVertexShader(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadVertexShader_x86(FileName)
			Else
				Return dx_LoadVertexShader_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadPixelShader")> _
		Shared Function dx_LoadPixelShader_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadPixelShader")> _
		Shared Function dx_LoadPixelShader_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadPixelShader(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadPixelShader_x86(FileName)
			Else
				Return dx_LoadPixelShader_x64(FileName)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadVertexShaderFromMem")> _
		Shared Function dx_LoadVertexShaderFromMem_x86(ImageAddress As System.Void*, ImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadVertexShaderFromMem")> _
		Shared Function dx_LoadVertexShaderFromMem_x64(ImageAddress As System.Void*, ImageSize As Integer) As Integer
		End Function
		Public Shared Function LoadVertexShaderFromMem(ImageAddress As System.Void*, ImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadVertexShaderFromMem_x86(ImageAddress, ImageSize)
			Else
				Return dx_LoadVertexShaderFromMem_x64(ImageAddress, ImageSize)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadPixelShaderFromMem")> _
		Shared Function dx_LoadPixelShaderFromMem_x86(ImageAddress As System.Void*, ImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadPixelShaderFromMem")> _
		Shared Function dx_LoadPixelShaderFromMem_x64(ImageAddress As System.Void*, ImageSize As Integer) As Integer
		End Function
		Public Shared Function LoadPixelShaderFromMem(ImageAddress As System.Void*, ImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadPixelShaderFromMem_x86(ImageAddress, ImageSize)
			Else
				Return dx_LoadPixelShaderFromMem_x64(ImageAddress, ImageSize)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteShader")> _
		Shared Function dx_DeleteShader_x86(ShaderHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteShader")> _
		Shared Function dx_DeleteShader_x64(ShaderHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteShader(ShaderHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteShader_x86(ShaderHandle)
			Else
				Return dx_DeleteShader_x64(ShaderHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitShader")> _
		Shared Function dx_InitShader_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitShader")> _
		Shared Function dx_InitShader_x64() As Integer
		End Function
		Public Shared Function InitShader() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitShader_x86()
			Else
				Return dx_InitShader_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetConstIndexToShader")> _
		Shared Function dx_GetConstIndexToShader_x86(ConstantName As String, ShaderHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetConstIndexToShader")> _
		Shared Function dx_GetConstIndexToShader_x64(ConstantName As String, ShaderHandle As Integer) As Integer
		End Function
		Public Shared Function GetConstIndexToShader(ConstantName As String, ShaderHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetConstIndexToShader_x86(ConstantName, ShaderHandle)
			Else
				Return dx_GetConstIndexToShader_x64(ConstantName, ShaderHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetConstCountToShader")> _
		Shared Function dx_GetConstCountToShader_x86(ConstantName As String, ShaderHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetConstCountToShader")> _
		Shared Function dx_GetConstCountToShader_x64(ConstantName As String, ShaderHandle As Integer) As Integer
		End Function
		Public Shared Function GetConstCountToShader(ConstantName As String, ShaderHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetConstCountToShader_x86(ConstantName, ShaderHandle)
			Else
				Return dx_GetConstCountToShader_x64(ConstantName, ShaderHandle)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetConstDefaultParamFToShader")> _
		Shared Function dx_GetConstDefaultParamFToShader_x86(ConstantName As String, ShaderHandle As Integer) As FLOAT4*
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetConstDefaultParamFToShader")> _
		Shared Function dx_GetConstDefaultParamFToShader_x64(ConstantName As String, ShaderHandle As Integer) As FLOAT4*
		End Function
		Public Shared Function GetConstDefaultParamFToShader(ConstantName As String, ShaderHandle As Integer) As FLOAT4*
			If System.IntPtr.Size = 4 Then
				Return dx_GetConstDefaultParamFToShader_x86(ConstantName, ShaderHandle)
			Else
				Return dx_GetConstDefaultParamFToShader_x64(ConstantName, ShaderHandle)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstSF")> _
		Shared Function dx_SetVSConstSF_x86(ConstantIndex As Integer, Param As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstSF")> _
		Shared Function dx_SetVSConstSF_x64(ConstantIndex As Integer, Param As Single) As Integer
		End Function
		Public Shared Function SetVSConstSF(ConstantIndex As Integer, Param As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstSF_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstSF_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstF")> _
		Shared Function dx_SetVSConstF_x86(ConstantIndex As Integer, Param As FLOAT4) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstF")> _
		Shared Function dx_SetVSConstF_x64(ConstantIndex As Integer, Param As FLOAT4) As Integer
		End Function
		Public Shared Function SetVSConstF(ConstantIndex As Integer, Param As FLOAT4) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstF_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstF_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstFMtx")> _
		Shared Function dx_SetVSConstFMtx_x86(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstFMtx")> _
		Shared Function dx_SetVSConstFMtx_x64(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		Public Shared Function SetVSConstFMtx(ConstantIndex As Integer, Param As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstFMtx_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstFMtx_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstFMtxT")> _
		Shared Function dx_SetVSConstFMtxT_x86(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstFMtxT")> _
		Shared Function dx_SetVSConstFMtxT_x64(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		Public Shared Function SetVSConstFMtxT(ConstantIndex As Integer, Param As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstFMtxT_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstFMtxT_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstSI")> _
		Shared Function dx_SetVSConstSI_x86(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstSI")> _
		Shared Function dx_SetVSConstSI_x64(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		Public Shared Function SetVSConstSI(ConstantIndex As Integer, Param As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstSI_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstSI_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstI")> _
		Shared Function dx_SetVSConstI_x86(ConstantIndex As Integer, Param As INT4) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstI")> _
		Shared Function dx_SetVSConstI_x64(ConstantIndex As Integer, Param As INT4) As Integer
		End Function
		Public Shared Function SetVSConstI(ConstantIndex As Integer, Param As INT4) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstI_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstI_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstB")> _
		Shared Function dx_SetVSConstB_x86(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstB")> _
		Shared Function dx_SetVSConstB_x64(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		Public Shared Function SetVSConstB(ConstantIndex As Integer, Param As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstB_x86(ConstantIndex, Param)
			Else
				Return dx_SetVSConstB_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstSFArray")> _
		Shared Function dx_SetVSConstSFArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As Single, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstSFArray")> _
		Shared Function dx_SetVSConstSFArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As Single, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstSFArray(ConstantIndex As Integer, ByRef [ParamArray] As Single, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstSFArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstSFArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstFArray")> _
		Shared Function dx_SetVSConstFArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As FLOAT4, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstFArray")> _
		Shared Function dx_SetVSConstFArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As FLOAT4, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstFArray(ConstantIndex As Integer, ByRef [ParamArray] As FLOAT4, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstFArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstFArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstFMtxArray")> _
		Shared Function dx_SetVSConstFMtxArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstFMtxArray")> _
		Shared Function dx_SetVSConstFMtxArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstFMtxArray(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstFMtxArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstFMtxArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstFMtxTArray")> _
		Shared Function dx_SetVSConstFMtxTArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstFMtxTArray")> _
		Shared Function dx_SetVSConstFMtxTArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstFMtxTArray(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstFMtxTArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstFMtxTArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstSIArray")> _
		Shared Function dx_SetVSConstSIArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstSIArray")> _
		Shared Function dx_SetVSConstSIArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstSIArray(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstSIArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstSIArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstIArray")> _
		Shared Function dx_SetVSConstIArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As INT4, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstIArray")> _
		Shared Function dx_SetVSConstIArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As INT4, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstIArray(ConstantIndex As Integer, ByRef [ParamArray] As INT4, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstIArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstIArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVSConstBArray")> _
		Shared Function dx_SetVSConstBArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVSConstBArray")> _
		Shared Function dx_SetVSConstBArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetVSConstBArray(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVSConstBArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetVSConstBArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetVSConstF")> _
		Shared Function dx_ResetVSConstF_x86(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetVSConstF")> _
		Shared Function dx_ResetVSConstF_x64(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function ResetVSConstF(ConstantIndex As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetVSConstF_x86(ConstantIndex, ParamNum)
			Else
				Return dx_ResetVSConstF_x64(ConstantIndex, ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetVSConstI")> _
		Shared Function dx_ResetVSConstI_x86(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetVSConstI")> _
		Shared Function dx_ResetVSConstI_x64(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function ResetVSConstI(ConstantIndex As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetVSConstI_x86(ConstantIndex, ParamNum)
			Else
				Return dx_ResetVSConstI_x64(ConstantIndex, ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetVSConstB")> _
		Shared Function dx_ResetVSConstB_x86(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetVSConstB")> _
		Shared Function dx_ResetVSConstB_x64(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function ResetVSConstB(ConstantIndex As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetVSConstB_x86(ConstantIndex, ParamNum)
			Else
				Return dx_ResetVSConstB_x64(ConstantIndex, ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstSF")> _
		Shared Function dx_SetPSConstSF_x86(ConstantIndex As Integer, Param As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstSF")> _
		Shared Function dx_SetPSConstSF_x64(ConstantIndex As Integer, Param As Single) As Integer
		End Function
		Public Shared Function SetPSConstSF(ConstantIndex As Integer, Param As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstSF_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstSF_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstF")> _
		Shared Function dx_SetPSConstF_x86(ConstantIndex As Integer, Param As FLOAT4) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstF")> _
		Shared Function dx_SetPSConstF_x64(ConstantIndex As Integer, Param As FLOAT4) As Integer
		End Function
		Public Shared Function SetPSConstF(ConstantIndex As Integer, Param As FLOAT4) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstF_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstF_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstFMtx")> _
		Shared Function dx_SetPSConstFMtx_x86(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstFMtx")> _
		Shared Function dx_SetPSConstFMtx_x64(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		Public Shared Function SetPSConstFMtx(ConstantIndex As Integer, Param As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstFMtx_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstFMtx_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstFMtxT")> _
		Shared Function dx_SetPSConstFMtxT_x86(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstFMtxT")> _
		Shared Function dx_SetPSConstFMtxT_x64(ConstantIndex As Integer, Param As MATRIX) As Integer
		End Function
		Public Shared Function SetPSConstFMtxT(ConstantIndex As Integer, Param As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstFMtxT_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstFMtxT_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstSI")> _
		Shared Function dx_SetPSConstSI_x86(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstSI")> _
		Shared Function dx_SetPSConstSI_x64(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		Public Shared Function SetPSConstSI(ConstantIndex As Integer, Param As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstSI_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstSI_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstI")> _
		Shared Function dx_SetPSConstI_x86(ConstantIndex As Integer, Param As INT4) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstI")> _
		Shared Function dx_SetPSConstI_x64(ConstantIndex As Integer, Param As INT4) As Integer
		End Function
		Public Shared Function SetPSConstI(ConstantIndex As Integer, Param As INT4) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstI_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstI_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstB")> _
		Shared Function dx_SetPSConstB_x86(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstB")> _
		Shared Function dx_SetPSConstB_x64(ConstantIndex As Integer, Param As Integer) As Integer
		End Function
		Public Shared Function SetPSConstB(ConstantIndex As Integer, Param As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstB_x86(ConstantIndex, Param)
			Else
				Return dx_SetPSConstB_x64(ConstantIndex, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstSFArray")> _
		Shared Function dx_SetPSConstSFArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As Single, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstSFArray")> _
		Shared Function dx_SetPSConstSFArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As Single, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstSFArray(ConstantIndex As Integer, ByRef [ParamArray] As Single, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstSFArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstSFArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstFArray")> _
		Shared Function dx_SetPSConstFArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As FLOAT4, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstFArray")> _
		Shared Function dx_SetPSConstFArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As FLOAT4, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstFArray(ConstantIndex As Integer, ByRef [ParamArray] As FLOAT4, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstFArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstFArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstFMtxArray")> _
		Shared Function dx_SetPSConstFMtxArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstFMtxArray")> _
		Shared Function dx_SetPSConstFMtxArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstFMtxArray(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstFMtxArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstFMtxArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstFMtxTArray")> _
		Shared Function dx_SetPSConstFMtxTArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstFMtxTArray")> _
		Shared Function dx_SetPSConstFMtxTArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstFMtxTArray(ConstantIndex As Integer, ByRef [ParamArray] As MATRIX, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstFMtxTArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstFMtxTArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstSIArray")> _
		Shared Function dx_SetPSConstSIArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstSIArray")> _
		Shared Function dx_SetPSConstSIArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstSIArray(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstSIArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstSIArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstIArray")> _
		Shared Function dx_SetPSConstIArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As INT4, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstIArray")> _
		Shared Function dx_SetPSConstIArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As INT4, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstIArray(ConstantIndex As Integer, ByRef [ParamArray] As INT4, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstIArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstIArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPSConstBArray")> _
		Shared Function dx_SetPSConstBArray_x86(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPSConstBArray")> _
		Shared Function dx_SetPSConstBArray_x64(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function SetPSConstBArray(ConstantIndex As Integer, ByRef [ParamArray] As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPSConstBArray_x86(ConstantIndex, [ParamArray], ParamNum)
			Else
				Return dx_SetPSConstBArray_x64(ConstantIndex, [ParamArray], ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetPSConstF")> _
		Shared Function dx_ResetPSConstF_x86(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetPSConstF")> _
		Shared Function dx_ResetPSConstF_x64(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function ResetPSConstF(ConstantIndex As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetPSConstF_x86(ConstantIndex, ParamNum)
			Else
				Return dx_ResetPSConstF_x64(ConstantIndex, ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetPSConstI")> _
		Shared Function dx_ResetPSConstI_x86(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetPSConstI")> _
		Shared Function dx_ResetPSConstI_x64(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function ResetPSConstI(ConstantIndex As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetPSConstI_x86(ConstantIndex, ParamNum)
			Else
				Return dx_ResetPSConstI_x64(ConstantIndex, ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetPSConstB")> _
		Shared Function dx_ResetPSConstB_x86(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetPSConstB")> _
		Shared Function dx_ResetPSConstB_x64(ConstantIndex As Integer, ParamNum As Integer) As Integer
		End Function
		Public Shared Function ResetPSConstB(ConstantIndex As Integer, ParamNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetPSConstB_x86(ConstantIndex, ParamNum)
			Else
				Return dx_ResetPSConstB_x64(ConstantIndex, ParamNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetRenderTargetToShader")> _
		Shared Function dx_SetRenderTargetToShader_x86(TargetIndex As Integer, DrawScreen As Integer, SurfaceIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetRenderTargetToShader")> _
		Shared Function dx_SetRenderTargetToShader_x64(TargetIndex As Integer, DrawScreen As Integer, SurfaceIndex As Integer) As Integer
		End Function
		Public Shared Function SetRenderTargetToShader(TargetIndex As Integer, DrawScreen As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetRenderTargetToShader_x86(TargetIndex, DrawScreen, 0)
			Else
				Return dx_SetRenderTargetToShader_x64(TargetIndex, DrawScreen, 0)
			End If
		End Function
		Public Shared Function SetRenderTargetToShader(TargetIndex As Integer, DrawScreen As Integer, SurfaceIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetRenderTargetToShader_x86(TargetIndex, DrawScreen, SurfaceIndex)
			Else
				Return dx_SetRenderTargetToShader_x64(TargetIndex, DrawScreen, SurfaceIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseTextureToShader")> _
		Shared Function dx_SetUseTextureToShader_x86(StageIndex As Integer, GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseTextureToShader")> _
		Shared Function dx_SetUseTextureToShader_x64(StageIndex As Integer, GraphHandle As Integer) As Integer
		End Function
		Public Shared Function SetUseTextureToShader(StageIndex As Integer, GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseTextureToShader_x86(StageIndex, GraphHandle)
			Else
				Return dx_SetUseTextureToShader_x64(StageIndex, GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseVertexShader")> _
		Shared Function dx_SetUseVertexShader_x86(ShaderHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseVertexShader")> _
		Shared Function dx_SetUseVertexShader_x64(ShaderHandle As Integer) As Integer
		End Function
		Public Shared Function SetUseVertexShader(ShaderHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseVertexShader_x86(ShaderHandle)
			Else
				Return dx_SetUseVertexShader_x64(ShaderHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUsePixelShader")> _
		Shared Function dx_SetUsePixelShader_x86(ShaderHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUsePixelShader")> _
		Shared Function dx_SetUsePixelShader_x64(ShaderHandle As Integer) As Integer
		End Function
		Public Shared Function SetUsePixelShader(ShaderHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUsePixelShader_x86(ShaderHandle)
			Else
				Return dx_SetUsePixelShader_x64(ShaderHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CalcPolygonBinormalAndTangentsToShader")> _
		Shared Function dx_CalcPolygonBinormalAndTangentsToShader_x86(ByRef Vertex As VERTEX3DSHADER, PolygonNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CalcPolygonBinormalAndTangentsToShader")> _
		Shared Function dx_CalcPolygonBinormalAndTangentsToShader_x64(ByRef Vertex As VERTEX3DSHADER, PolygonNum As Integer) As Integer
		End Function
		Public Shared Function CalcPolygonBinormalAndTangentsToShader(ByRef Vertex As VERTEX3DSHADER, PolygonNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CalcPolygonBinormalAndTangentsToShader_x86(Vertex, PolygonNum)
			Else
				Return dx_CalcPolygonBinormalAndTangentsToShader_x64(Vertex, PolygonNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CalcPolygonIndexedBinormalAndTangentsToShader")> _
		Shared Function dx_CalcPolygonIndexedBinormalAndTangentsToShader_x86(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CalcPolygonIndexedBinormalAndTangentsToShader")> _
		Shared Function dx_CalcPolygonIndexedBinormalAndTangentsToShader_x64(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
		End Function
		Public Shared Function CalcPolygonIndexedBinormalAndTangentsToShader(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CalcPolygonIndexedBinormalAndTangentsToShader_x86(Vertex, VertexNum, Indices, PolygonNum)
			Else
				Return dx_CalcPolygonIndexedBinormalAndTangentsToShader_x64(Vertex, VertexNum, Indices, PolygonNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon2DToShader")> _
		Shared Function dx_DrawPolygon2DToShader_x86(ByRef Vertex As VERTEX2DSHADER, PolygonNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon2DToShader")> _
		Shared Function dx_DrawPolygon2DToShader_x64(ByRef Vertex As VERTEX2DSHADER, PolygonNum As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon2DToShader(ByRef Vertex As VERTEX2DSHADER, PolygonNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon2DToShader_x86(Vertex, PolygonNum)
			Else
				Return dx_DrawPolygon2DToShader_x64(Vertex, PolygonNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon3DToShader")> _
		Shared Function dx_DrawPolygon3DToShader_x86(ByRef Vertex As VERTEX3DSHADER, PolygonNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon3DToShader")> _
		Shared Function dx_DrawPolygon3DToShader_x64(ByRef Vertex As VERTEX3DSHADER, PolygonNum As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon3DToShader(ByRef Vertex As VERTEX3DSHADER, PolygonNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon3DToShader_x86(Vertex, PolygonNum)
			Else
				Return dx_DrawPolygon3DToShader_x64(Vertex, PolygonNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed2DToShader")> _
		Shared Function dx_DrawPolygonIndexed2DToShader_x86(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed2DToShader")> _
		Shared Function dx_DrawPolygonIndexed2DToShader_x64(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed2DToShader(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed2DToShader_x86(Vertex, VertexNum, Indices, PolygonNum)
			Else
				Return dx_DrawPolygonIndexed2DToShader_x64(Vertex, VertexNum, Indices, PolygonNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed3DToShader")> _
		Shared Function dx_DrawPolygonIndexed3DToShader_x86(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed3DToShader")> _
		Shared Function dx_DrawPolygonIndexed3DToShader_x64(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed3DToShader(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, PolygonNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed3DToShader_x86(Vertex, VertexNum, Indices, PolygonNum)
			Else
				Return dx_DrawPolygonIndexed3DToShader_x64(Vertex, VertexNum, Indices, PolygonNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive2DToShader")> _
		Shared Function dx_DrawPrimitive2DToShader_x86(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive2DToShader")> _
		Shared Function dx_DrawPrimitive2DToShader_x64(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive2DToShader(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, PrimitiveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive2DToShader_x86(Vertex, VertexNum, PrimitiveType)
			Else
				Return dx_DrawPrimitive2DToShader_x64(Vertex, VertexNum, PrimitiveType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive3DToShader")> _
		Shared Function dx_DrawPrimitive3DToShader_x86(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive3DToShader")> _
		Shared Function dx_DrawPrimitive3DToShader_x64(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive3DToShader(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, PrimitiveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive3DToShader_x86(Vertex, VertexNum, PrimitiveType)
			Else
				Return dx_DrawPrimitive3DToShader_x64(Vertex, VertexNum, PrimitiveType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed2DToShader")> _
		Shared Function dx_DrawPrimitiveIndexed2DToShader_x86(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed2DToShader")> _
		Shared Function dx_DrawPrimitiveIndexed2DToShader_x64(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed2DToShader(ByRef Vertex As VERTEX2DSHADER, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed2DToShader_x86(Vertex, VertexNum, Indices, IndexNum, PrimitiveType)
			Else
				Return dx_DrawPrimitiveIndexed2DToShader_x64(Vertex, VertexNum, Indices, IndexNum, PrimitiveType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed3DToShader")> _
		Shared Function dx_DrawPrimitiveIndexed3DToShader_x86(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed3DToShader")> _
		Shared Function dx_DrawPrimitiveIndexed3DToShader_x64(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed3DToShader(ByRef Vertex As VERTEX3DSHADER, VertexNum As Integer, ByRef Indices As UShort, IndexNum As Integer, PrimitiveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed3DToShader_x86(Vertex, VertexNum, Indices, IndexNum, PrimitiveType)
			Else
				Return dx_DrawPrimitiveIndexed3DToShader_x64(Vertex, VertexNum, Indices, IndexNum, PrimitiveType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygon3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPolygon3DToShader_UseVertexBuffer_x86(VertexBufHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygon3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPolygon3DToShader_UseVertexBuffer_x64(VertexBufHandle As Integer) As Integer
		End Function
		Public Shared Function DrawPolygon3DToShader_UseVertexBuffer(VertexBufHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygon3DToShader_UseVertexBuffer_x86(VertexBufHandle)
			Else
				Return dx_DrawPolygon3DToShader_UseVertexBuffer_x64(VertexBufHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPolygonIndexed3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPolygonIndexed3DToShader_UseVertexBuffer_x86(VertexBufHandle As Integer, IndexBufHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPolygonIndexed3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPolygonIndexed3DToShader_UseVertexBuffer_x64(VertexBufHandle As Integer, IndexBufHandle As Integer) As Integer
		End Function
		Public Shared Function DrawPolygonIndexed3DToShader_UseVertexBuffer(VertexBufHandle As Integer, IndexBufHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPolygonIndexed3DToShader_UseVertexBuffer_x86(VertexBufHandle, IndexBufHandle)
			Else
				Return dx_DrawPolygonIndexed3DToShader_UseVertexBuffer_x64(VertexBufHandle, IndexBufHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitive3DToShader_UseVertexBuffer_x86(VertexBufHandle As Integer, PrimitiveType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitive3DToShader_UseVertexBuffer_x64(VertexBufHandle As Integer, PrimitiveType As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive3DToShader_UseVertexBuffer(VertexBufHandle As Integer, PrimitiveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive3DToShader_UseVertexBuffer_x86(VertexBufHandle, PrimitiveType)
			Else
				Return dx_DrawPrimitive3DToShader_UseVertexBuffer_x64(VertexBufHandle, PrimitiveType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitive3DToShader_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitive3DToShader_UseVertexBuffer2_x86(VertexBufHandle As Integer, PrimitiveType As Integer, StartVertex As Integer, UseVertexNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitive3DToShader_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitive3DToShader_UseVertexBuffer2_x64(VertexBufHandle As Integer, PrimitiveType As Integer, StartVertex As Integer, UseVertexNum As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitive3DToShader_UseVertexBuffer2(VertexBufHandle As Integer, PrimitiveType As Integer, StartVertex As Integer, UseVertexNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitive3DToShader_UseVertexBuffer2_x86(VertexBufHandle, PrimitiveType, StartVertex, UseVertexNum)
			Else
				Return dx_DrawPrimitive3DToShader_UseVertexBuffer2_x64(VertexBufHandle, PrimitiveType, StartVertex, UseVertexNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer_x86(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer")> _
		Shared Function dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer_x64(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed3DToShader_UseVertexBuffer(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer_x86(VertexBufHandle, IndexBufHandle, PrimitiveType)
			Else
				Return dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer_x64(VertexBufHandle, IndexBufHandle, PrimitiveType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2_x86(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, BaseVertex As Integer, StartVertex As Integer, UseVertexNum As Integer, _
			StartIndex As Integer, UseIndexNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2")> _
		Shared Function dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2_x64(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, BaseVertex As Integer, StartVertex As Integer, UseVertexNum As Integer, _
			StartIndex As Integer, UseIndexNum As Integer) As Integer
		End Function
		Public Shared Function DrawPrimitiveIndexed3DToShader_UseVertexBuffer2(VertexBufHandle As Integer, IndexBufHandle As Integer, PrimitiveType As Integer, BaseVertex As Integer, StartVertex As Integer, UseVertexNum As Integer, _
			StartIndex As Integer, UseIndexNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2_x86(VertexBufHandle, IndexBufHandle, PrimitiveType, BaseVertex, StartVertex, UseVertexNum, _
					StartIndex, UseIndexNum)
			Else
				Return dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2_x64(VertexBufHandle, IndexBufHandle, PrimitiveType, BaseVertex, StartVertex, UseVertexNum, _
					StartIndex, UseIndexNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayMovie")> _
		Shared Function dx_PlayMovie_x86(FileName As String, ExRate As Integer, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayMovie")> _
		Shared Function dx_PlayMovie_x64(FileName As String, ExRate As Integer, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlayMovie(FileName As String, ExRate As Integer, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMovie_x86(FileName, ExRate, PlayType)
			Else
				Return dx_PlayMovie_x64(FileName, ExRate, PlayType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_OpenMovieToGraph")> _
		Shared Function dx_OpenMovieToGraph_x86(FileName As String, FullColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_OpenMovieToGraph")> _
		Shared Function dx_OpenMovieToGraph_x64(FileName As String, FullColor As Integer) As Integer
		End Function
		Public Shared Function OpenMovieToGraph(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_OpenMovieToGraph_x86(FileName, [TRUE])
			Else
				Return dx_OpenMovieToGraph_x64(FileName, [TRUE])
			End If
		End Function
		Public Shared Function OpenMovieToGraph(FileName As String, FullColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_OpenMovieToGraph_x86(FileName, FullColor)
			Else
				Return dx_OpenMovieToGraph_x64(FileName, FullColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayMovieToGraph")> _
		Shared Function dx_PlayMovieToGraph_x86(GraphHandle As Integer, PlayType As Integer, SysPlay As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayMovieToGraph")> _
		Shared Function dx_PlayMovieToGraph_x64(GraphHandle As Integer, PlayType As Integer, SysPlay As Integer) As Integer
		End Function
		Public Shared Function PlayMovieToGraph(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMovieToGraph_x86(GraphHandle, DX_PLAYTYPE_BACK, 0)
			Else
				Return dx_PlayMovieToGraph_x64(GraphHandle, DX_PLAYTYPE_BACK, 0)
			End If
		End Function
		Public Shared Function PlayMovieToGraph(GraphHandle As Integer, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMovieToGraph_x86(GraphHandle, PlayType, 0)
			Else
				Return dx_PlayMovieToGraph_x64(GraphHandle, PlayType, 0)
			End If
		End Function
		Public Shared Function PlayMovieToGraph(GraphHandle As Integer, PlayType As Integer, SysPlay As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMovieToGraph_x86(GraphHandle, PlayType, SysPlay)
			Else
				Return dx_PlayMovieToGraph_x64(GraphHandle, PlayType, SysPlay)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PauseMovieToGraph")> _
		Shared Function dx_PauseMovieToGraph_x86(GraphHandle As Integer, SysPause As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PauseMovieToGraph")> _
		Shared Function dx_PauseMovieToGraph_x64(GraphHandle As Integer, SysPause As Integer) As Integer
		End Function
		Public Shared Function PauseMovieToGraph(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PauseMovieToGraph_x86(GraphHandle, 0)
			Else
				Return dx_PauseMovieToGraph_x64(GraphHandle, 0)
			End If
		End Function
		Public Shared Function PauseMovieToGraph(GraphHandle As Integer, SysPause As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PauseMovieToGraph_x86(GraphHandle, SysPause)
			Else
				Return dx_PauseMovieToGraph_x64(GraphHandle, SysPause)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddMovieFrameToGraph")> _
		Shared Function dx_AddMovieFrameToGraph_x86(GraphHandle As Integer, FrameNum As UInteger) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddMovieFrameToGraph")> _
		Shared Function dx_AddMovieFrameToGraph_x64(GraphHandle As Integer, FrameNum As UInteger) As Integer
		End Function
		Public Shared Function AddMovieFrameToGraph(GraphHandle As Integer, FrameNum As UInteger) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddMovieFrameToGraph_x86(GraphHandle, FrameNum)
			Else
				Return dx_AddMovieFrameToGraph_x64(GraphHandle, FrameNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SeekMovieToGraph")> _
		Shared Function dx_SeekMovieToGraph_x86(GraphHandle As Integer, Time As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SeekMovieToGraph")> _
		Shared Function dx_SeekMovieToGraph_x64(GraphHandle As Integer, Time As Integer) As Integer
		End Function
		Public Shared Function SeekMovieToGraph(GraphHandle As Integer, Time As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SeekMovieToGraph_x86(GraphHandle, Time)
			Else
				Return dx_SeekMovieToGraph_x64(GraphHandle, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPlaySpeedRateMovieToGraph")> _
		Shared Function dx_SetPlaySpeedRateMovieToGraph_x86(GraphHandle As Integer, SpeedRate As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPlaySpeedRateMovieToGraph")> _
		Shared Function dx_SetPlaySpeedRateMovieToGraph_x64(GraphHandle As Integer, SpeedRate As Double) As Integer
		End Function
		Public Shared Function SetPlaySpeedRateMovieToGraph(GraphHandle As Integer, SpeedRate As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPlaySpeedRateMovieToGraph_x86(GraphHandle, SpeedRate)
			Else
				Return dx_SetPlaySpeedRateMovieToGraph_x64(GraphHandle, SpeedRate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMovieStateToGraph")> _
		Shared Function dx_GetMovieStateToGraph_x86(GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMovieStateToGraph")> _
		Shared Function dx_GetMovieStateToGraph_x64(GraphHandle As Integer) As Integer
		End Function
		Public Shared Function GetMovieStateToGraph(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMovieStateToGraph_x86(GraphHandle)
			Else
				Return dx_GetMovieStateToGraph_x64(GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMovieVolumeToGraph")> _
		Shared Function dx_SetMovieVolumeToGraph_x86(Volume As Integer, GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMovieVolumeToGraph")> _
		Shared Function dx_SetMovieVolumeToGraph_x64(Volume As Integer, GraphHandle As Integer) As Integer
		End Function
		Public Shared Function SetMovieVolumeToGraph(Volume As Integer, GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMovieVolumeToGraph_x86(Volume, GraphHandle)
			Else
				Return dx_SetMovieVolumeToGraph_x64(Volume, GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeMovieVolumeToGraph")> _
		Shared Function dx_ChangeMovieVolumeToGraph_x86(Volume As Integer, GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeMovieVolumeToGraph")> _
		Shared Function dx_ChangeMovieVolumeToGraph_x64(Volume As Integer, GraphHandle As Integer) As Integer
		End Function
		Public Shared Function ChangeMovieVolumeToGraph(Volume As Integer, GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeMovieVolumeToGraph_x86(Volume, GraphHandle)
			Else
				Return dx_ChangeMovieVolumeToGraph_x64(Volume, GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMovieTotalFrameToGraph")> _
		Shared Function dx_GetMovieTotalFrameToGraph_x86(GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMovieTotalFrameToGraph")> _
		Shared Function dx_GetMovieTotalFrameToGraph_x64(GraphHandle As Integer) As Integer
		End Function
		Public Shared Function GetMovieTotalFrameToGraph(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMovieTotalFrameToGraph_x86(GraphHandle)
			Else
				Return dx_GetMovieTotalFrameToGraph_x64(GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_TellMovieToGraph")> _
		Shared Function dx_TellMovieToGraph_x86(GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_TellMovieToGraph")> _
		Shared Function dx_TellMovieToGraph_x64(GraphHandle As Integer) As Integer
		End Function
		Public Shared Function TellMovieToGraph(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_TellMovieToGraph_x86(GraphHandle)
			Else
				Return dx_TellMovieToGraph_x64(GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_TellMovieToGraphToFrame")> _
		Shared Function dx_TellMovieToGraphToFrame_x86(GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_TellMovieToGraphToFrame")> _
		Shared Function dx_TellMovieToGraphToFrame_x64(GraphHandle As Integer) As Integer
		End Function
		Public Shared Function TellMovieToGraphToFrame(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_TellMovieToGraphToFrame_x86(GraphHandle)
			Else
				Return dx_TellMovieToGraphToFrame_x64(GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SeekMovieToGraphToFrame")> _
		Shared Function dx_SeekMovieToGraphToFrame_x86(GraphHandle As Integer, Frame As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SeekMovieToGraphToFrame")> _
		Shared Function dx_SeekMovieToGraphToFrame_x64(GraphHandle As Integer, Frame As Integer) As Integer
		End Function
		Public Shared Function SeekMovieToGraphToFrame(GraphHandle As Integer, Frame As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SeekMovieToGraphToFrame_x86(GraphHandle, Frame)
			Else
				Return dx_SeekMovieToGraphToFrame_x64(GraphHandle, Frame)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetOneFrameTimeMovieToGraph")> _
		Shared Function dx_GetOneFrameTimeMovieToGraph_x86(GraphHandle As Integer) As Long
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetOneFrameTimeMovieToGraph")> _
		Shared Function dx_GetOneFrameTimeMovieToGraph_x64(GraphHandle As Integer) As Long
		End Function
		Public Shared Function GetOneFrameTimeMovieToGraph(GraphHandle As Integer) As Long
			If System.IntPtr.Size = 4 Then
				Return dx_GetOneFrameTimeMovieToGraph_x86(GraphHandle)
			Else
				Return dx_GetOneFrameTimeMovieToGraph_x64(GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLastUpdateTimeMovieToGraph")> _
		Shared Function dx_GetLastUpdateTimeMovieToGraph_x86(GraphHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLastUpdateTimeMovieToGraph")> _
		Shared Function dx_GetLastUpdateTimeMovieToGraph_x64(GraphHandle As Integer) As Integer
		End Function
		Public Shared Function GetLastUpdateTimeMovieToGraph(GraphHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLastUpdateTimeMovieToGraph_x86(GraphHandle)
			Else
				Return dx_GetLastUpdateTimeMovieToGraph_x64(GraphHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMovieRightImageAlphaFlag")> _
		Shared Function dx_SetMovieRightImageAlphaFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMovieRightImageAlphaFlag")> _
		Shared Function dx_SetMovieRightImageAlphaFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetMovieRightImageAlphaFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMovieRightImageAlphaFlag_x86(Flag)
			Else
				Return dx_SetMovieRightImageAlphaFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMovieColorA8R8G8B8Flag")> _
		Shared Function dx_SetMovieColorA8R8G8B8Flag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMovieColorA8R8G8B8Flag")> _
		Shared Function dx_SetMovieColorA8R8G8B8Flag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetMovieColorA8R8G8B8Flag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMovieColorA8R8G8B8Flag_x86(Flag)
			Else
				Return dx_SetMovieColorA8R8G8B8Flag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMovieUseYUVFormatSurfaceFlag")> _
		Shared Function dx_SetMovieUseYUVFormatSurfaceFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMovieUseYUVFormatSurfaceFlag")> _
		Shared Function dx_SetMovieUseYUVFormatSurfaceFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetMovieUseYUVFormatSurfaceFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMovieUseYUVFormatSurfaceFlag_x86(Flag)
			Else
				Return dx_SetMovieUseYUVFormatSurfaceFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraNearFar")> _
		Shared Function dx_SetCameraNearFar_x86(Near As Single, Far As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraNearFar")> _
		Shared Function dx_SetCameraNearFar_x64(Near As Single, Far As Single) As Integer
		End Function
		Public Shared Function SetCameraNearFar(Near As Single, Far As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraNearFar_x86(Near, Far)
			Else
				Return dx_SetCameraNearFar_x64(Near, Far)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraNearFarD")> _
		Shared Function dx_SetCameraNearFarD_x86(Near As Double, Far As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraNearFarD")> _
		Shared Function dx_SetCameraNearFarD_x64(Near As Double, Far As Double) As Integer
		End Function
		Public Shared Function SetCameraNearFarD(Near As Double, Far As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraNearFarD_x86(Near, Far)
			Else
				Return dx_SetCameraNearFarD_x64(Near, Far)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraPositionAndTarget_UpVecY")> _
		Shared Function dx_SetCameraPositionAndTarget_UpVecY_x86(Position As VECTOR, Target As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraPositionAndTarget_UpVecY")> _
		Shared Function dx_SetCameraPositionAndTarget_UpVecY_x64(Position As VECTOR, Target As VECTOR) As Integer
		End Function
		Public Shared Function SetCameraPositionAndTarget_UpVecY(Position As VECTOR, Target As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraPositionAndTarget_UpVecY_x86(Position, Target)
			Else
				Return dx_SetCameraPositionAndTarget_UpVecY_x64(Position, Target)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraPositionAndTarget_UpVecYD")> _
		Shared Function dx_SetCameraPositionAndTarget_UpVecYD_x86(Position As VECTOR_D, Target As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraPositionAndTarget_UpVecYD")> _
		Shared Function dx_SetCameraPositionAndTarget_UpVecYD_x64(Position As VECTOR_D, Target As VECTOR_D) As Integer
		End Function
		Public Shared Function SetCameraPositionAndTarget_UpVecYD(Position As VECTOR_D, Target As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraPositionAndTarget_UpVecYD_x86(Position, Target)
			Else
				Return dx_SetCameraPositionAndTarget_UpVecYD_x64(Position, Target)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraPositionAndTargetAndUpVec")> _
		Shared Function dx_SetCameraPositionAndTargetAndUpVec_x86(Position As VECTOR, TargetPosition As VECTOR, UpVector As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraPositionAndTargetAndUpVec")> _
		Shared Function dx_SetCameraPositionAndTargetAndUpVec_x64(Position As VECTOR, TargetPosition As VECTOR, UpVector As VECTOR) As Integer
		End Function
		Public Shared Function SetCameraPositionAndTargetAndUpVec(Position As VECTOR, TargetPosition As VECTOR, UpVector As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraPositionAndTargetAndUpVec_x86(Position, TargetPosition, UpVector)
			Else
				Return dx_SetCameraPositionAndTargetAndUpVec_x64(Position, TargetPosition, UpVector)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraPositionAndTargetAndUpVecD")> _
		Shared Function dx_SetCameraPositionAndTargetAndUpVecD_x86(Position As VECTOR_D, TargetPosition As VECTOR_D, UpVector As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraPositionAndTargetAndUpVecD")> _
		Shared Function dx_SetCameraPositionAndTargetAndUpVecD_x64(Position As VECTOR_D, TargetPosition As VECTOR_D, UpVector As VECTOR_D) As Integer
		End Function
		Public Shared Function SetCameraPositionAndTargetAndUpVecD(Position As VECTOR_D, TargetPosition As VECTOR_D, UpVector As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraPositionAndTargetAndUpVecD_x86(Position, TargetPosition, UpVector)
			Else
				Return dx_SetCameraPositionAndTargetAndUpVecD_x64(Position, TargetPosition, UpVector)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraPositionAndAngle")> _
		Shared Function dx_SetCameraPositionAndAngle_x86(Position As VECTOR, VRotate As Single, HRotate As Single, TRotate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraPositionAndAngle")> _
		Shared Function dx_SetCameraPositionAndAngle_x64(Position As VECTOR, VRotate As Single, HRotate As Single, TRotate As Single) As Integer
		End Function
		Public Shared Function SetCameraPositionAndAngle(Position As VECTOR, VRotate As Single, HRotate As Single, TRotate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraPositionAndAngle_x86(Position, VRotate, HRotate, TRotate)
			Else
				Return dx_SetCameraPositionAndAngle_x64(Position, VRotate, HRotate, TRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraPositionAndAngleD")> _
		Shared Function dx_SetCameraPositionAndAngleD_x86(Position As VECTOR_D, VRotate As Double, HRotate As Double, TRotate As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraPositionAndAngleD")> _
		Shared Function dx_SetCameraPositionAndAngleD_x64(Position As VECTOR_D, VRotate As Double, HRotate As Double, TRotate As Double) As Integer
		End Function
		Public Shared Function SetCameraPositionAndAngleD(Position As VECTOR_D, VRotate As Double, HRotate As Double, TRotate As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraPositionAndAngleD_x86(Position, VRotate, HRotate, TRotate)
			Else
				Return dx_SetCameraPositionAndAngleD_x64(Position, VRotate, HRotate, TRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraViewMatrix")> _
		Shared Function dx_SetCameraViewMatrix_x86(ViewMatrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraViewMatrix")> _
		Shared Function dx_SetCameraViewMatrix_x64(ViewMatrix As MATRIX) As Integer
		End Function
		Public Shared Function SetCameraViewMatrix(ViewMatrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraViewMatrix_x86(ViewMatrix)
			Else
				Return dx_SetCameraViewMatrix_x64(ViewMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraViewMatrixD")> _
		Shared Function dx_SetCameraViewMatrixD_x86(ViewMatrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraViewMatrixD")> _
		Shared Function dx_SetCameraViewMatrixD_x64(ViewMatrix As MATRIX_D) As Integer
		End Function
		Public Shared Function SetCameraViewMatrixD(ViewMatrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraViewMatrixD_x86(ViewMatrix)
			Else
				Return dx_SetCameraViewMatrixD_x64(ViewMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraScreenCenter")> _
		Shared Function dx_SetCameraScreenCenter_x86(x As Single, y As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraScreenCenter")> _
		Shared Function dx_SetCameraScreenCenter_x64(x As Single, y As Single) As Integer
		End Function
		Public Shared Function SetCameraScreenCenter(x As Single, y As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraScreenCenter_x86(x, y)
			Else
				Return dx_SetCameraScreenCenter_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraScreenCenterD")> _
		Shared Function dx_SetCameraScreenCenterD_x86(x As Double, y As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraScreenCenterD")> _
		Shared Function dx_SetCameraScreenCenterD_x64(x As Double, y As Double) As Integer
		End Function
		Public Shared Function SetCameraScreenCenterD(x As Double, y As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraScreenCenterD_x86(x, y)
			Else
				Return dx_SetCameraScreenCenterD_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupCamera_Perspective")> _
		Shared Function dx_SetupCamera_Perspective_x86(Fov As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupCamera_Perspective")> _
		Shared Function dx_SetupCamera_Perspective_x64(Fov As Single) As Integer
		End Function
		Public Shared Function SetupCamera_Perspective(Fov As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupCamera_Perspective_x86(Fov)
			Else
				Return dx_SetupCamera_Perspective_x64(Fov)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupCamera_PerspectiveD")> _
		Shared Function dx_SetupCamera_PerspectiveD_x86(Fov As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupCamera_PerspectiveD")> _
		Shared Function dx_SetupCamera_PerspectiveD_x64(Fov As Double) As Integer
		End Function
		Public Shared Function SetupCamera_PerspectiveD(Fov As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupCamera_PerspectiveD_x86(Fov)
			Else
				Return dx_SetupCamera_PerspectiveD_x64(Fov)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupCamera_Ortho")> _
		Shared Function dx_SetupCamera_Ortho_x86(Size As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupCamera_Ortho")> _
		Shared Function dx_SetupCamera_Ortho_x64(Size As Single) As Integer
		End Function
		Public Shared Function SetupCamera_Ortho(Size As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupCamera_Ortho_x86(Size)
			Else
				Return dx_SetupCamera_Ortho_x64(Size)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupCamera_OrthoD")> _
		Shared Function dx_SetupCamera_OrthoD_x86(Size As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupCamera_OrthoD")> _
		Shared Function dx_SetupCamera_OrthoD_x64(Size As Double) As Integer
		End Function
		Public Shared Function SetupCamera_OrthoD(Size As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupCamera_OrthoD_x86(Size)
			Else
				Return dx_SetupCamera_OrthoD_x64(Size)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupCamera_ProjectionMatrix")> _
		Shared Function dx_SetupCamera_ProjectionMatrix_x86(ProjectionMatrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupCamera_ProjectionMatrix")> _
		Shared Function dx_SetupCamera_ProjectionMatrix_x64(ProjectionMatrix As MATRIX) As Integer
		End Function
		Public Shared Function SetupCamera_ProjectionMatrix(ProjectionMatrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupCamera_ProjectionMatrix_x86(ProjectionMatrix)
			Else
				Return dx_SetupCamera_ProjectionMatrix_x64(ProjectionMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupCamera_ProjectionMatrixD")> _
		Shared Function dx_SetupCamera_ProjectionMatrixD_x86(ProjectionMatrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupCamera_ProjectionMatrixD")> _
		Shared Function dx_SetupCamera_ProjectionMatrixD_x64(ProjectionMatrix As MATRIX_D) As Integer
		End Function
		Public Shared Function SetupCamera_ProjectionMatrixD(ProjectionMatrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupCamera_ProjectionMatrixD_x86(ProjectionMatrix)
			Else
				Return dx_SetupCamera_ProjectionMatrixD_x64(ProjectionMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraDotAspect")> _
		Shared Function dx_SetCameraDotAspect_x86(DotAspect As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraDotAspect")> _
		Shared Function dx_SetCameraDotAspect_x64(DotAspect As Single) As Integer
		End Function
		Public Shared Function SetCameraDotAspect(DotAspect As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraDotAspect_x86(DotAspect)
			Else
				Return dx_SetCameraDotAspect_x64(DotAspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCameraDotAspectD")> _
		Shared Function dx_SetCameraDotAspectD_x86(DotAspect As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCameraDotAspectD")> _
		Shared Function dx_SetCameraDotAspectD_x64(DotAspect As Double) As Integer
		End Function
		Public Shared Function SetCameraDotAspectD(DotAspect As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCameraDotAspectD_x86(DotAspect)
			Else
				Return dx_SetCameraDotAspectD_x64(DotAspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckCameraViewClip")> _
		Shared Function dx_CheckCameraViewClip_x86(CheckPos As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckCameraViewClip")> _
		Shared Function dx_CheckCameraViewClip_x64(CheckPos As VECTOR) As Integer
		End Function
		Public Shared Function CheckCameraViewClip(CheckPos As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckCameraViewClip_x86(CheckPos)
			Else
				Return dx_CheckCameraViewClip_x64(CheckPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckCameraViewClipD")> _
		Shared Function dx_CheckCameraViewClipD_x86(CheckPos As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckCameraViewClipD")> _
		Shared Function dx_CheckCameraViewClipD_x64(CheckPos As VECTOR_D) As Integer
		End Function
		Public Shared Function CheckCameraViewClipD(CheckPos As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckCameraViewClipD_x86(CheckPos)
			Else
				Return dx_CheckCameraViewClipD_x64(CheckPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckCameraViewClip_Dir")> _
		Shared Function dx_CheckCameraViewClip_Dir_x86(CheckPos As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckCameraViewClip_Dir")> _
		Shared Function dx_CheckCameraViewClip_Dir_x64(CheckPos As VECTOR) As Integer
		End Function
		Public Shared Function CheckCameraViewClip_Dir(CheckPos As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckCameraViewClip_Dir_x86(CheckPos)
			Else
				Return dx_CheckCameraViewClip_Dir_x64(CheckPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckCameraViewClip_DirD")> _
		Shared Function dx_CheckCameraViewClip_DirD_x86(CheckPos As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckCameraViewClip_DirD")> _
		Shared Function dx_CheckCameraViewClip_DirD_x64(CheckPos As VECTOR_D) As Integer
		End Function
		Public Shared Function CheckCameraViewClip_DirD(CheckPos As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckCameraViewClip_DirD_x86(CheckPos)
			Else
				Return dx_CheckCameraViewClip_DirD_x64(CheckPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckCameraViewClip_Box")> _
		Shared Function dx_CheckCameraViewClip_Box_x86(BoxPos1 As VECTOR, BoxPos2 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckCameraViewClip_Box")> _
		Shared Function dx_CheckCameraViewClip_Box_x64(BoxPos1 As VECTOR, BoxPos2 As VECTOR) As Integer
		End Function
		Public Shared Function CheckCameraViewClip_Box(BoxPos1 As VECTOR, BoxPos2 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckCameraViewClip_Box_x86(BoxPos1, BoxPos2)
			Else
				Return dx_CheckCameraViewClip_Box_x64(BoxPos1, BoxPos2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckCameraViewClip_BoxD")> _
		Shared Function dx_CheckCameraViewClip_BoxD_x86(BoxPos1 As VECTOR_D, BoxPos2 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckCameraViewClip_BoxD")> _
		Shared Function dx_CheckCameraViewClip_BoxD_x64(BoxPos1 As VECTOR_D, BoxPos2 As VECTOR_D) As Integer
		End Function
		Public Shared Function CheckCameraViewClip_BoxD(BoxPos1 As VECTOR_D, BoxPos2 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckCameraViewClip_BoxD_x86(BoxPos1, BoxPos2)
			Else
				Return dx_CheckCameraViewClip_BoxD_x64(BoxPos1, BoxPos2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraNear")> _
		Shared Function dx_GetCameraNear_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraNear")> _
		Shared Function dx_GetCameraNear_x64() As Single
		End Function
		Public Shared Function GetCameraNear() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraNear_x86()
			Else
				Return dx_GetCameraNear_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraFar")> _
		Shared Function dx_GetCameraFar_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraFar")> _
		Shared Function dx_GetCameraFar_x64() As Single
		End Function
		Public Shared Function GetCameraFar() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraFar_x86()
			Else
				Return dx_GetCameraFar_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraPosition")> _
		Shared Function dx_GetCameraPosition_x86() As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraPosition")> _
		Shared Function dx_GetCameraPosition_x64() As VECTOR
		End Function
		Public Shared Function GetCameraPosition() As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraPosition_x86()
			Else
				Return dx_GetCameraPosition_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraPositionD")> _
		Shared Function dx_GetCameraPositionD_x86() As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraPositionD")> _
		Shared Function dx_GetCameraPositionD_x64() As VECTOR_D
		End Function
		Public Shared Function GetCameraPositionD() As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraPositionD_x86()
			Else
				Return dx_GetCameraPositionD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraTarget")> _
		Shared Function dx_GetCameraTarget_x86() As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraTarget")> _
		Shared Function dx_GetCameraTarget_x64() As VECTOR
		End Function
		Public Shared Function GetCameraTarget() As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraTarget_x86()
			Else
				Return dx_GetCameraTarget_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraTargetD")> _
		Shared Function dx_GetCameraTargetD_x86() As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraTargetD")> _
		Shared Function dx_GetCameraTargetD_x64() As VECTOR_D
		End Function
		Public Shared Function GetCameraTargetD() As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraTargetD_x86()
			Else
				Return dx_GetCameraTargetD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraUpVector")> _
		Shared Function dx_GetCameraUpVector_x86() As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraUpVector")> _
		Shared Function dx_GetCameraUpVector_x64() As VECTOR
		End Function
		Public Shared Function GetCameraUpVector() As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraUpVector_x86()
			Else
				Return dx_GetCameraUpVector_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraUpVectorD")> _
		Shared Function dx_GetCameraUpVectorD_x86() As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraUpVectorD")> _
		Shared Function dx_GetCameraUpVectorD_x64() As VECTOR_D
		End Function
		Public Shared Function GetCameraUpVectorD() As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraUpVectorD_x86()
			Else
				Return dx_GetCameraUpVectorD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraAngleHRotate")> _
		Shared Function dx_GetCameraAngleHRotate_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraAngleHRotate")> _
		Shared Function dx_GetCameraAngleHRotate_x64() As Single
		End Function
		Public Shared Function GetCameraAngleHRotate() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraAngleHRotate_x86()
			Else
				Return dx_GetCameraAngleHRotate_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraAngleVRotate")> _
		Shared Function dx_GetCameraAngleVRotate_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraAngleVRotate")> _
		Shared Function dx_GetCameraAngleVRotate_x64() As Single
		End Function
		Public Shared Function GetCameraAngleVRotate() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraAngleVRotate_x86()
			Else
				Return dx_GetCameraAngleVRotate_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraAngleTRotate")> _
		Shared Function dx_GetCameraAngleTRotate_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraAngleTRotate")> _
		Shared Function dx_GetCameraAngleTRotate_x64() As Single
		End Function
		Public Shared Function GetCameraAngleTRotate() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraAngleTRotate_x86()
			Else
				Return dx_GetCameraAngleTRotate_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraViewMatrix")> _
		Shared Function dx_GetCameraViewMatrix_x86() As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraViewMatrix")> _
		Shared Function dx_GetCameraViewMatrix_x64() As MATRIX
		End Function
		Public Shared Function GetCameraViewMatrix() As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraViewMatrix_x86()
			Else
				Return dx_GetCameraViewMatrix_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraViewMatrixD")> _
		Shared Function dx_GetCameraViewMatrixD_x86() As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraViewMatrixD")> _
		Shared Function dx_GetCameraViewMatrixD_x64() As MATRIX_D
		End Function
		Public Shared Function GetCameraViewMatrixD() As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraViewMatrixD_x86()
			Else
				Return dx_GetCameraViewMatrixD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraBillboardMatrix")> _
		Shared Function dx_GetCameraBillboardMatrix_x86() As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraBillboardMatrix")> _
		Shared Function dx_GetCameraBillboardMatrix_x64() As MATRIX
		End Function
		Public Shared Function GetCameraBillboardMatrix() As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraBillboardMatrix_x86()
			Else
				Return dx_GetCameraBillboardMatrix_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraBillboardMatrixD")> _
		Shared Function dx_GetCameraBillboardMatrixD_x86() As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraBillboardMatrixD")> _
		Shared Function dx_GetCameraBillboardMatrixD_x64() As MATRIX_D
		End Function
		Public Shared Function GetCameraBillboardMatrixD() As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraBillboardMatrixD_x86()
			Else
				Return dx_GetCameraBillboardMatrixD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraScreenCenter")> _
		Shared Function dx_GetCameraScreenCenter_x86(ByRef x As Single, ByRef y As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraScreenCenter")> _
		Shared Function dx_GetCameraScreenCenter_x64(ByRef x As Single, ByRef y As Single) As Integer
		End Function
		Public Shared Function GetCameraScreenCenter(ByRef x As Single, ByRef y As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraScreenCenter_x86(x, y)
			Else
				Return dx_GetCameraScreenCenter_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraScreenCenterD")> _
		Shared Function dx_GetCameraScreenCenterD_x86(ByRef x As Double, ByRef y As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraScreenCenterD")> _
		Shared Function dx_GetCameraScreenCenterD_x64(ByRef x As Double, ByRef y As Double) As Integer
		End Function
		Public Shared Function GetCameraScreenCenterD(ByRef x As Double, ByRef y As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraScreenCenterD_x86(x, y)
			Else
				Return dx_GetCameraScreenCenterD_x64(x, y)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraFov")> _
		Shared Function dx_GetCameraFov_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraFov")> _
		Shared Function dx_GetCameraFov_x64() As Single
		End Function
		Public Shared Function GetCameraFov() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraFov_x86()
			Else
				Return dx_GetCameraFov_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraSize")> _
		Shared Function dx_GetCameraSize_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraSize")> _
		Shared Function dx_GetCameraSize_x64() As Single
		End Function
		Public Shared Function GetCameraSize() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraSize_x86()
			Else
				Return dx_GetCameraSize_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraProjectionMatrix")> _
		Shared Function dx_GetCameraProjectionMatrix_x86() As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraProjectionMatrix")> _
		Shared Function dx_GetCameraProjectionMatrix_x64() As MATRIX
		End Function
		Public Shared Function GetCameraProjectionMatrix() As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraProjectionMatrix_x86()
			Else
				Return dx_GetCameraProjectionMatrix_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraProjectionMatrixD")> _
		Shared Function dx_GetCameraProjectionMatrixD_x86() As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraProjectionMatrixD")> _
		Shared Function dx_GetCameraProjectionMatrixD_x64() As MATRIX_D
		End Function
		Public Shared Function GetCameraProjectionMatrixD() As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraProjectionMatrixD_x86()
			Else
				Return dx_GetCameraProjectionMatrixD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraDotAspect")> _
		Shared Function dx_GetCameraDotAspect_x86() As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraDotAspect")> _
		Shared Function dx_GetCameraDotAspect_x64() As Single
		End Function
		Public Shared Function GetCameraDotAspect() As Single
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraDotAspect_x86()
			Else
				Return dx_GetCameraDotAspect_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraViewportMatrix")> _
		Shared Function dx_GetCameraViewportMatrix_x86() As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraViewportMatrix")> _
		Shared Function dx_GetCameraViewportMatrix_x64() As MATRIX
		End Function
		Public Shared Function GetCameraViewportMatrix() As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraViewportMatrix_x86()
			Else
				Return dx_GetCameraViewportMatrix_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraViewportMatrixD")> _
		Shared Function dx_GetCameraViewportMatrixD_x86() As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraViewportMatrixD")> _
		Shared Function dx_GetCameraViewportMatrixD_x64() As MATRIX_D
		End Function
		Public Shared Function GetCameraViewportMatrixD() As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraViewportMatrixD_x86()
			Else
				Return dx_GetCameraViewportMatrixD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraAPIViewportMatrix")> _
		Shared Function dx_GetCameraAPIViewportMatrix_x86() As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraAPIViewportMatrix")> _
		Shared Function dx_GetCameraAPIViewportMatrix_x64() As MATRIX
		End Function
		Public Shared Function GetCameraAPIViewportMatrix() As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraAPIViewportMatrix_x86()
			Else
				Return dx_GetCameraAPIViewportMatrix_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCameraAPIViewportMatrixD")> _
		Shared Function dx_GetCameraAPIViewportMatrixD_x86() As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCameraAPIViewportMatrixD")> _
		Shared Function dx_GetCameraAPIViewportMatrixD_x64() As MATRIX_D
		End Function
		Public Shared Function GetCameraAPIViewportMatrixD() As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_GetCameraAPIViewportMatrixD_x86()
			Else
				Return dx_GetCameraAPIViewportMatrixD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseLighting")> _
		Shared Function dx_SetUseLighting_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseLighting")> _
		Shared Function dx_SetUseLighting_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseLighting(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseLighting_x86(Flag)
			Else
				Return dx_SetUseLighting_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMaterialUseVertDifColor")> _
		Shared Function dx_SetMaterialUseVertDifColor_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMaterialUseVertDifColor")> _
		Shared Function dx_SetMaterialUseVertDifColor_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetMaterialUseVertDifColor(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMaterialUseVertDifColor_x86(UseFlag)
			Else
				Return dx_SetMaterialUseVertDifColor_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMaterialUseVertSpcColor")> _
		Shared Function dx_SetMaterialUseVertSpcColor_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMaterialUseVertSpcColor")> _
		Shared Function dx_SetMaterialUseVertSpcColor_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetMaterialUseVertSpcColor(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMaterialUseVertSpcColor_x86(UseFlag)
			Else
				Return dx_SetMaterialUseVertSpcColor_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMaterialParam")> _
		Shared Function dx_SetMaterialParam_x86(Material As MATERIALPARAM) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMaterialParam")> _
		Shared Function dx_SetMaterialParam_x64(Material As MATERIALPARAM) As Integer
		End Function
		Public Shared Function SetMaterialParam(Material As MATERIALPARAM) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMaterialParam_x86(Material)
			Else
				Return dx_SetMaterialParam_x64(Material)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseSpecular")> _
		Shared Function dx_SetUseSpecular_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseSpecular")> _
		Shared Function dx_SetUseSpecular_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetUseSpecular(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseSpecular_x86(UseFlag)
			Else
				Return dx_SetUseSpecular_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGlobalAmbientLight")> _
		Shared Function dx_SetGlobalAmbientLight_x86(Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGlobalAmbientLight")> _
		Shared Function dx_SetGlobalAmbientLight_x64(Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetGlobalAmbientLight(Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGlobalAmbientLight_x86(Color)
			Else
				Return dx_SetGlobalAmbientLight_x64(Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeLightTypeDir")> _
		Shared Function dx_ChangeLightTypeDir_x86(Direction As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeLightTypeDir")> _
		Shared Function dx_ChangeLightTypeDir_x64(Direction As VECTOR) As Integer
		End Function
		Public Shared Function ChangeLightTypeDir(Direction As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeLightTypeDir_x86(Direction)
			Else
				Return dx_ChangeLightTypeDir_x64(Direction)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeLightTypeSpot")> _
		Shared Function dx_ChangeLightTypeSpot_x86(Position As VECTOR, Direction As VECTOR, OutAngle As Single, InAngle As Single, Range As Single, Atten0 As Single, _
			Atten1 As Single, Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeLightTypeSpot")> _
		Shared Function dx_ChangeLightTypeSpot_x64(Position As VECTOR, Direction As VECTOR, OutAngle As Single, InAngle As Single, Range As Single, Atten0 As Single, _
			Atten1 As Single, Atten2 As Single) As Integer
		End Function
		Public Shared Function ChangeLightTypeSpot(Position As VECTOR, Direction As VECTOR, OutAngle As Single, InAngle As Single, Range As Single, Atten0 As Single, _
			Atten1 As Single, Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeLightTypeSpot_x86(Position, Direction, OutAngle, InAngle, Range, Atten0, _
					Atten1, Atten2)
			Else
				Return dx_ChangeLightTypeSpot_x64(Position, Direction, OutAngle, InAngle, Range, Atten0, _
					Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeLightTypePoint")> _
		Shared Function dx_ChangeLightTypePoint_x86(Position As VECTOR, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeLightTypePoint")> _
		Shared Function dx_ChangeLightTypePoint_x64(Position As VECTOR, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		Public Shared Function ChangeLightTypePoint(Position As VECTOR, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeLightTypePoint_x86(Position, Range, Atten0, Atten1, Atten2)
			Else
				Return dx_ChangeLightTypePoint_x64(Position, Range, Atten0, Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightType")> _
		Shared Function dx_GetLightType_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightType")> _
		Shared Function dx_GetLightType_x64() As Integer
		End Function
		Public Shared Function GetLightType() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightType_x86()
			Else
				Return dx_GetLightType_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightEnable")> _
		Shared Function dx_SetLightEnable_x86(EnableFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightEnable")> _
		Shared Function dx_SetLightEnable_x64(EnableFlag As Integer) As Integer
		End Function
		Public Shared Function SetLightEnable(EnableFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightEnable_x86(EnableFlag)
			Else
				Return dx_SetLightEnable_x64(EnableFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightEnable")> _
		Shared Function dx_GetLightEnable_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightEnable")> _
		Shared Function dx_GetLightEnable_x64() As Integer
		End Function
		Public Shared Function GetLightEnable() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightEnable_x86()
			Else
				Return dx_GetLightEnable_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightDifColor")> _
		Shared Function dx_SetLightDifColor_x86(Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightDifColor")> _
		Shared Function dx_SetLightDifColor_x64(Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetLightDifColor(Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightDifColor_x86(Color)
			Else
				Return dx_SetLightDifColor_x64(Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightDifColor")> _
		Shared Function dx_GetLightDifColor_x86() As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightDifColor")> _
		Shared Function dx_GetLightDifColor_x64() As COLOR_F
		End Function
		Public Shared Function GetLightDifColor() As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightDifColor_x86()
			Else
				Return dx_GetLightDifColor_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightSpcColor")> _
		Shared Function dx_SetLightSpcColor_x86(Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightSpcColor")> _
		Shared Function dx_SetLightSpcColor_x64(Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetLightSpcColor(Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightSpcColor_x86(Color)
			Else
				Return dx_SetLightSpcColor_x64(Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightSpcColor")> _
		Shared Function dx_GetLightSpcColor_x86() As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightSpcColor")> _
		Shared Function dx_GetLightSpcColor_x64() As COLOR_F
		End Function
		Public Shared Function GetLightSpcColor() As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightSpcColor_x86()
			Else
				Return dx_GetLightSpcColor_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightAmbColor")> _
		Shared Function dx_SetLightAmbColor_x86(Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightAmbColor")> _
		Shared Function dx_SetLightAmbColor_x64(Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetLightAmbColor(Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightAmbColor_x86(Color)
			Else
				Return dx_SetLightAmbColor_x64(Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightAmbColor")> _
		Shared Function dx_GetLightAmbColor_x86() As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightAmbColor")> _
		Shared Function dx_GetLightAmbColor_x64() As COLOR_F
		End Function
		Public Shared Function GetLightAmbColor() As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightAmbColor_x86()
			Else
				Return dx_GetLightAmbColor_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightDirection")> _
		Shared Function dx_SetLightDirection_x86(Direction As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightDirection")> _
		Shared Function dx_SetLightDirection_x64(Direction As VECTOR) As Integer
		End Function
		Public Shared Function SetLightDirection(Direction As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightDirection_x86(Direction)
			Else
				Return dx_SetLightDirection_x64(Direction)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightDirection")> _
		Shared Function dx_GetLightDirection_x86() As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightDirection")> _
		Shared Function dx_GetLightDirection_x64() As VECTOR
		End Function
		Public Shared Function GetLightDirection() As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightDirection_x86()
			Else
				Return dx_GetLightDirection_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightPosition")> _
		Shared Function dx_SetLightPosition_x86(Position As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightPosition")> _
		Shared Function dx_SetLightPosition_x64(Position As VECTOR) As Integer
		End Function
		Public Shared Function SetLightPosition(Position As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightPosition_x86(Position)
			Else
				Return dx_SetLightPosition_x64(Position)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightPosition")> _
		Shared Function dx_GetLightPosition_x86() As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightPosition")> _
		Shared Function dx_GetLightPosition_x64() As VECTOR
		End Function
		Public Shared Function GetLightPosition() As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightPosition_x86()
			Else
				Return dx_GetLightPosition_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightRangeAtten")> _
		Shared Function dx_SetLightRangeAtten_x86(Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightRangeAtten")> _
		Shared Function dx_SetLightRangeAtten_x64(Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		Public Shared Function SetLightRangeAtten(Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightRangeAtten_x86(Range, Atten0, Atten1, Atten2)
			Else
				Return dx_SetLightRangeAtten_x64(Range, Atten0, Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightRangeAtten")> _
		Shared Function dx_GetLightRangeAtten_x86(ByRef Range As Single, ByRef Atten0 As Single, ByRef Atten1 As Single, ByRef Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightRangeAtten")> _
		Shared Function dx_GetLightRangeAtten_x64(ByRef Range As Single, ByRef Atten0 As Single, ByRef Atten1 As Single, ByRef Atten2 As Single) As Integer
		End Function
		Public Shared Function GetLightRangeAtten(ByRef Range As Single, ByRef Atten0 As Single, ByRef Atten1 As Single, ByRef Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightRangeAtten_x86(Range, Atten0, Atten1, Atten2)
			Else
				Return dx_GetLightRangeAtten_x64(Range, Atten0, Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightAngle")> _
		Shared Function dx_SetLightAngle_x86(OutAngle As Single, InAngle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightAngle")> _
		Shared Function dx_SetLightAngle_x64(OutAngle As Single, InAngle As Single) As Integer
		End Function
		Public Shared Function SetLightAngle(OutAngle As Single, InAngle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightAngle_x86(OutAngle, InAngle)
			Else
				Return dx_SetLightAngle_x64(OutAngle, InAngle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightAngle")> _
		Shared Function dx_GetLightAngle_x86(ByRef OutAngle As Single, ByRef InAngle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightAngle")> _
		Shared Function dx_GetLightAngle_x64(ByRef OutAngle As Single, ByRef InAngle As Single) As Integer
		End Function
		Public Shared Function GetLightAngle(ByRef OutAngle As Single, ByRef InAngle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightAngle_x86(OutAngle, InAngle)
			Else
				Return dx_GetLightAngle_x64(OutAngle, InAngle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightUseShadowMap")> _
		Shared Function dx_SetLightUseShadowMap_x86(SmSlotIndex As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightUseShadowMap")> _
		Shared Function dx_SetLightUseShadowMap_x64(SmSlotIndex As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetLightUseShadowMap(SmSlotIndex As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightUseShadowMap_x86(SmSlotIndex, UseFlag)
			Else
				Return dx_SetLightUseShadowMap_x64(SmSlotIndex, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateDirLightHandle")> _
		Shared Function dx_CreateDirLightHandle_x86(Direction As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateDirLightHandle")> _
		Shared Function dx_CreateDirLightHandle_x64(Direction As VECTOR) As Integer
		End Function
		Public Shared Function CreateDirLightHandle(Direction As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDirLightHandle_x86(Direction)
			Else
				Return dx_CreateDirLightHandle_x64(Direction)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateSpotLightHandle")> _
		Shared Function dx_CreateSpotLightHandle_x86(Position As VECTOR, Direction As VECTOR, OutAngle As Single, InAngle As Single, Range As Single, Atten0 As Single, _
			Atten1 As Single, Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateSpotLightHandle")> _
		Shared Function dx_CreateSpotLightHandle_x64(Position As VECTOR, Direction As VECTOR, OutAngle As Single, InAngle As Single, Range As Single, Atten0 As Single, _
			Atten1 As Single, Atten2 As Single) As Integer
		End Function
		Public Shared Function CreateSpotLightHandle(Position As VECTOR, Direction As VECTOR, OutAngle As Single, InAngle As Single, Range As Single, Atten0 As Single, _
			Atten1 As Single, Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateSpotLightHandle_x86(Position, Direction, OutAngle, InAngle, Range, Atten0, _
					Atten1, Atten2)
			Else
				Return dx_CreateSpotLightHandle_x64(Position, Direction, OutAngle, InAngle, Range, Atten0, _
					Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePointLightHandle")> _
		Shared Function dx_CreatePointLightHandle_x86(Position As VECTOR, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePointLightHandle")> _
		Shared Function dx_CreatePointLightHandle_x64(Position As VECTOR, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		Public Shared Function CreatePointLightHandle(Position As VECTOR, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePointLightHandle_x86(Position, Range, Atten0, Atten1, Atten2)
			Else
				Return dx_CreatePointLightHandle_x64(Position, Range, Atten0, Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteLightHandle")> _
		Shared Function dx_DeleteLightHandle_x86(LHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteLightHandle")> _
		Shared Function dx_DeleteLightHandle_x64(LHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteLightHandle(LHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteLightHandle_x86(LHandle)
			Else
				Return dx_DeleteLightHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteLightHandleAll")> _
		Shared Function dx_DeleteLightHandleAll_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteLightHandleAll")> _
		Shared Function dx_DeleteLightHandleAll_x64() As Integer
		End Function
		Public Shared Function DeleteLightHandleAll() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteLightHandleAll_x86()
			Else
				Return dx_DeleteLightHandleAll_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightTypeHandle")> _
		Shared Function dx_SetLightTypeHandle_x86(LHandle As Integer, LightType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightTypeHandle")> _
		Shared Function dx_SetLightTypeHandle_x64(LHandle As Integer, LightType As Integer) As Integer
		End Function
		Public Shared Function SetLightTypeHandle(LHandle As Integer, LightType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightTypeHandle_x86(LHandle, LightType)
			Else
				Return dx_SetLightTypeHandle_x64(LHandle, LightType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightEnableHandle")> _
		Shared Function dx_SetLightEnableHandle_x86(LHandle As Integer, EnableFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightEnableHandle")> _
		Shared Function dx_SetLightEnableHandle_x64(LHandle As Integer, EnableFlag As Integer) As Integer
		End Function
		Public Shared Function SetLightEnableHandle(LHandle As Integer, EnableFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightEnableHandle_x86(LHandle, EnableFlag)
			Else
				Return dx_SetLightEnableHandle_x64(LHandle, EnableFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightDifColorHandle")> _
		Shared Function dx_SetLightDifColorHandle_x86(LHandle As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightDifColorHandle")> _
		Shared Function dx_SetLightDifColorHandle_x64(LHandle As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetLightDifColorHandle(LHandle As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightDifColorHandle_x86(LHandle, Color)
			Else
				Return dx_SetLightDifColorHandle_x64(LHandle, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightSpcColorHandle")> _
		Shared Function dx_SetLightSpcColorHandle_x86(LHandle As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightSpcColorHandle")> _
		Shared Function dx_SetLightSpcColorHandle_x64(LHandle As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetLightSpcColorHandle(LHandle As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightSpcColorHandle_x86(LHandle, Color)
			Else
				Return dx_SetLightSpcColorHandle_x64(LHandle, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightAmbColorHandle")> _
		Shared Function dx_SetLightAmbColorHandle_x86(LHandle As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightAmbColorHandle")> _
		Shared Function dx_SetLightAmbColorHandle_x64(LHandle As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function SetLightAmbColorHandle(LHandle As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightAmbColorHandle_x86(LHandle, Color)
			Else
				Return dx_SetLightAmbColorHandle_x64(LHandle, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightDirectionHandle")> _
		Shared Function dx_SetLightDirectionHandle_x86(LHandle As Integer, Direction As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightDirectionHandle")> _
		Shared Function dx_SetLightDirectionHandle_x64(LHandle As Integer, Direction As VECTOR) As Integer
		End Function
		Public Shared Function SetLightDirectionHandle(LHandle As Integer, Direction As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightDirectionHandle_x86(LHandle, Direction)
			Else
				Return dx_SetLightDirectionHandle_x64(LHandle, Direction)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightPositionHandle")> _
		Shared Function dx_SetLightPositionHandle_x86(LHandle As Integer, Position As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightPositionHandle")> _
		Shared Function dx_SetLightPositionHandle_x64(LHandle As Integer, Position As VECTOR) As Integer
		End Function
		Public Shared Function SetLightPositionHandle(LHandle As Integer, Position As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightPositionHandle_x86(LHandle, Position)
			Else
				Return dx_SetLightPositionHandle_x64(LHandle, Position)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightRangeAttenHandle")> _
		Shared Function dx_SetLightRangeAttenHandle_x86(LHandle As Integer, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightRangeAttenHandle")> _
		Shared Function dx_SetLightRangeAttenHandle_x64(LHandle As Integer, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
		End Function
		Public Shared Function SetLightRangeAttenHandle(LHandle As Integer, Range As Single, Atten0 As Single, Atten1 As Single, Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightRangeAttenHandle_x86(LHandle, Range, Atten0, Atten1, Atten2)
			Else
				Return dx_SetLightRangeAttenHandle_x64(LHandle, Range, Atten0, Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightAngleHandle")> _
		Shared Function dx_SetLightAngleHandle_x86(LHandle As Integer, OutAngle As Single, InAngle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightAngleHandle")> _
		Shared Function dx_SetLightAngleHandle_x64(LHandle As Integer, OutAngle As Single, InAngle As Single) As Integer
		End Function
		Public Shared Function SetLightAngleHandle(LHandle As Integer, OutAngle As Single, InAngle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightAngleHandle_x86(LHandle, OutAngle, InAngle)
			Else
				Return dx_SetLightAngleHandle_x64(LHandle, OutAngle, InAngle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLightUseShadowMapHandle")> _
		Shared Function dx_SetLightUseShadowMapHandle_x86(LHandle As Integer, SmSlotIndex As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLightUseShadowMapHandle")> _
		Shared Function dx_SetLightUseShadowMapHandle_x64(LHandle As Integer, SmSlotIndex As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetLightUseShadowMapHandle(LHandle As Integer, SmSlotIndex As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLightUseShadowMapHandle_x86(LHandle, SmSlotIndex, UseFlag)
			Else
				Return dx_SetLightUseShadowMapHandle_x64(LHandle, SmSlotIndex, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightTypeHandle")> _
		Shared Function dx_GetLightTypeHandle_x86(LHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightTypeHandle")> _
		Shared Function dx_GetLightTypeHandle_x64(LHandle As Integer) As Integer
		End Function
		Public Shared Function GetLightTypeHandle(LHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightTypeHandle_x86(LHandle)
			Else
				Return dx_GetLightTypeHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightEnableHandle")> _
		Shared Function dx_GetLightEnableHandle_x86(LHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightEnableHandle")> _
		Shared Function dx_GetLightEnableHandle_x64(LHandle As Integer) As Integer
		End Function
		Public Shared Function GetLightEnableHandle(LHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightEnableHandle_x86(LHandle)
			Else
				Return dx_GetLightEnableHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightDifColorHandle")> _
		Shared Function dx_GetLightDifColorHandle_x86(LHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightDifColorHandle")> _
		Shared Function dx_GetLightDifColorHandle_x64(LHandle As Integer) As COLOR_F
		End Function
		Public Shared Function GetLightDifColorHandle(LHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightDifColorHandle_x86(LHandle)
			Else
				Return dx_GetLightDifColorHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightSpcColorHandle")> _
		Shared Function dx_GetLightSpcColorHandle_x86(LHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightSpcColorHandle")> _
		Shared Function dx_GetLightSpcColorHandle_x64(LHandle As Integer) As COLOR_F
		End Function
		Public Shared Function GetLightSpcColorHandle(LHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightSpcColorHandle_x86(LHandle)
			Else
				Return dx_GetLightSpcColorHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightAmbColorHandle")> _
		Shared Function dx_GetLightAmbColorHandle_x86(LHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightAmbColorHandle")> _
		Shared Function dx_GetLightAmbColorHandle_x64(LHandle As Integer) As COLOR_F
		End Function
		Public Shared Function GetLightAmbColorHandle(LHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightAmbColorHandle_x86(LHandle)
			Else
				Return dx_GetLightAmbColorHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightDirectionHandle")> _
		Shared Function dx_GetLightDirectionHandle_x86(LHandle As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightDirectionHandle")> _
		Shared Function dx_GetLightDirectionHandle_x64(LHandle As Integer) As VECTOR
		End Function
		Public Shared Function GetLightDirectionHandle(LHandle As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightDirectionHandle_x86(LHandle)
			Else
				Return dx_GetLightDirectionHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightPositionHandle")> _
		Shared Function dx_GetLightPositionHandle_x86(LHandle As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightPositionHandle")> _
		Shared Function dx_GetLightPositionHandle_x64(LHandle As Integer) As VECTOR
		End Function
		Public Shared Function GetLightPositionHandle(LHandle As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightPositionHandle_x86(LHandle)
			Else
				Return dx_GetLightPositionHandle_x64(LHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightRangeAttenHandle")> _
		Shared Function dx_GetLightRangeAttenHandle_x86(LHandle As Integer, ByRef Range As Single, ByRef Atten0 As Single, ByRef Atten1 As Single, ByRef Atten2 As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightRangeAttenHandle")> _
		Shared Function dx_GetLightRangeAttenHandle_x64(LHandle As Integer, ByRef Range As Single, ByRef Atten0 As Single, ByRef Atten1 As Single, ByRef Atten2 As Single) As Integer
		End Function
		Public Shared Function GetLightRangeAttenHandle(LHandle As Integer, ByRef Range As Single, ByRef Atten0 As Single, ByRef Atten1 As Single, ByRef Atten2 As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightRangeAttenHandle_x86(LHandle, Range, Atten0, Atten1, Atten2)
			Else
				Return dx_GetLightRangeAttenHandle_x64(LHandle, Range, Atten0, Atten1, Atten2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetLightAngleHandle")> _
		Shared Function dx_GetLightAngleHandle_x86(LHandle As Integer, ByRef OutAngle As Single, ByRef InAngle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetLightAngleHandle")> _
		Shared Function dx_GetLightAngleHandle_x64(LHandle As Integer, ByRef OutAngle As Single, ByRef InAngle As Single) As Integer
		End Function
		Public Shared Function GetLightAngleHandle(LHandle As Integer, ByRef OutAngle As Single, ByRef InAngle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetLightAngleHandle_x86(LHandle, OutAngle, InAngle)
			Else
				Return dx_GetLightAngleHandle_x64(LHandle, OutAngle, InAngle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetEnableLightHandleNum")> _
		Shared Function dx_GetEnableLightHandleNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetEnableLightHandleNum")> _
		Shared Function dx_GetEnableLightHandleNum_x64() As Integer
		End Function
		Public Shared Function GetEnableLightHandleNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetEnableLightHandleNum_x86()
			Else
				Return dx_GetEnableLightHandleNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetEnableLightHandle")> _
		Shared Function dx_GetEnableLightHandle_x86(Index As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetEnableLightHandle")> _
		Shared Function dx_GetEnableLightHandle_x64(Index As Integer) As Integer
		End Function
		Public Shared Function GetEnableLightHandle(Index As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetEnableLightHandle_x86(Index)
			Else
				Return dx_GetEnableLightHandle_x64(Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetTexFormatIndex")> _
		Shared Function dx_GetTexFormatIndex_x86(ByRef Format As IMAGEFORMATDESC) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetTexFormatIndex")> _
		Shared Function dx_GetTexFormatIndex_x64(ByRef Format As IMAGEFORMATDESC) As Integer
		End Function
		Public Shared Function GetTexFormatIndex(ByRef Format As IMAGEFORMATDESC) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetTexFormatIndex_x86(Format)
			Else
				Return dx_GetTexFormatIndex_x64(Format)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_ColorKaiseki")> _
		Shared Function dx_ColorKaiseki_x86(PixelData As System.Void*, ColorData As COLORDATA*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ColorKaiseki")> _
		Shared Function dx_ColorKaiseki_x64(PixelData As System.Void*, ColorData As COLORDATA*) As Integer
		End Function
		Public Shared Function ColorKaiseki(PixelData As System.Void*, ColorData As COLORDATA*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ColorKaiseki_x86(PixelData, ColorData)
			Else
				Return dx_ColorKaiseki_x64(PixelData, ColorData)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateMaskScreen")> _
		Shared Function dx_CreateMaskScreen_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateMaskScreen")> _
		Shared Function dx_CreateMaskScreen_x64() As Integer
		End Function
		Public Shared Function CreateMaskScreen() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateMaskScreen_x86()
			Else
				Return dx_CreateMaskScreen_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMaskScreen")> _
		Shared Function dx_DeleteMaskScreen_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMaskScreen")> _
		Shared Function dx_DeleteMaskScreen_x64() As Integer
		End Function
		Public Shared Function DeleteMaskScreen() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMaskScreen_x86()
			Else
				Return dx_DeleteMaskScreen_x64()
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawMaskToDirectData")> _
		Shared Function dx_DrawMaskToDirectData_x86(x As Integer, y As Integer, Width As Integer, Height As Integer, MaskData As System.Void*, TransMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawMaskToDirectData")> _
		Shared Function dx_DrawMaskToDirectData_x64(x As Integer, y As Integer, Width As Integer, Height As Integer, MaskData As System.Void*, TransMode As Integer) As Integer
		End Function
		Public Shared Function DrawMaskToDirectData(x As Integer, y As Integer, Width As Integer, Height As Integer, MaskData As System.Void*, TransMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawMaskToDirectData_x86(x, y, Width, Height, MaskData, TransMode)
			Else
				Return dx_DrawMaskToDirectData_x64(x, y, Width, Height, MaskData, TransMode)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawFillMaskToDirectData")> _
		Shared Function dx_DrawFillMaskToDirectData_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Width As Integer, Height As Integer, _
			MaskData As System.Void*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawFillMaskToDirectData")> _
		Shared Function dx_DrawFillMaskToDirectData_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Width As Integer, Height As Integer, _
			MaskData As System.Void*) As Integer
		End Function
		Public Shared Function DrawFillMaskToDirectData(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, Width As Integer, Height As Integer, _
			MaskData As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawFillMaskToDirectData_x86(x1, y1, x2, y2, Width, Height, _
					MaskData)
			Else
				Return dx_DrawFillMaskToDirectData_x64(x1, y1, x2, y2, Width, Height, _
					MaskData)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseMaskScreenFlag")> _
		Shared Function dx_SetUseMaskScreenFlag_x86(ValidFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseMaskScreenFlag")> _
		Shared Function dx_SetUseMaskScreenFlag_x64(ValidFlag As Integer) As Integer
		End Function
		Public Shared Function SetUseMaskScreenFlag(ValidFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseMaskScreenFlag_x86(ValidFlag)
			Else
				Return dx_SetUseMaskScreenFlag_x64(ValidFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetUseMaskScreenFlag")> _
		Shared Function dx_GetUseMaskScreenFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetUseMaskScreenFlag")> _
		Shared Function dx_GetUseMaskScreenFlag_x64() As Integer
		End Function
		Public Shared Function GetUseMaskScreenFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetUseMaskScreenFlag_x86()
			Else
				Return dx_GetUseMaskScreenFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FillMaskScreen")> _
		Shared Function dx_FillMaskScreen_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FillMaskScreen")> _
		Shared Function dx_FillMaskScreen_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function FillMaskScreen(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FillMaskScreen_x86(Flag)
			Else
				Return dx_FillMaskScreen_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitMask")> _
		Shared Function dx_InitMask_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitMask")> _
		Shared Function dx_InitMask_x64() As Integer
		End Function
		Public Shared Function InitMask() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitMask_x86()
			Else
				Return dx_InitMask_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeMask")> _
		Shared Function dx_MakeMask_x86(Width As Integer, Height As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeMask")> _
		Shared Function dx_MakeMask_x64(Width As Integer, Height As Integer) As Integer
		End Function
		Public Shared Function MakeMask(Width As Integer, Height As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeMask_x86(Width, Height)
			Else
				Return dx_MakeMask_x64(Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMaskSize")> _
		Shared Function dx_GetMaskSize_x86(ByRef WidthBuf As Integer, ByRef HeightBuf As Integer, MaskHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMaskSize")> _
		Shared Function dx_GetMaskSize_x64(ByRef WidthBuf As Integer, ByRef HeightBuf As Integer, MaskHandle As Integer) As Integer
		End Function
		Public Shared Function GetMaskSize(ByRef WidthBuf As Integer, ByRef HeightBuf As Integer, MaskHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMaskSize_x86(WidthBuf, HeightBuf, MaskHandle)
			Else
				Return dx_GetMaskSize_x64(WidthBuf, HeightBuf, MaskHandle)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDataToMask")> _
		Shared Function dx_SetDataToMask_x86(Width As Integer, Height As Integer, MaskData As System.Void*, MaskHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDataToMask")> _
		Shared Function dx_SetDataToMask_x64(Width As Integer, Height As Integer, MaskData As System.Void*, MaskHandle As Integer) As Integer
		End Function
		Public Shared Function SetDataToMask(Width As Integer, Height As Integer, MaskData As System.Void*, MaskHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDataToMask_x86(Width, Height, MaskData, MaskHandle)
			Else
				Return dx_SetDataToMask_x64(Width, Height, MaskData, MaskHandle)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMask")> _
		Shared Function dx_DeleteMask_x86(MaskHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMask")> _
		Shared Function dx_DeleteMask_x64(MaskHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteMask(MaskHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMask_x86(MaskHandle)
			Else
				Return dx_DeleteMask_x64(MaskHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadMask")> _
		Shared Function dx_LoadMask_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadMask")> _
		Shared Function dx_LoadMask_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadMask(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadMask_x86(FileName)
			Else
				Return dx_LoadMask_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadDivMask")> _
		Shared Function dx_LoadDivMask_x86(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadDivMask")> _
		Shared Function dx_LoadDivMask_x64(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
		End Function
		Public Shared Function LoadDivMask(FileName As String, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, YSize As Integer, _
			ByRef HandleBuf As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadDivMask_x86(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf)
			Else
				Return dx_LoadDivMask_x64(FileName, AllNum, XNum, YNum, XSize, YSize, _
					HandleBuf)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateMaskFromMem")> _
		Shared Function dx_CreateMaskFromMem_x86(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateMaskFromMem")> _
		Shared Function dx_CreateMaskFromMem_x64(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		Public Shared Function CreateMaskFromMem(FileImage As System.Void*, FileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateMaskFromMem_x86(FileImage, FileImageSize)
			Else
				Return dx_CreateMaskFromMem_x64(FileImage, FileImageSize)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateDivMaskFromMem")> _
		Shared Function dx_CreateDivMaskFromMem_x86(FileImage As System.Void*, FileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, _
			YSize As Integer, HandleBuf As Integer*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateDivMaskFromMem")> _
		Shared Function dx_CreateDivMaskFromMem_x64(FileImage As System.Void*, FileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, _
			YSize As Integer, HandleBuf As Integer*) As Integer
		End Function
		Public Shared Function CreateDivMaskFromMem(FileImage As System.Void*, FileImageSize As Integer, AllNum As Integer, XNum As Integer, YNum As Integer, XSize As Integer, _
			YSize As Integer, HandleBuf As Integer*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateDivMaskFromMem_x86(FileImage, FileImageSize, AllNum, XNum, YNum, XSize, _
					YSize, HandleBuf)
			Else
				Return dx_CreateDivMaskFromMem_x64(FileImage, FileImageSize, AllNum, XNum, YNum, XSize, _
					YSize, HandleBuf)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawMask")> _
		Shared Function dx_DrawMask_x86(x As Integer, y As Integer, MaskHandle As Integer, TransMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawMask")> _
		Shared Function dx_DrawMask_x64(x As Integer, y As Integer, MaskHandle As Integer, TransMode As Integer) As Integer
		End Function
		Public Shared Function DrawMask(x As Integer, y As Integer, MaskHandle As Integer, TransMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawMask_x86(x, y, MaskHandle, TransMode)
			Else
				Return dx_DrawMask_x64(x, y, MaskHandle, TransMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringMask")> _
		Shared Function dx_DrawStringMask_x86(x As Integer, y As Integer, Flag As Integer, [String] As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringMask")> _
		Shared Function dx_DrawStringMask_x64(x As Integer, y As Integer, Flag As Integer, [String] As String) As Integer
		End Function
		Public Shared Function DrawStringMask(x As Integer, y As Integer, Flag As Integer, [String] As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringMask_x86(x, y, Flag, [String])
			Else
				Return dx_DrawStringMask_x64(x, y, Flag, [String])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringMaskToHandle")> _
		Shared Function dx_DrawStringMaskToHandle_x86(x As Integer, y As Integer, Flag As Integer, FontHandle As Integer, [String] As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringMaskToHandle")> _
		Shared Function dx_DrawStringMaskToHandle_x64(x As Integer, y As Integer, Flag As Integer, FontHandle As Integer, [String] As String) As Integer
		End Function
		Public Shared Function DrawStringMaskToHandle(x As Integer, y As Integer, Flag As Integer, FontHandle As Integer, [String] As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringMaskToHandle_x86(x, y, Flag, FontHandle, [String])
			Else
				Return dx_DrawStringMaskToHandle_x64(x, y, Flag, FontHandle, [String])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawFillMask")> _
		Shared Function dx_DrawFillMask_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, MaskHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawFillMask")> _
		Shared Function dx_DrawFillMask_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, MaskHandle As Integer) As Integer
		End Function
		Public Shared Function DrawFillMask(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, MaskHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawFillMask_x86(x1, y1, x2, y2, MaskHandle)
			Else
				Return dx_DrawFillMask_x64(x1, y1, x2, y2, MaskHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetMaskReverseEffectFlag")> _
		Shared Function dx_SetMaskReverseEffectFlag_x86(ReverseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetMaskReverseEffectFlag")> _
		Shared Function dx_SetMaskReverseEffectFlag_x64(ReverseFlag As Integer) As Integer
		End Function
		Public Shared Function SetMaskReverseEffectFlag(ReverseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetMaskReverseEffectFlag_x86(ReverseFlag)
			Else
				Return dx_SetMaskReverseEffectFlag_x64(ReverseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMaskScreenData")> _
		Shared Function dx_GetMaskScreenData_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, MaskHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMaskScreenData")> _
		Shared Function dx_GetMaskScreenData_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, MaskHandle As Integer) As Integer
		End Function
		Public Shared Function GetMaskScreenData(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, MaskHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMaskScreenData_x86(x1, y1, x2, y2, MaskHandle)
			Else
				Return dx_GetMaskScreenData_x64(x1, y1, x2, y2, MaskHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMaskUseFlag")> _
		Shared Function dx_GetMaskUseFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMaskUseFlag")> _
		Shared Function dx_GetMaskUseFlag_x64() As Integer
		End Function
		Public Shared Function GetMaskUseFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMaskUseFlag_x86()
			Else
				Return dx_GetMaskUseFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_EnumFontName")> _
		Shared Function dx_EnumFontName_x86(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, JapanOnlyFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_EnumFontName")> _
		Shared Function dx_EnumFontName_x64(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, JapanOnlyFlag As Integer) As Integer
		End Function
		Public Shared Function EnumFontName(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_EnumFontName_x86(NameBuffer, NameBufferNum, [TRUE])
			Else
				Return dx_EnumFontName_x64(NameBuffer, NameBufferNum, [TRUE])
			End If
		End Function
		Public Shared Function EnumFontName(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, JapanOnlyFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_EnumFontName_x86(NameBuffer, NameBufferNum, JapanOnlyFlag)
			Else
				Return dx_EnumFontName_x64(NameBuffer, NameBufferNum, JapanOnlyFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_EnumFontNameEx")> _
		Shared Function dx_EnumFontNameEx_x86(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, CharSet As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_EnumFontNameEx")> _
		Shared Function dx_EnumFontNameEx_x64(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, CharSet As Integer) As Integer
		End Function
		Public Shared Function EnumFontNameEx(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_EnumFontNameEx_x86(NameBuffer, NameBufferNum, -1)
			Else
				Return dx_EnumFontNameEx_x64(NameBuffer, NameBufferNum, -1)
			End If
		End Function
		Public Shared Function EnumFontNameEx(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_EnumFontNameEx_x86(NameBuffer, NameBufferNum, CharSet)
			Else
				Return dx_EnumFontNameEx_x64(NameBuffer, NameBufferNum, CharSet)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_EnumFontNameEx2")> _
		Shared Function dx_EnumFontNameEx2_x86(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, EnumFontName As String, CharSet As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_EnumFontNameEx2")> _
		Shared Function dx_EnumFontNameEx2_x64(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, EnumFontName As String, CharSet As Integer) As Integer
		End Function
		Public Shared Function EnumFontNameEx2(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, EnumFontName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_EnumFontNameEx2_x86(NameBuffer, NameBufferNum, EnumFontName, -1)
			Else
				Return dx_EnumFontNameEx2_x64(NameBuffer, NameBufferNum, EnumFontName, -1)
			End If
		End Function
		Public Shared Function EnumFontNameEx2(NameBuffer As System.Text.StringBuilder, NameBufferNum As Integer, EnumFontName As String, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_EnumFontNameEx2_x86(NameBuffer, NameBufferNum, EnumFontName, CharSet)
			Else
				Return dx_EnumFontNameEx2_x64(NameBuffer, NameBufferNum, EnumFontName, CharSet)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckFontName")> _
		Shared Function dx_CheckFontName_x86(FontName As String, CharSet As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckFontName")> _
		Shared Function dx_CheckFontName_x64(FontName As String, CharSet As Integer) As Integer
		End Function
		Public Shared Function CheckFontName(FontName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckFontName_x86(FontName, -1)
			Else
				Return dx_CheckFontName_x64(FontName, -1)
			End If
		End Function
		Public Shared Function CheckFontName(FontName As String, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckFontName_x86(FontName, CharSet)
			Else
				Return dx_CheckFontName_x64(FontName, CharSet)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitFontToHandle")> _
		Shared Function dx_InitFontToHandle_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitFontToHandle")> _
		Shared Function dx_InitFontToHandle_x64() As Integer
		End Function
		Public Shared Function InitFontToHandle() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitFontToHandle_x86()
			Else
				Return dx_InitFontToHandle_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateFontToHandle")> _
		Shared Function dx_CreateFontToHandle_x86(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer, Handle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateFontToHandle")> _
		Shared Function dx_CreateFontToHandle_x64(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer, Handle As Integer) As Integer
		End Function
		Public Shared Function CreateFontToHandle(FontName As String, Size As Integer, Thick As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFontToHandle_x86(FontName, Size, Thick, -1, -1, -1, _
					[FALSE], -1)
			Else
				Return dx_CreateFontToHandle_x64(FontName, Size, Thick, -1, -1, -1, _
					[FALSE], -1)
			End If
		End Function
		Public Shared Function CreateFontToHandle(FontName As String, Size As Integer, Thick As Integer, FontType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFontToHandle_x86(FontName, Size, Thick, FontType, -1, -1, _
					[FALSE], -1)
			Else
				Return dx_CreateFontToHandle_x64(FontName, Size, Thick, FontType, -1, -1, _
					[FALSE], -1)
			End If
		End Function
		Public Shared Function CreateFontToHandle(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFontToHandle_x86(FontName, Size, Thick, FontType, CharSet, -1, _
					[FALSE], -1)
			Else
				Return dx_CreateFontToHandle_x64(FontName, Size, Thick, FontType, CharSet, -1, _
					[FALSE], -1)
			End If
		End Function
		Public Shared Function CreateFontToHandle(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFontToHandle_x86(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					[FALSE], -1)
			Else
				Return dx_CreateFontToHandle_x64(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					[FALSE], -1)
			End If
		End Function
		Public Shared Function CreateFontToHandle(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFontToHandle_x86(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					Italic, -1)
			Else
				Return dx_CreateFontToHandle_x64(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					Italic, -1)
			End If
		End Function
		Public Shared Function CreateFontToHandle(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer, Handle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFontToHandle_x86(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					Italic, Handle)
			Else
				Return dx_CreateFontToHandle_x64(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					Italic, Handle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontSpaceToHandle")> _
		Shared Function dx_SetFontSpaceToHandle_x86(Point As Integer, FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontSpaceToHandle")> _
		Shared Function dx_SetFontSpaceToHandle_x64(Point As Integer, FontHandle As Integer) As Integer
		End Function
		Public Shared Function SetFontSpaceToHandle(Point As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontSpaceToHandle_x86(Point, FontHandle)
			Else
				Return dx_SetFontSpaceToHandle_x64(Point, FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteFontToHandle")> _
		Shared Function dx_DeleteFontToHandle_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteFontToHandle")> _
		Shared Function dx_DeleteFontToHandle_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteFontToHandle(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteFontToHandle_x86(FontHandle)
			Else
				Return dx_DeleteFontToHandle_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontLostFlag")> _
		Shared Function dx_SetFontLostFlag_x86(FontHandle As Integer, ByRef LostFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontLostFlag")> _
		Shared Function dx_SetFontLostFlag_x64(FontHandle As Integer, ByRef LostFlag As Integer) As Integer
		End Function
		Public Shared Function SetFontLostFlag(FontHandle As Integer, ByRef LostFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontLostFlag_x86(FontHandle, LostFlag)
			Else
				Return dx_SetFontLostFlag_x64(FontHandle, LostFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeFont")> _
		Shared Function dx_ChangeFont_x86(FontName As String, CharSet As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeFont")> _
		Shared Function dx_ChangeFont_x64(FontName As String, CharSet As Integer) As Integer
		End Function
		Public Shared Function ChangeFont(FontName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeFont_x86(FontName, -1)
			Else
				Return dx_ChangeFont_x64(FontName, -1)
			End If
		End Function
		Public Shared Function ChangeFont(FontName As String, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeFont_x86(FontName, CharSet)
			Else
				Return dx_ChangeFont_x64(FontName, CharSet)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeFontType")> _
		Shared Function dx_ChangeFontType_x86(FontType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeFontType")> _
		Shared Function dx_ChangeFontType_x64(FontType As Integer) As Integer
		End Function
		Public Shared Function ChangeFontType(FontType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeFontType_x86(FontType)
			Else
				Return dx_ChangeFontType_x64(FontType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontSize")> _
		Shared Function dx_SetFontSize_x86(FontSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontSize")> _
		Shared Function dx_SetFontSize_x64(FontSize As Integer) As Integer
		End Function
		Public Shared Function SetFontSize(FontSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontSize_x86(FontSize)
			Else
				Return dx_SetFontSize_x64(FontSize)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontSize")> _
		Shared Function dx_GetFontSize_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontSize")> _
		Shared Function dx_GetFontSize_x64() As Integer
		End Function
		Public Shared Function GetFontSize() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontSize_x86()
			Else
				Return dx_GetFontSize_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontThickness")> _
		Shared Function dx_SetFontThickness_x86(ThickPal As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontThickness")> _
		Shared Function dx_SetFontThickness_x64(ThickPal As Integer) As Integer
		End Function
		Public Shared Function SetFontThickness(ThickPal As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontThickness_x86(ThickPal)
			Else
				Return dx_SetFontThickness_x64(ThickPal)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontSpace")> _
		Shared Function dx_SetFontSpace_x86(Point As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontSpace")> _
		Shared Function dx_SetFontSpace_x64(Point As Integer) As Integer
		End Function
		Public Shared Function SetFontSpace(Point As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontSpace_x86(Point)
			Else
				Return dx_SetFontSpace_x64(Point)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontSpace")> _
		Shared Function dx_GetFontSpace_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontSpace")> _
		Shared Function dx_GetFontSpace_x64() As Integer
		End Function
		Public Shared Function GetFontSpace() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontSpace_x86()
			Else
				Return dx_GetFontSpace_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDefaultFontState")> _
		Shared Function dx_SetDefaultFontState_x86(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDefaultFontState")> _
		Shared Function dx_SetDefaultFontState_x64(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer) As Integer
		End Function
		Public Shared Function SetDefaultFontState(FontName As String, Size As Integer, Thick As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDefaultFontState_x86(FontName, Size, Thick, -1, -1, -1, _
					[FALSE])
			Else
				Return dx_SetDefaultFontState_x64(FontName, Size, Thick, -1, -1, -1, _
					[FALSE])
			End If
		End Function
		Public Shared Function SetDefaultFontState(FontName As String, Size As Integer, Thick As Integer, FontType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDefaultFontState_x86(FontName, Size, Thick, FontType, -1, -1, _
					[FALSE])
			Else
				Return dx_SetDefaultFontState_x64(FontName, Size, Thick, FontType, -1, -1, _
					[FALSE])
			End If
		End Function
		Public Shared Function SetDefaultFontState(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDefaultFontState_x86(FontName, Size, Thick, FontType, CharSet, -1, _
					[FALSE])
			Else
				Return dx_SetDefaultFontState_x64(FontName, Size, Thick, FontType, CharSet, -1, _
					[FALSE])
			End If
		End Function
		Public Shared Function SetDefaultFontState(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDefaultFontState_x86(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					[FALSE])
			Else
				Return dx_SetDefaultFontState_x64(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					[FALSE])
			End If
		End Function
		Public Shared Function SetDefaultFontState(FontName As String, Size As Integer, Thick As Integer, FontType As Integer, CharSet As Integer, EdgeSize As Integer, _
			Italic As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDefaultFontState_x86(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					Italic)
			Else
				Return dx_SetDefaultFontState_x64(FontName, Size, Thick, FontType, CharSet, EdgeSize, _
					Italic)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDefaultFontHandle")> _
		Shared Function dx_GetDefaultFontHandle_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDefaultFontHandle")> _
		Shared Function dx_GetDefaultFontHandle_x64() As Integer
		End Function
		Public Shared Function GetDefaultFontHandle() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDefaultFontHandle_x86()
			Else
				Return dx_GetDefaultFontHandle_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontMaxWidth")> _
		Shared Function dx_GetFontMaxWidth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontMaxWidth")> _
		Shared Function dx_GetFontMaxWidth_x64() As Integer
		End Function
		Public Shared Function GetFontMaxWidth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontMaxWidth_x86()
			Else
				Return dx_GetFontMaxWidth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawStringWidth")> _
		Shared Function dx_GetDrawStringWidth_x86([String] As String, StrLen As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawStringWidth")> _
		Shared Function dx_GetDrawStringWidth_x64([String] As String, StrLen As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function GetDrawStringWidth([String] As String, StrLen As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawStringWidth_x86([String], StrLen, [FALSE])
			Else
				Return dx_GetDrawStringWidth_x64([String], StrLen, [FALSE])
			End If
		End Function
		Public Shared Function GetDrawStringWidth([String] As String, StrLen As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawStringWidth_x86([String], StrLen, VerticalFlag)
			Else
				Return dx_GetDrawStringWidth_x64([String], StrLen, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawExtendStringWidth")> _
		Shared Function dx_GetDrawExtendStringWidth_x86(ExRateX As Double, [String] As String, StrLen As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawExtendStringWidth")> _
		Shared Function dx_GetDrawExtendStringWidth_x64(ExRateX As Double, [String] As String, StrLen As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function GetDrawExtendStringWidth(ExRateX As Double, [String] As String, StrLen As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawExtendStringWidth_x86(ExRateX, [String], StrLen, [FALSE])
			Else
				Return dx_GetDrawExtendStringWidth_x64(ExRateX, [String], StrLen, [FALSE])
			End If
		End Function
		Public Shared Function GetDrawExtendStringWidth(ExRateX As Double, [String] As String, StrLen As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawExtendStringWidth_x86(ExRateX, [String], StrLen, VerticalFlag)
			Else
				Return dx_GetDrawExtendStringWidth_x64(ExRateX, [String], StrLen, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontMaxWidthToHandle")> _
		Shared Function dx_GetFontMaxWidthToHandle_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontMaxWidthToHandle")> _
		Shared Function dx_GetFontMaxWidthToHandle_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function GetFontMaxWidthToHandle(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontMaxWidthToHandle_x86(FontHandle)
			Else
				Return dx_GetFontMaxWidthToHandle_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontSizeToHandle")> _
		Shared Function dx_GetFontSizeToHandle_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontSizeToHandle")> _
		Shared Function dx_GetFontSizeToHandle_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function GetFontSizeToHandle(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontSizeToHandle_x86(FontHandle)
			Else
				Return dx_GetFontSizeToHandle_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontSpaceToHandle")> _
		Shared Function dx_GetFontSpaceToHandle_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontSpaceToHandle")> _
		Shared Function dx_GetFontSpaceToHandle_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function GetFontSpaceToHandle(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontSpaceToHandle_x86(FontHandle)
			Else
				Return dx_GetFontSpaceToHandle_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontCharInfo")> _
		Shared Function dx_GetFontCharInfo_x86(FontHandle As Integer, [Char] As String, ByRef DrawX As Integer, ByRef DrawY As Integer, ByRef NextCharX As Integer, ByRef SizeX As Integer, _
			ByRef SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontCharInfo")> _
		Shared Function dx_GetFontCharInfo_x64(FontHandle As Integer, [Char] As String, ByRef DrawX As Integer, ByRef DrawY As Integer, ByRef NextCharX As Integer, ByRef SizeX As Integer, _
			ByRef SizeY As Integer) As Integer
		End Function
		Public Shared Function GetFontCharInfo(FontHandle As Integer, [Char] As String, ByRef DrawX As Integer, ByRef DrawY As Integer, ByRef NextCharX As Integer, ByRef SizeX As Integer, _
			ByRef SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontCharInfo_x86(FontHandle, [Char], DrawX, DrawY, NextCharX, SizeX, _
					SizeY)
			Else
				Return dx_GetFontCharInfo_x64(FontHandle, [Char], DrawX, DrawY, NextCharX, SizeX, _
					SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawStringWidthToHandle")> _
		Shared Function dx_GetDrawStringWidthToHandle_x86([String] As String, StrLen As Integer, FontHandle As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawStringWidthToHandle")> _
		Shared Function dx_GetDrawStringWidthToHandle_x64([String] As String, StrLen As Integer, FontHandle As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function GetDrawStringWidthToHandle([String] As String, StrLen As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawStringWidthToHandle_x86([String], StrLen, FontHandle, [FALSE])
			Else
				Return dx_GetDrawStringWidthToHandle_x64([String], StrLen, FontHandle, [FALSE])
			End If
		End Function
		Public Shared Function GetDrawStringWidthToHandle([String] As String, StrLen As Integer, FontHandle As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawStringWidthToHandle_x86([String], StrLen, FontHandle, VerticalFlag)
			Else
				Return dx_GetDrawStringWidthToHandle_x64([String], StrLen, FontHandle, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawExtendStringWidthToHandle")> _
		Shared Function dx_GetDrawExtendStringWidthToHandle_x86(ExRateX As Double, [String] As String, StrLen As Integer, FontHandle As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawExtendStringWidthToHandle")> _
		Shared Function dx_GetDrawExtendStringWidthToHandle_x64(ExRateX As Double, [String] As String, StrLen As Integer, FontHandle As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function GetDrawExtendStringWidthToHandle(ExRateX As Double, [String] As String, StrLen As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawExtendStringWidthToHandle_x86(ExRateX, [String], StrLen, FontHandle, [FALSE])
			Else
				Return dx_GetDrawExtendStringWidthToHandle_x64(ExRateX, [String], StrLen, FontHandle, [FALSE])
			End If
		End Function
		Public Shared Function GetDrawExtendStringWidthToHandle(ExRateX As Double, [String] As String, StrLen As Integer, FontHandle As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawExtendStringWidthToHandle_x86(ExRateX, [String], StrLen, FontHandle, VerticalFlag)
			Else
				Return dx_GetDrawExtendStringWidthToHandle_x64(ExRateX, [String], StrLen, FontHandle, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontStateToHandle")> _
		Shared Function dx_GetFontStateToHandle_x86(FontName As System.Text.StringBuilder, ByRef Size As Integer, ByRef Thick As Integer, FontHandle As Integer, ByRef FontType As Integer, ByRef CharSet As Integer, _
			ByRef EdgeSize As Integer, ByRef Italic As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontStateToHandle")> _
		Shared Function dx_GetFontStateToHandle_x64(FontName As System.Text.StringBuilder, ByRef Size As Integer, ByRef Thick As Integer, FontHandle As Integer, ByRef FontType As Integer, ByRef CharSet As Integer, _
			ByRef EdgeSize As Integer, ByRef Italic As Integer) As Integer
		End Function
		Public Shared Function GetFontStateToHandle(FontName As System.Text.StringBuilder, ByRef Size As Integer, ByRef Thick As Integer, FontHandle As Integer, ByRef FontType As Integer, ByRef CharSet As Integer, _
			ByRef EdgeSize As Integer, ByRef Italic As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontStateToHandle_x86(FontName, Size, Thick, FontHandle, FontType, CharSet, _
					EdgeSize, Italic)
			Else
				Return dx_GetFontStateToHandle_x64(FontName, Size, Thick, FontHandle, FontType, CharSet, _
					EdgeSize, Italic)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckFontCacheToTextureFlag")> _
		Shared Function dx_CheckFontCacheToTextureFlag_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckFontCacheToTextureFlag")> _
		Shared Function dx_CheckFontCacheToTextureFlag_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function CheckFontCacheToTextureFlag(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckFontCacheToTextureFlag_x86(FontHandle)
			Else
				Return dx_CheckFontCacheToTextureFlag_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckFontChacheToTextureFlag")> _
		Shared Function dx_CheckFontChacheToTextureFlag_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckFontChacheToTextureFlag")> _
		Shared Function dx_CheckFontChacheToTextureFlag_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function CheckFontChacheToTextureFlag(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckFontChacheToTextureFlag_x86(FontHandle)
			Else
				Return dx_CheckFontChacheToTextureFlag_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckFontHandleValid")> _
		Shared Function dx_CheckFontHandleValid_x86(FontHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckFontHandleValid")> _
		Shared Function dx_CheckFontHandleValid_x64(FontHandle As Integer) As Integer
		End Function
		Public Shared Function CheckFontHandleValid(FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckFontHandleValid_x86(FontHandle)
			Else
				Return dx_CheckFontHandleValid_x64(FontHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontCacheToTextureFlag")> _
		Shared Function dx_SetFontCacheToTextureFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontCacheToTextureFlag")> _
		Shared Function dx_SetFontCacheToTextureFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetFontCacheToTextureFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontCacheToTextureFlag_x86(Flag)
			Else
				Return dx_SetFontCacheToTextureFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontCacheToTextureFlag")> _
		Shared Function dx_GetFontCacheToTextureFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontCacheToTextureFlag")> _
		Shared Function dx_GetFontCacheToTextureFlag_x64() As Integer
		End Function
		Public Shared Function GetFontCacheToTextureFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontCacheToTextureFlag_x86()
			Else
				Return dx_GetFontCacheToTextureFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontChacheToTextureFlag")> _
		Shared Function dx_SetFontChacheToTextureFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontChacheToTextureFlag")> _
		Shared Function dx_SetFontChacheToTextureFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetFontChacheToTextureFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontChacheToTextureFlag_x86(Flag)
			Else
				Return dx_SetFontChacheToTextureFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontChacheToTextureFlag")> _
		Shared Function dx_GetFontChacheToTextureFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontChacheToTextureFlag")> _
		Shared Function dx_GetFontChacheToTextureFlag_x64() As Integer
		End Function
		Public Shared Function GetFontChacheToTextureFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontChacheToTextureFlag_x86()
			Else
				Return dx_GetFontChacheToTextureFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontCacheTextureColorBitDepth")> _
		Shared Function dx_SetFontCacheTextureColorBitDepth_x86(ColorBitDepth As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontCacheTextureColorBitDepth")> _
		Shared Function dx_SetFontCacheTextureColorBitDepth_x64(ColorBitDepth As Integer) As Integer
		End Function
		Public Shared Function SetFontCacheTextureColorBitDepth(ColorBitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontCacheTextureColorBitDepth_x86(ColorBitDepth)
			Else
				Return dx_SetFontCacheTextureColorBitDepth_x64(ColorBitDepth)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontCacheTextureColorBitDepth")> _
		Shared Function dx_GetFontCacheTextureColorBitDepth_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontCacheTextureColorBitDepth")> _
		Shared Function dx_GetFontCacheTextureColorBitDepth_x64() As Integer
		End Function
		Public Shared Function GetFontCacheTextureColorBitDepth() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontCacheTextureColorBitDepth_x86()
			Else
				Return dx_GetFontCacheTextureColorBitDepth_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontCacheCharNum")> _
		Shared Function dx_SetFontCacheCharNum_x86(CharNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontCacheCharNum")> _
		Shared Function dx_SetFontCacheCharNum_x64(CharNum As Integer) As Integer
		End Function
		Public Shared Function SetFontCacheCharNum(CharNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontCacheCharNum_x86(CharNum)
			Else
				Return dx_SetFontCacheCharNum_x64(CharNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontCacheCharNum")> _
		Shared Function dx_GetFontCacheCharNum_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontCacheCharNum")> _
		Shared Function dx_GetFontCacheCharNum_x64() As Integer
		End Function
		Public Shared Function GetFontCacheCharNum() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontCacheCharNum_x86()
			Else
				Return dx_GetFontCacheCharNum_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFontCacheUsePremulAlphaFlag")> _
		Shared Function dx_SetFontCacheUsePremulAlphaFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFontCacheUsePremulAlphaFlag")> _
		Shared Function dx_SetFontCacheUsePremulAlphaFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetFontCacheUsePremulAlphaFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFontCacheUsePremulAlphaFlag_x86(Flag)
			Else
				Return dx_SetFontCacheUsePremulAlphaFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFontCacheUsePremulAlphaFlag")> _
		Shared Function dx_GetFontCacheUsePremulAlphaFlag_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFontCacheUsePremulAlphaFlag")> _
		Shared Function dx_GetFontCacheUsePremulAlphaFlag_x64() As Integer
		End Function
		Public Shared Function GetFontCacheUsePremulAlphaFlag() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFontCacheUsePremulAlphaFlag_x86()
			Else
				Return dx_GetFontCacheUsePremulAlphaFlag_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MultiByteCharCheck")> _
		Shared Function dx_MultiByteCharCheck_x86(Buf As String, CharSet As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MultiByteCharCheck")> _
		Shared Function dx_MultiByteCharCheck_x64(Buf As String, CharSet As Integer) As Integer
		End Function
		Public Shared Function MultiByteCharCheck(Buf As String, CharSet As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MultiByteCharCheck_x86(Buf, CharSet)
			Else
				Return dx_MultiByteCharCheck_x64(Buf, CharSet)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawString")> _
		Shared Function dx_DrawString_x86(x As Integer, y As Integer, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawString")> _
		Shared Function dx_DrawString_x64(x As Integer, y As Integer, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawString(x As Integer, y As Integer, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawString_x86(x, y, [String], Color, 0)
			Else
				Return dx_DrawString_x64(x, y, [String], Color, 0)
			End If
		End Function
		Public Shared Function DrawString(x As Integer, y As Integer, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawString_x86(x, y, [String], Color, EdgeColor)
			Else
				Return dx_DrawString_x64(x, y, [String], Color, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawVString")> _
		Shared Function dx_DrawVString_x86(x As Integer, y As Integer, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawVString")> _
		Shared Function dx_DrawVString_x64(x As Integer, y As Integer, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawVString(x As Integer, y As Integer, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVString_x86(x, y, [String], Color, 0)
			Else
				Return dx_DrawVString_x64(x, y, [String], Color, 0)
			End If
		End Function
		Public Shared Function DrawVString(x As Integer, y As Integer, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVString_x86(x, y, [String], Color, EdgeColor)
			Else
				Return dx_DrawVString_x64(x, y, [String], Color, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendString")> _
		Shared Function dx_DrawExtendString_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendString")> _
		Shared Function dx_DrawExtendString_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawExtendString(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendString_x86(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			Else
				Return dx_DrawExtendString_x64(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			End If
		End Function
		Public Shared Function DrawExtendString(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendString_x86(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			Else
				Return dx_DrawExtendString_x64(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendVString")> _
		Shared Function dx_DrawExtendVString_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendVString")> _
		Shared Function dx_DrawExtendVString_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawExtendVString(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVString_x86(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			Else
				Return dx_DrawExtendVString_x64(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			End If
		End Function
		Public Shared Function DrawExtendVString(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVString_x86(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			Else
				Return dx_DrawExtendVString_x64(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringF")> _
		Shared Function dx_DrawStringF_x86(x As Single, y As Single, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringF")> _
		Shared Function dx_DrawStringF_x64(x As Single, y As Single, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawStringF(x As Single, y As Single, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringF_x86(x, y, [String], Color, 0)
			Else
				Return dx_DrawStringF_x64(x, y, [String], Color, 0)
			End If
		End Function
		Public Shared Function DrawStringF(x As Single, y As Single, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringF_x86(x, y, [String], Color, EdgeColor)
			Else
				Return dx_DrawStringF_x64(x, y, [String], Color, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawVStringF")> _
		Shared Function dx_DrawVStringF_x86(x As Single, y As Single, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawVStringF")> _
		Shared Function dx_DrawVStringF_x64(x As Single, y As Single, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawVStringF(x As Single, y As Single, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringF_x86(x, y, [String], Color, 0)
			Else
				Return dx_DrawVStringF_x64(x, y, [String], Color, 0)
			End If
		End Function
		Public Shared Function DrawVStringF(x As Single, y As Single, [String] As String, Color As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringF_x86(x, y, [String], Color, EdgeColor)
			Else
				Return dx_DrawVStringF_x64(x, y, [String], Color, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendStringF")> _
		Shared Function dx_DrawExtendStringF_x86(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendStringF")> _
		Shared Function dx_DrawExtendStringF_x64(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawExtendStringF(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringF_x86(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			Else
				Return dx_DrawExtendStringF_x64(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			End If
		End Function
		Public Shared Function DrawExtendStringF(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringF_x86(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			Else
				Return dx_DrawExtendStringF_x64(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendVStringF")> _
		Shared Function dx_DrawExtendVStringF_x86(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendVStringF")> _
		Shared Function dx_DrawExtendVStringF_x64(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawExtendVStringF(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringF_x86(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			Else
				Return dx_DrawExtendVStringF_x64(x, y, ExRateX, ExRateY, [String], Color, _
					0)
			End If
		End Function
		Public Shared Function DrawExtendVStringF(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringF_x86(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			Else
				Return dx_DrawExtendVStringF_x64(x, y, ExRateX, ExRateY, [String], Color, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberToI")> _
		Shared Function dx_DrawNumberToI_x86(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberToI")> _
		Shared Function dx_DrawNumberToI_x64(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberToI(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToI_x86(x, y, Num, RisesNum, Color, 0)
			Else
				Return dx_DrawNumberToI_x64(x, y, Num, RisesNum, Color, 0)
			End If
		End Function
		Public Shared Function DrawNumberToI(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToI_x86(x, y, Num, RisesNum, Color, EdgeColor)
			Else
				Return dx_DrawNumberToI_x64(x, y, Num, RisesNum, Color, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberToF")> _
		Shared Function dx_DrawNumberToF_x86(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberToF")> _
		Shared Function dx_DrawNumberToF_x64(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberToF(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToF_x86(x, y, Num, Length, Color, 0)
			Else
				Return dx_DrawNumberToF_x64(x, y, Num, Length, Color, 0)
			End If
		End Function
		Public Shared Function DrawNumberToF(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToF_x86(x, y, Num, Length, Color, EdgeColor)
			Else
				Return dx_DrawNumberToF_x64(x, y, Num, Length, Color, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberPlusToI")> _
		Shared Function dx_DrawNumberPlusToI_x86(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberPlusToI")> _
		Shared Function dx_DrawNumberPlusToI_x64(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberPlusToI(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToI_x86(x, y, NoteString, Num, RisesNum, Color, _
					0)
			Else
				Return dx_DrawNumberPlusToI_x64(x, y, NoteString, Num, RisesNum, Color, _
					0)
			End If
		End Function
		Public Shared Function DrawNumberPlusToI(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToI_x86(x, y, NoteString, Num, RisesNum, Color, _
					EdgeColor)
			Else
				Return dx_DrawNumberPlusToI_x64(x, y, NoteString, Num, RisesNum, Color, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberPlusToF")> _
		Shared Function dx_DrawNumberPlusToF_x86(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberPlusToF")> _
		Shared Function dx_DrawNumberPlusToF_x64(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberPlusToF(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToF_x86(x, y, NoteString, Num, Length, Color, _
					0)
			Else
				Return dx_DrawNumberPlusToF_x64(x, y, NoteString, Num, Length, Color, _
					0)
			End If
		End Function
		Public Shared Function DrawNumberPlusToF(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToF_x86(x, y, NoteString, Num, Length, Color, _
					EdgeColor)
			Else
				Return dx_DrawNumberPlusToF_x64(x, y, NoteString, Num, Length, Color, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringToZBuffer")> _
		Shared Function dx_DrawStringToZBuffer_x86(x As Integer, y As Integer, [String] As String, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringToZBuffer")> _
		Shared Function dx_DrawStringToZBuffer_x64(x As Integer, y As Integer, [String] As String, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawStringToZBuffer(x As Integer, y As Integer, [String] As String, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringToZBuffer_x86(x, y, [String], WriteZMode)
			Else
				Return dx_DrawStringToZBuffer_x64(x, y, [String], WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawVStringToZBuffer")> _
		Shared Function dx_DrawVStringToZBuffer_x86(x As Integer, y As Integer, [String] As String, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawVStringToZBuffer")> _
		Shared Function dx_DrawVStringToZBuffer_x64(x As Integer, y As Integer, [String] As String, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawVStringToZBuffer(x As Integer, y As Integer, [String] As String, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringToZBuffer_x86(x, y, [String], WriteZMode)
			Else
				Return dx_DrawVStringToZBuffer_x64(x, y, [String], WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendStringToZBuffer")> _
		Shared Function dx_DrawExtendStringToZBuffer_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendStringToZBuffer")> _
		Shared Function dx_DrawExtendStringToZBuffer_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawExtendStringToZBuffer(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringToZBuffer_x86(x, y, ExRateX, ExRateY, [String], WriteZMode)
			Else
				Return dx_DrawExtendStringToZBuffer_x64(x, y, ExRateX, ExRateY, [String], WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendVStringToZBuffer")> _
		Shared Function dx_DrawExtendVStringToZBuffer_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendVStringToZBuffer")> _
		Shared Function dx_DrawExtendVStringToZBuffer_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawExtendVStringToZBuffer(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringToZBuffer_x86(x, y, ExRateX, ExRateY, [String], WriteZMode)
			Else
				Return dx_DrawExtendVStringToZBuffer_x64(x, y, ExRateX, ExRateY, [String], WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringToHandle")> _
		Shared Function dx_DrawStringToHandle_x86(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer, _
			VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringToHandle")> _
		Shared Function dx_DrawStringToHandle_x64(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer, _
			VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function DrawStringToHandle(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringToHandle_x86(x, y, [String], Color, FontHandle, 0, _
					[FALSE])
			Else
				Return dx_DrawStringToHandle_x64(x, y, [String], Color, FontHandle, 0, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawStringToHandle(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringToHandle_x86(x, y, [String], Color, FontHandle, EdgeColor, _
					[FALSE])
			Else
				Return dx_DrawStringToHandle_x64(x, y, [String], Color, FontHandle, EdgeColor, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawStringToHandle(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer, _
			VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringToHandle_x86(x, y, [String], Color, FontHandle, EdgeColor, _
					VerticalFlag)
			Else
				Return dx_DrawStringToHandle_x64(x, y, [String], Color, FontHandle, EdgeColor, _
					VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawVStringToHandle")> _
		Shared Function dx_DrawVStringToHandle_x86(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawVStringToHandle")> _
		Shared Function dx_DrawVStringToHandle_x64(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawVStringToHandle(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringToHandle_x86(x, y, [String], Color, FontHandle, 0)
			Else
				Return dx_DrawVStringToHandle_x64(x, y, [String], Color, FontHandle, 0)
			End If
		End Function
		Public Shared Function DrawVStringToHandle(x As Integer, y As Integer, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringToHandle_x86(x, y, [String], Color, FontHandle, EdgeColor)
			Else
				Return dx_DrawVStringToHandle_x64(x, y, [String], Color, FontHandle, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendStringToHandle")> _
		Shared Function dx_DrawExtendStringToHandle_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendStringToHandle")> _
		Shared Function dx_DrawExtendStringToHandle_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function DrawExtendStringToHandle(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0, [FALSE])
			Else
				Return dx_DrawExtendStringToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0, [FALSE])
			End If
		End Function
		Public Shared Function DrawExtendStringToHandle(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, [FALSE])
			Else
				Return dx_DrawExtendStringToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, [FALSE])
			End If
		End Function
		Public Shared Function DrawExtendStringToHandle(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, VerticalFlag)
			Else
				Return dx_DrawExtendStringToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendVStringToHandle")> _
		Shared Function dx_DrawExtendVStringToHandle_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendVStringToHandle")> _
		Shared Function dx_DrawExtendVStringToHandle_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawExtendVStringToHandle(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0)
			Else
				Return dx_DrawExtendVStringToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0)
			End If
		End Function
		Public Shared Function DrawExtendVStringToHandle(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor)
			Else
				Return dx_DrawExtendVStringToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringFToHandle")> _
		Shared Function dx_DrawStringFToHandle_x86(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer, _
			VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringFToHandle")> _
		Shared Function dx_DrawStringFToHandle_x64(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer, _
			VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function DrawStringFToHandle(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringFToHandle_x86(x, y, [String], Color, FontHandle, 0, _
					[FALSE])
			Else
				Return dx_DrawStringFToHandle_x64(x, y, [String], Color, FontHandle, 0, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawStringFToHandle(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringFToHandle_x86(x, y, [String], Color, FontHandle, EdgeColor, _
					[FALSE])
			Else
				Return dx_DrawStringFToHandle_x64(x, y, [String], Color, FontHandle, EdgeColor, _
					[FALSE])
			End If
		End Function
		Public Shared Function DrawStringFToHandle(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer, _
			VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringFToHandle_x86(x, y, [String], Color, FontHandle, EdgeColor, _
					VerticalFlag)
			Else
				Return dx_DrawStringFToHandle_x64(x, y, [String], Color, FontHandle, EdgeColor, _
					VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawVStringFToHandle")> _
		Shared Function dx_DrawVStringFToHandle_x86(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawVStringFToHandle")> _
		Shared Function dx_DrawVStringFToHandle_x64(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawVStringFToHandle(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringFToHandle_x86(x, y, [String], Color, FontHandle, 0)
			Else
				Return dx_DrawVStringFToHandle_x64(x, y, [String], Color, FontHandle, 0)
			End If
		End Function
		Public Shared Function DrawVStringFToHandle(x As Single, y As Single, [String] As String, Color As Integer, FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringFToHandle_x86(x, y, [String], Color, FontHandle, EdgeColor)
			Else
				Return dx_DrawVStringFToHandle_x64(x, y, [String], Color, FontHandle, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendStringFToHandle")> _
		Shared Function dx_DrawExtendStringFToHandle_x86(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendStringFToHandle")> _
		Shared Function dx_DrawExtendStringFToHandle_x64(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function DrawExtendStringFToHandle(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringFToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0, [FALSE])
			Else
				Return dx_DrawExtendStringFToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0, [FALSE])
			End If
		End Function
		Public Shared Function DrawExtendStringFToHandle(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringFToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, [FALSE])
			Else
				Return dx_DrawExtendStringFToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, [FALSE])
			End If
		End Function
		Public Shared Function DrawExtendStringFToHandle(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringFToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, VerticalFlag)
			Else
				Return dx_DrawExtendStringFToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendVStringFToHandle")> _
		Shared Function dx_DrawExtendVStringFToHandle_x86(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendVStringFToHandle")> _
		Shared Function dx_DrawExtendVStringFToHandle_x64(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawExtendVStringFToHandle(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringFToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0)
			Else
				Return dx_DrawExtendVStringFToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, 0)
			End If
		End Function
		Public Shared Function DrawExtendVStringFToHandle(x As Single, y As Single, ExRateX As Double, ExRateY As Double, [String] As String, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringFToHandle_x86(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor)
			Else
				Return dx_DrawExtendVStringFToHandle_x64(x, y, ExRateX, ExRateY, [String], Color, _
					FontHandle, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberToIToHandle")> _
		Shared Function dx_DrawNumberToIToHandle_x86(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, FontHandle As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberToIToHandle")> _
		Shared Function dx_DrawNumberToIToHandle_x64(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, FontHandle As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberToIToHandle(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToIToHandle_x86(x, y, Num, RisesNum, Color, FontHandle, _
					0)
			Else
				Return dx_DrawNumberToIToHandle_x64(x, y, Num, RisesNum, Color, FontHandle, _
					0)
			End If
		End Function
		Public Shared Function DrawNumberToIToHandle(x As Integer, y As Integer, Num As Integer, RisesNum As Integer, Color As Integer, FontHandle As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToIToHandle_x86(x, y, Num, RisesNum, Color, FontHandle, _
					EdgeColor)
			Else
				Return dx_DrawNumberToIToHandle_x64(x, y, Num, RisesNum, Color, FontHandle, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberToFToHandle")> _
		Shared Function dx_DrawNumberToFToHandle_x86(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, FontHandle As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberToFToHandle")> _
		Shared Function dx_DrawNumberToFToHandle_x64(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, FontHandle As Integer, _
			EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberToFToHandle(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToFToHandle_x86(x, y, Num, Length, Color, FontHandle, _
					0)
			Else
				Return dx_DrawNumberToFToHandle_x64(x, y, Num, Length, Color, FontHandle, _
					0)
			End If
		End Function
		Public Shared Function DrawNumberToFToHandle(x As Integer, y As Integer, Num As Double, Length As Integer, Color As Integer, FontHandle As Integer, _
			EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberToFToHandle_x86(x, y, Num, Length, Color, FontHandle, _
					EdgeColor)
			Else
				Return dx_DrawNumberToFToHandle_x64(x, y, Num, Length, Color, FontHandle, _
					EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberPlusToIToHandle")> _
		Shared Function dx_DrawNumberPlusToIToHandle_x86(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberPlusToIToHandle")> _
		Shared Function dx_DrawNumberPlusToIToHandle_x64(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberPlusToIToHandle(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToIToHandle_x86(x, y, NoteString, Num, RisesNum, Color, _
					FontHandle, 0)
			Else
				Return dx_DrawNumberPlusToIToHandle_x64(x, y, NoteString, Num, RisesNum, Color, _
					FontHandle, 0)
			End If
		End Function
		Public Shared Function DrawNumberPlusToIToHandle(x As Integer, y As Integer, NoteString As String, Num As Integer, RisesNum As Integer, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToIToHandle_x86(x, y, NoteString, Num, RisesNum, Color, _
					FontHandle, EdgeColor)
			Else
				Return dx_DrawNumberPlusToIToHandle_x64(x, y, NoteString, Num, RisesNum, Color, _
					FontHandle, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawNumberPlusToFToHandle")> _
		Shared Function dx_DrawNumberPlusToFToHandle_x86(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawNumberPlusToFToHandle")> _
		Shared Function dx_DrawNumberPlusToFToHandle_x64(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
		End Function
		Public Shared Function DrawNumberPlusToFToHandle(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToFToHandle_x86(x, y, NoteString, Num, Length, Color, _
					FontHandle, 0)
			Else
				Return dx_DrawNumberPlusToFToHandle_x64(x, y, NoteString, Num, Length, Color, _
					FontHandle, 0)
			End If
		End Function
		Public Shared Function DrawNumberPlusToFToHandle(x As Integer, y As Integer, NoteString As String, Num As Double, Length As Integer, Color As Integer, _
			FontHandle As Integer, EdgeColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawNumberPlusToFToHandle_x86(x, y, NoteString, Num, Length, Color, _
					FontHandle, EdgeColor)
			Else
				Return dx_DrawNumberPlusToFToHandle_x64(x, y, NoteString, Num, Length, Color, _
					FontHandle, EdgeColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawStringToHandleToZBuffer")> _
		Shared Function dx_DrawStringToHandleToZBuffer_x86(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawStringToHandleToZBuffer")> _
		Shared Function dx_DrawStringToHandleToZBuffer_x64(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function DrawStringToHandleToZBuffer(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringToHandleToZBuffer_x86(x, y, [String], FontHandle, WriteZMode, [FALSE])
			Else
				Return dx_DrawStringToHandleToZBuffer_x64(x, y, [String], FontHandle, WriteZMode, [FALSE])
			End If
		End Function
		Public Shared Function DrawStringToHandleToZBuffer(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawStringToHandleToZBuffer_x86(x, y, [String], FontHandle, WriteZMode, VerticalFlag)
			Else
				Return dx_DrawStringToHandleToZBuffer_x64(x, y, [String], FontHandle, WriteZMode, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawVStringToHandleToZBuffer")> _
		Shared Function dx_DrawVStringToHandleToZBuffer_x86(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawVStringToHandleToZBuffer")> _
		Shared Function dx_DrawVStringToHandleToZBuffer_x64(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawVStringToHandleToZBuffer(x As Integer, y As Integer, [String] As String, FontHandle As Integer, WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawVStringToHandleToZBuffer_x86(x, y, [String], FontHandle, WriteZMode)
			Else
				Return dx_DrawVStringToHandleToZBuffer_x64(x, y, [String], FontHandle, WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendStringToHandleToZBuffer")> _
		Shared Function dx_DrawExtendStringToHandleToZBuffer_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendStringToHandleToZBuffer")> _
		Shared Function dx_DrawExtendStringToHandleToZBuffer_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function DrawExtendStringToHandleToZBuffer(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringToHandleToZBuffer_x86(x, y, ExRateX, ExRateY, [String], FontHandle, _
					WriteZMode, [FALSE])
			Else
				Return dx_DrawExtendStringToHandleToZBuffer_x64(x, y, ExRateX, ExRateY, [String], FontHandle, _
					WriteZMode, [FALSE])
			End If
		End Function
		Public Shared Function DrawExtendStringToHandleToZBuffer(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendStringToHandleToZBuffer_x86(x, y, ExRateX, ExRateY, [String], FontHandle, _
					WriteZMode, VerticalFlag)
			Else
				Return dx_DrawExtendStringToHandleToZBuffer_x64(x, y, ExRateX, ExRateY, [String], FontHandle, _
					WriteZMode, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawExtendVStringToHandleToZBuffer")> _
		Shared Function dx_DrawExtendVStringToHandleToZBuffer_x86(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawExtendVStringToHandleToZBuffer")> _
		Shared Function dx_DrawExtendVStringToHandleToZBuffer_x64(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer) As Integer
		End Function
		Public Shared Function DrawExtendVStringToHandleToZBuffer(x As Integer, y As Integer, ExRateX As Double, ExRateY As Double, [String] As String, FontHandle As Integer, _
			WriteZMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawExtendVStringToHandleToZBuffer_x86(x, y, ExRateX, ExRateY, [String], FontHandle, _
					WriteZMode)
			Else
				Return dx_DrawExtendVStringToHandleToZBuffer_x64(x, y, ExRateX, ExRateY, [String], FontHandle, _
					WriteZMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvertMatrixFtoD")> _
		Shared Function dx_ConvertMatrixFtoD_x86(ByRef Out As MATRIX_D, ByRef [In] As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvertMatrixFtoD")> _
		Shared Function dx_ConvertMatrixFtoD_x64(ByRef Out As MATRIX_D, ByRef [In] As MATRIX) As Integer
		End Function
		Public Shared Function ConvertMatrixFtoD(ByRef Out As MATRIX_D, ByRef [In] As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConvertMatrixFtoD_x86(Out, [In])
			Else
				Return dx_ConvertMatrixFtoD_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ConvertMatrixDtoF")> _
		Shared Function dx_ConvertMatrixDtoF_x86(ByRef Out As MATRIX, ByRef [In] As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ConvertMatrixDtoF")> _
		Shared Function dx_ConvertMatrixDtoF_x64(ByRef Out As MATRIX, ByRef [In] As MATRIX_D) As Integer
		End Function
		Public Shared Function ConvertMatrixDtoF(ByRef Out As MATRIX, ByRef [In] As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ConvertMatrixDtoF_x86(Out, [In])
			Else
				Return dx_ConvertMatrixDtoF_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateIdentityMatrix")> _
		Shared Function dx_CreateIdentityMatrix_x86(ByRef Out As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateIdentityMatrix")> _
		Shared Function dx_CreateIdentityMatrix_x64(ByRef Out As MATRIX) As Integer
		End Function
		Public Shared Function CreateIdentityMatrix(ByRef Out As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateIdentityMatrix_x86(Out)
			Else
				Return dx_CreateIdentityMatrix_x64(Out)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateIdentityMatrixD")> _
		Shared Function dx_CreateIdentityMatrixD_x86(ByRef Out As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateIdentityMatrixD")> _
		Shared Function dx_CreateIdentityMatrixD_x64(ByRef Out As MATRIX_D) As Integer
		End Function
		Public Shared Function CreateIdentityMatrixD(ByRef Out As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateIdentityMatrixD_x86(Out)
			Else
				Return dx_CreateIdentityMatrixD_x64(Out)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateLookAtMatrix")> _
		Shared Function dx_CreateLookAtMatrix_x86(ByRef Out As MATRIX, ByRef Eye As VECTOR, ByRef At As VECTOR, ByRef Up As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateLookAtMatrix")> _
		Shared Function dx_CreateLookAtMatrix_x64(ByRef Out As MATRIX, ByRef Eye As VECTOR, ByRef At As VECTOR, ByRef Up As VECTOR) As Integer
		End Function
		Public Shared Function CreateLookAtMatrix(ByRef Out As MATRIX, ByRef Eye As VECTOR, ByRef At As VECTOR, ByRef Up As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateLookAtMatrix_x86(Out, Eye, At, Up)
			Else
				Return dx_CreateLookAtMatrix_x64(Out, Eye, At, Up)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateLookAtMatrixD")> _
		Shared Function dx_CreateLookAtMatrixD_x86(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, ByRef At As VECTOR_D, ByRef Up As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateLookAtMatrixD")> _
		Shared Function dx_CreateLookAtMatrixD_x64(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, ByRef At As VECTOR_D, ByRef Up As VECTOR_D) As Integer
		End Function
		Public Shared Function CreateLookAtMatrixD(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, ByRef At As VECTOR_D, ByRef Up As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateLookAtMatrixD_x86(Out, Eye, At, Up)
			Else
				Return dx_CreateLookAtMatrixD_x64(Out, Eye, At, Up)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateLookAtMatrix2")> _
		Shared Function dx_CreateLookAtMatrix2_x86(ByRef Out As MATRIX, ByRef Eye As VECTOR, XZAngle As Double, Oira As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateLookAtMatrix2")> _
		Shared Function dx_CreateLookAtMatrix2_x64(ByRef Out As MATRIX, ByRef Eye As VECTOR, XZAngle As Double, Oira As Double) As Integer
		End Function
		Public Shared Function CreateLookAtMatrix2(ByRef Out As MATRIX, ByRef Eye As VECTOR, XZAngle As Double, Oira As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateLookAtMatrix2_x86(Out, Eye, XZAngle, Oira)
			Else
				Return dx_CreateLookAtMatrix2_x64(Out, Eye, XZAngle, Oira)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateLookAtMatrix2D")> _
		Shared Function dx_CreateLookAtMatrix2D_x86(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, XZAngle As Double, Oira As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateLookAtMatrix2D")> _
		Shared Function dx_CreateLookAtMatrix2D_x64(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, XZAngle As Double, Oira As Double) As Integer
		End Function
		Public Shared Function CreateLookAtMatrix2D(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, XZAngle As Double, Oira As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateLookAtMatrix2D_x86(Out, Eye, XZAngle, Oira)
			Else
				Return dx_CreateLookAtMatrix2D_x64(Out, Eye, XZAngle, Oira)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateLookAtMatrixRH")> _
		Shared Function dx_CreateLookAtMatrixRH_x86(ByRef Out As MATRIX, ByRef Eye As VECTOR, ByRef At As VECTOR, ByRef Up As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateLookAtMatrixRH")> _
		Shared Function dx_CreateLookAtMatrixRH_x64(ByRef Out As MATRIX, ByRef Eye As VECTOR, ByRef At As VECTOR, ByRef Up As VECTOR) As Integer
		End Function
		Public Shared Function CreateLookAtMatrixRH(ByRef Out As MATRIX, ByRef Eye As VECTOR, ByRef At As VECTOR, ByRef Up As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateLookAtMatrixRH_x86(Out, Eye, At, Up)
			Else
				Return dx_CreateLookAtMatrixRH_x64(Out, Eye, At, Up)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateLookAtMatrixRHD")> _
		Shared Function dx_CreateLookAtMatrixRHD_x86(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, ByRef At As VECTOR_D, ByRef Up As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateLookAtMatrixRHD")> _
		Shared Function dx_CreateLookAtMatrixRHD_x64(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, ByRef At As VECTOR_D, ByRef Up As VECTOR_D) As Integer
		End Function
		Public Shared Function CreateLookAtMatrixRHD(ByRef Out As MATRIX_D, ByRef Eye As VECTOR_D, ByRef At As VECTOR_D, ByRef Up As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateLookAtMatrixRHD_x86(Out, Eye, At, Up)
			Else
				Return dx_CreateLookAtMatrixRHD_x64(Out, Eye, At, Up)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateMultiplyMatrix")> _
		Shared Function dx_CreateMultiplyMatrix_x86(ByRef Out As MATRIX, ByRef In1 As MATRIX, ByRef In2 As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateMultiplyMatrix")> _
		Shared Function dx_CreateMultiplyMatrix_x64(ByRef Out As MATRIX, ByRef In1 As MATRIX, ByRef In2 As MATRIX) As Integer
		End Function
		Public Shared Function CreateMultiplyMatrix(ByRef Out As MATRIX, ByRef In1 As MATRIX, ByRef In2 As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateMultiplyMatrix_x86(Out, In1, In2)
			Else
				Return dx_CreateMultiplyMatrix_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateMultiplyMatrixD")> _
		Shared Function dx_CreateMultiplyMatrixD_x86(ByRef Out As MATRIX_D, ByRef In1 As MATRIX_D, ByRef In2 As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateMultiplyMatrixD")> _
		Shared Function dx_CreateMultiplyMatrixD_x64(ByRef Out As MATRIX_D, ByRef In1 As MATRIX_D, ByRef In2 As MATRIX_D) As Integer
		End Function
		Public Shared Function CreateMultiplyMatrixD(ByRef Out As MATRIX_D, ByRef In1 As MATRIX_D, ByRef In2 As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateMultiplyMatrixD_x86(Out, In1, In2)
			Else
				Return dx_CreateMultiplyMatrixD_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePerspectiveFovMatrix")> _
		Shared Function dx_CreatePerspectiveFovMatrix_x86(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePerspectiveFovMatrix")> _
		Shared Function dx_CreatePerspectiveFovMatrix_x64(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		Public Shared Function CreatePerspectiveFovMatrix(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrix_x86(Out, fov, zn, zf, -1F)
			Else
				Return dx_CreatePerspectiveFovMatrix_x64(Out, fov, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreatePerspectiveFovMatrix(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single, aspect As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrix_x86(Out, fov, zn, zf, aspect)
			Else
				Return dx_CreatePerspectiveFovMatrix_x64(Out, fov, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePerspectiveFovMatrixD")> _
		Shared Function dx_CreatePerspectiveFovMatrixD_x86(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePerspectiveFovMatrixD")> _
		Shared Function dx_CreatePerspectiveFovMatrixD_x64(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		Public Shared Function CreatePerspectiveFovMatrixD(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrixD_x86(Out, fov, zn, zf, -1F)
			Else
				Return dx_CreatePerspectiveFovMatrixD_x64(Out, fov, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreatePerspectiveFovMatrixD(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double, aspect As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrixD_x86(Out, fov, zn, zf, aspect)
			Else
				Return dx_CreatePerspectiveFovMatrixD_x64(Out, fov, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePerspectiveFovMatrixRH")> _
		Shared Function dx_CreatePerspectiveFovMatrixRH_x86(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePerspectiveFovMatrixRH")> _
		Shared Function dx_CreatePerspectiveFovMatrixRH_x64(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		Public Shared Function CreatePerspectiveFovMatrixRH(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrixRH_x86(Out, fov, zn, zf, -1F)
			Else
				Return dx_CreatePerspectiveFovMatrixRH_x64(Out, fov, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreatePerspectiveFovMatrixRH(ByRef Out As MATRIX, fov As Single, zn As Single, zf As Single, aspect As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrixRH_x86(Out, fov, zn, zf, aspect)
			Else
				Return dx_CreatePerspectiveFovMatrixRH_x64(Out, fov, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePerspectiveFovMatrixRHD")> _
		Shared Function dx_CreatePerspectiveFovMatrixRHD_x86(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePerspectiveFovMatrixRHD")> _
		Shared Function dx_CreatePerspectiveFovMatrixRHD_x64(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		Public Shared Function CreatePerspectiveFovMatrixRHD(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrixRHD_x86(Out, fov, zn, zf, -1F)
			Else
				Return dx_CreatePerspectiveFovMatrixRHD_x64(Out, fov, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreatePerspectiveFovMatrixRHD(ByRef Out As MATRIX_D, fov As Double, zn As Double, zf As Double, aspect As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePerspectiveFovMatrixRHD_x86(Out, fov, zn, zf, aspect)
			Else
				Return dx_CreatePerspectiveFovMatrixRHD_x64(Out, fov, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateOrthoMatrix")> _
		Shared Function dx_CreateOrthoMatrix_x86(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateOrthoMatrix")> _
		Shared Function dx_CreateOrthoMatrix_x64(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		Public Shared Function CreateOrthoMatrix(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrix_x86(Out, size, zn, zf, -1F)
			Else
				Return dx_CreateOrthoMatrix_x64(Out, size, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreateOrthoMatrix(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single, aspect As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrix_x86(Out, size, zn, zf, aspect)
			Else
				Return dx_CreateOrthoMatrix_x64(Out, size, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateOrthoMatrixD")> _
		Shared Function dx_CreateOrthoMatrixD_x86(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateOrthoMatrixD")> _
		Shared Function dx_CreateOrthoMatrixD_x64(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		Public Shared Function CreateOrthoMatrixD(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrixD_x86(Out, size, zn, zf, -1F)
			Else
				Return dx_CreateOrthoMatrixD_x64(Out, size, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreateOrthoMatrixD(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double, aspect As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrixD_x86(Out, size, zn, zf, aspect)
			Else
				Return dx_CreateOrthoMatrixD_x64(Out, size, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateOrthoMatrixRH")> _
		Shared Function dx_CreateOrthoMatrixRH_x86(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateOrthoMatrixRH")> _
		Shared Function dx_CreateOrthoMatrixRH_x64(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single, aspect As Single) As Integer
		End Function
		Public Shared Function CreateOrthoMatrixRH(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrixRH_x86(Out, size, zn, zf, -1F)
			Else
				Return dx_CreateOrthoMatrixRH_x64(Out, size, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreateOrthoMatrixRH(ByRef Out As MATRIX, size As Single, zn As Single, zf As Single, aspect As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrixRH_x86(Out, size, zn, zf, aspect)
			Else
				Return dx_CreateOrthoMatrixRH_x64(Out, size, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateOrthoMatrixRHD")> _
		Shared Function dx_CreateOrthoMatrixRHD_x86(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateOrthoMatrixRHD")> _
		Shared Function dx_CreateOrthoMatrixRHD_x64(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double, aspect As Double) As Integer
		End Function
		Public Shared Function CreateOrthoMatrixRHD(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrixRHD_x86(Out, size, zn, zf, -1F)
			Else
				Return dx_CreateOrthoMatrixRHD_x64(Out, size, zn, zf, -1F)
			End If
		End Function
		Public Shared Function CreateOrthoMatrixRHD(ByRef Out As MATRIX_D, size As Double, zn As Double, zf As Double, aspect As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateOrthoMatrixRHD_x86(Out, size, zn, zf, aspect)
			Else
				Return dx_CreateOrthoMatrixRHD_x64(Out, size, zn, zf, aspect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateScalingMatrix")> _
		Shared Function dx_CreateScalingMatrix_x86(ByRef Out As MATRIX, sx As Single, sy As Single, sz As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateScalingMatrix")> _
		Shared Function dx_CreateScalingMatrix_x64(ByRef Out As MATRIX, sx As Single, sy As Single, sz As Single) As Integer
		End Function
		Public Shared Function CreateScalingMatrix(ByRef Out As MATRIX, sx As Single, sy As Single, sz As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateScalingMatrix_x86(Out, sx, sy, sz)
			Else
				Return dx_CreateScalingMatrix_x64(Out, sx, sy, sz)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateScalingMatrixD")> _
		Shared Function dx_CreateScalingMatrixD_x86(ByRef Out As MATRIX_D, sx As Double, sy As Double, sz As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateScalingMatrixD")> _
		Shared Function dx_CreateScalingMatrixD_x64(ByRef Out As MATRIX_D, sx As Double, sy As Double, sz As Double) As Integer
		End Function
		Public Shared Function CreateScalingMatrixD(ByRef Out As MATRIX_D, sx As Double, sy As Double, sz As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateScalingMatrixD_x86(Out, sx, sy, sz)
			Else
				Return dx_CreateScalingMatrixD_x64(Out, sx, sy, sz)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationXMatrix")> _
		Shared Function dx_CreateRotationXMatrix_x86(ByRef Out As MATRIX, Angle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationXMatrix")> _
		Shared Function dx_CreateRotationXMatrix_x64(ByRef Out As MATRIX, Angle As Single) As Integer
		End Function
		Public Shared Function CreateRotationXMatrix(ByRef Out As MATRIX, Angle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationXMatrix_x86(Out, Angle)
			Else
				Return dx_CreateRotationXMatrix_x64(Out, Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationXMatrixD")> _
		Shared Function dx_CreateRotationXMatrixD_x86(ByRef Out As MATRIX_D, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationXMatrixD")> _
		Shared Function dx_CreateRotationXMatrixD_x64(ByRef Out As MATRIX_D, Angle As Double) As Integer
		End Function
		Public Shared Function CreateRotationXMatrixD(ByRef Out As MATRIX_D, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationXMatrixD_x86(Out, Angle)
			Else
				Return dx_CreateRotationXMatrixD_x64(Out, Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationYMatrix")> _
		Shared Function dx_CreateRotationYMatrix_x86(ByRef Out As MATRIX, Angle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationYMatrix")> _
		Shared Function dx_CreateRotationYMatrix_x64(ByRef Out As MATRIX, Angle As Single) As Integer
		End Function
		Public Shared Function CreateRotationYMatrix(ByRef Out As MATRIX, Angle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationYMatrix_x86(Out, Angle)
			Else
				Return dx_CreateRotationYMatrix_x64(Out, Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationYMatrixD")> _
		Shared Function dx_CreateRotationYMatrixD_x86(ByRef Out As MATRIX_D, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationYMatrixD")> _
		Shared Function dx_CreateRotationYMatrixD_x64(ByRef Out As MATRIX_D, Angle As Double) As Integer
		End Function
		Public Shared Function CreateRotationYMatrixD(ByRef Out As MATRIX_D, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationYMatrixD_x86(Out, Angle)
			Else
				Return dx_CreateRotationYMatrixD_x64(Out, Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationZMatrix")> _
		Shared Function dx_CreateRotationZMatrix_x86(ByRef Out As MATRIX, Angle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationZMatrix")> _
		Shared Function dx_CreateRotationZMatrix_x64(ByRef Out As MATRIX, Angle As Single) As Integer
		End Function
		Public Shared Function CreateRotationZMatrix(ByRef Out As MATRIX, Angle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationZMatrix_x86(Out, Angle)
			Else
				Return dx_CreateRotationZMatrix_x64(Out, Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationZMatrixD")> _
		Shared Function dx_CreateRotationZMatrixD_x86(ByRef Out As MATRIX_D, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationZMatrixD")> _
		Shared Function dx_CreateRotationZMatrixD_x64(ByRef Out As MATRIX_D, Angle As Double) As Integer
		End Function
		Public Shared Function CreateRotationZMatrixD(ByRef Out As MATRIX_D, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationZMatrixD_x86(Out, Angle)
			Else
				Return dx_CreateRotationZMatrixD_x64(Out, Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateTranslationMatrix")> _
		Shared Function dx_CreateTranslationMatrix_x86(ByRef Out As MATRIX, x As Single, y As Single, z As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateTranslationMatrix")> _
		Shared Function dx_CreateTranslationMatrix_x64(ByRef Out As MATRIX, x As Single, y As Single, z As Single) As Integer
		End Function
		Public Shared Function CreateTranslationMatrix(ByRef Out As MATRIX, x As Single, y As Single, z As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateTranslationMatrix_x86(Out, x, y, z)
			Else
				Return dx_CreateTranslationMatrix_x64(Out, x, y, z)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateTranslationMatrixD")> _
		Shared Function dx_CreateTranslationMatrixD_x86(ByRef Out As MATRIX_D, x As Double, y As Double, z As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateTranslationMatrixD")> _
		Shared Function dx_CreateTranslationMatrixD_x64(ByRef Out As MATRIX_D, x As Double, y As Double, z As Double) As Integer
		End Function
		Public Shared Function CreateTranslationMatrixD(ByRef Out As MATRIX_D, x As Double, y As Double, z As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateTranslationMatrixD_x86(Out, x, y, z)
			Else
				Return dx_CreateTranslationMatrixD_x64(Out, x, y, z)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateTransposeMatrix")> _
		Shared Function dx_CreateTransposeMatrix_x86(ByRef Out As MATRIX, ByRef [In] As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateTransposeMatrix")> _
		Shared Function dx_CreateTransposeMatrix_x64(ByRef Out As MATRIX, ByRef [In] As MATRIX) As Integer
		End Function
		Public Shared Function CreateTransposeMatrix(ByRef Out As MATRIX, ByRef [In] As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateTransposeMatrix_x86(Out, [In])
			Else
				Return dx_CreateTransposeMatrix_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateTransposeMatrixD")> _
		Shared Function dx_CreateTransposeMatrixD_x86(ByRef Out As MATRIX_D, ByRef [In] As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateTransposeMatrixD")> _
		Shared Function dx_CreateTransposeMatrixD_x64(ByRef Out As MATRIX_D, ByRef [In] As MATRIX_D) As Integer
		End Function
		Public Shared Function CreateTransposeMatrixD(ByRef Out As MATRIX_D, ByRef [In] As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateTransposeMatrixD_x86(Out, [In])
			Else
				Return dx_CreateTransposeMatrixD_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateInverseMatrix")> _
		Shared Function dx_CreateInverseMatrix_x86(ByRef Out As MATRIX, ByRef [In] As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateInverseMatrix")> _
		Shared Function dx_CreateInverseMatrix_x64(ByRef Out As MATRIX, ByRef [In] As MATRIX) As Integer
		End Function
		Public Shared Function CreateInverseMatrix(ByRef Out As MATRIX, ByRef [In] As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateInverseMatrix_x86(Out, [In])
			Else
				Return dx_CreateInverseMatrix_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateInverseMatrixD")> _
		Shared Function dx_CreateInverseMatrixD_x86(ByRef Out As MATRIX_D, ByRef [In] As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateInverseMatrixD")> _
		Shared Function dx_CreateInverseMatrixD_x64(ByRef Out As MATRIX_D, ByRef [In] As MATRIX_D) As Integer
		End Function
		Public Shared Function CreateInverseMatrixD(ByRef Out As MATRIX_D, ByRef [In] As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateInverseMatrixD_x86(Out, [In])
			Else
				Return dx_CreateInverseMatrixD_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateViewportMatrix")> _
		Shared Function dx_CreateViewportMatrix_x86(ByRef Out As MATRIX, CenterX As Single, CenterY As Single, Width As Single, Height As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateViewportMatrix")> _
		Shared Function dx_CreateViewportMatrix_x64(ByRef Out As MATRIX, CenterX As Single, CenterY As Single, Width As Single, Height As Single) As Integer
		End Function
		Public Shared Function CreateViewportMatrix(ByRef Out As MATRIX, CenterX As Single, CenterY As Single, Width As Single, Height As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateViewportMatrix_x86(Out, CenterX, CenterY, Width, Height)
			Else
				Return dx_CreateViewportMatrix_x64(Out, CenterX, CenterY, Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateViewportMatrixD")> _
		Shared Function dx_CreateViewportMatrixD_x86(ByRef Out As MATRIX_D, CenterX As Double, CenterY As Double, Width As Double, Height As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateViewportMatrixD")> _
		Shared Function dx_CreateViewportMatrixD_x64(ByRef Out As MATRIX_D, CenterX As Double, CenterY As Double, Width As Double, Height As Double) As Integer
		End Function
		Public Shared Function CreateViewportMatrixD(ByRef Out As MATRIX_D, CenterX As Double, CenterY As Double, Width As Double, Height As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateViewportMatrixD_x86(Out, CenterX, CenterY, Width, Height)
			Else
				Return dx_CreateViewportMatrixD_x64(Out, CenterX, CenterY, Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationXYZMatrix")> _
		Shared Function dx_CreateRotationXYZMatrix_x86(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationXYZMatrix")> _
		Shared Function dx_CreateRotationXYZMatrix_x64(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		Public Shared Function CreateRotationXYZMatrix(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationXYZMatrix_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationXYZMatrix_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationXYZMatrixD")> _
		Shared Function dx_CreateRotationXYZMatrixD_x86(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationXYZMatrixD")> _
		Shared Function dx_CreateRotationXYZMatrixD_x64(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		Public Shared Function CreateRotationXYZMatrixD(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationXYZMatrixD_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationXYZMatrixD_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationXZYMatrix")> _
		Shared Function dx_CreateRotationXZYMatrix_x86(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationXZYMatrix")> _
		Shared Function dx_CreateRotationXZYMatrix_x64(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		Public Shared Function CreateRotationXZYMatrix(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationXZYMatrix_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationXZYMatrix_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationXZYMatrixD")> _
		Shared Function dx_CreateRotationXZYMatrixD_x86(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationXZYMatrixD")> _
		Shared Function dx_CreateRotationXZYMatrixD_x64(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		Public Shared Function CreateRotationXZYMatrixD(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationXZYMatrixD_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationXZYMatrixD_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationYXZMatrix")> _
		Shared Function dx_CreateRotationYXZMatrix_x86(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationYXZMatrix")> _
		Shared Function dx_CreateRotationYXZMatrix_x64(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		Public Shared Function CreateRotationYXZMatrix(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationYXZMatrix_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationYXZMatrix_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationYXZMatrixD")> _
		Shared Function dx_CreateRotationYXZMatrixD_x86(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationYXZMatrixD")> _
		Shared Function dx_CreateRotationYXZMatrixD_x64(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		Public Shared Function CreateRotationYXZMatrixD(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationYXZMatrixD_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationYXZMatrixD_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationYZXMatrix")> _
		Shared Function dx_CreateRotationYZXMatrix_x86(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationYZXMatrix")> _
		Shared Function dx_CreateRotationYZXMatrix_x64(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		Public Shared Function CreateRotationYZXMatrix(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationYZXMatrix_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationYZXMatrix_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationYZXMatrixD")> _
		Shared Function dx_CreateRotationYZXMatrixD_x86(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationYZXMatrixD")> _
		Shared Function dx_CreateRotationYZXMatrixD_x64(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		Public Shared Function CreateRotationYZXMatrixD(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationYZXMatrixD_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationYZXMatrixD_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationZXYMatrix")> _
		Shared Function dx_CreateRotationZXYMatrix_x86(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationZXYMatrix")> _
		Shared Function dx_CreateRotationZXYMatrix_x64(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		Public Shared Function CreateRotationZXYMatrix(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationZXYMatrix_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationZXYMatrix_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationZXYMatrixD")> _
		Shared Function dx_CreateRotationZXYMatrixD_x86(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationZXYMatrixD")> _
		Shared Function dx_CreateRotationZXYMatrixD_x64(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		Public Shared Function CreateRotationZXYMatrixD(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationZXYMatrixD_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationZXYMatrixD_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationZYXMatrix")> _
		Shared Function dx_CreateRotationZYXMatrix_x86(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationZYXMatrix")> _
		Shared Function dx_CreateRotationZYXMatrix_x64(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
		End Function
		Public Shared Function CreateRotationZYXMatrix(ByRef Out As MATRIX, XRot As Single, YRot As Single, ZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationZYXMatrix_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationZYXMatrix_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateRotationZYXMatrixD")> _
		Shared Function dx_CreateRotationZYXMatrixD_x86(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateRotationZYXMatrixD")> _
		Shared Function dx_CreateRotationZYXMatrixD_x64(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
		End Function
		Public Shared Function CreateRotationZYXMatrixD(ByRef Out As MATRIX_D, XRot As Double, YRot As Double, ZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateRotationZYXMatrixD_x86(Out, XRot, YRot, ZRot)
			Else
				Return dx_CreateRotationZYXMatrixD_x64(Out, XRot, YRot, ZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixXYZRotation")> _
		Shared Function dx_GetMatrixXYZRotation_x86(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixXYZRotation")> _
		Shared Function dx_GetMatrixXYZRotation_x64(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		Public Shared Function GetMatrixXYZRotation(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixXYZRotation_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixXYZRotation_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixXYZRotationD")> _
		Shared Function dx_GetMatrixXYZRotationD_x86(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixXYZRotationD")> _
		Shared Function dx_GetMatrixXYZRotationD_x64(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		Public Shared Function GetMatrixXYZRotationD(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixXYZRotationD_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixXYZRotationD_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixXZYRotation")> _
		Shared Function dx_GetMatrixXZYRotation_x86(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixXZYRotation")> _
		Shared Function dx_GetMatrixXZYRotation_x64(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		Public Shared Function GetMatrixXZYRotation(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixXZYRotation_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixXZYRotation_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixXZYRotationD")> _
		Shared Function dx_GetMatrixXZYRotationD_x86(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixXZYRotationD")> _
		Shared Function dx_GetMatrixXZYRotationD_x64(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		Public Shared Function GetMatrixXZYRotationD(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixXZYRotationD_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixXZYRotationD_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixYXZRotation")> _
		Shared Function dx_GetMatrixYXZRotation_x86(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixYXZRotation")> _
		Shared Function dx_GetMatrixYXZRotation_x64(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		Public Shared Function GetMatrixYXZRotation(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixYXZRotation_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixYXZRotation_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixYXZRotationD")> _
		Shared Function dx_GetMatrixYXZRotationD_x86(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixYXZRotationD")> _
		Shared Function dx_GetMatrixYXZRotationD_x64(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		Public Shared Function GetMatrixYXZRotationD(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixYXZRotationD_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixYXZRotationD_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixYZXRotation")> _
		Shared Function dx_GetMatrixYZXRotation_x86(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixYZXRotation")> _
		Shared Function dx_GetMatrixYZXRotation_x64(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		Public Shared Function GetMatrixYZXRotation(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixYZXRotation_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixYZXRotation_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixYZXRotationD")> _
		Shared Function dx_GetMatrixYZXRotationD_x86(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixYZXRotationD")> _
		Shared Function dx_GetMatrixYZXRotationD_x64(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		Public Shared Function GetMatrixYZXRotationD(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixYZXRotationD_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixYZXRotationD_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixZXYRotation")> _
		Shared Function dx_GetMatrixZXYRotation_x86(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixZXYRotation")> _
		Shared Function dx_GetMatrixZXYRotation_x64(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		Public Shared Function GetMatrixZXYRotation(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixZXYRotation_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixZXYRotation_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixZXYRotationD")> _
		Shared Function dx_GetMatrixZXYRotationD_x86(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixZXYRotationD")> _
		Shared Function dx_GetMatrixZXYRotationD_x64(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		Public Shared Function GetMatrixZXYRotationD(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixZXYRotationD_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixZXYRotationD_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixZYXRotation")> _
		Shared Function dx_GetMatrixZYXRotation_x86(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixZYXRotation")> _
		Shared Function dx_GetMatrixZYXRotation_x64(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
		End Function
		Public Shared Function GetMatrixZYXRotation(ByRef [In] As MATRIX, ByRef OutXRot As Single, ByRef OutYRot As Single, ByRef OutZRot As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixZYXRotation_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixZYXRotation_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMatrixZYXRotationD")> _
		Shared Function dx_GetMatrixZYXRotationD_x86(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMatrixZYXRotationD")> _
		Shared Function dx_GetMatrixZYXRotationD_x64(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
		End Function
		Public Shared Function GetMatrixZYXRotationD(ByRef [In] As MATRIX_D, ByRef OutXRot As Double, ByRef OutYRot As Double, ByRef OutZRot As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMatrixZYXRotationD_x86([In], OutXRot, OutYRot, OutZRot)
			Else
				Return dx_GetMatrixZYXRotationD_x64([In], OutXRot, OutYRot, OutZRot)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorConvertFtoD")> _
		Shared Function dx_VectorConvertFtoD_x86(ByRef Out As VECTOR_D, ByRef [In] As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorConvertFtoD")> _
		Shared Function dx_VectorConvertFtoD_x64(ByRef Out As VECTOR_D, ByRef [In] As VECTOR) As Integer
		End Function
		Public Shared Function VectorConvertFtoD(ByRef Out As VECTOR_D, ByRef [In] As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorConvertFtoD_x86(Out, [In])
			Else
				Return dx_VectorConvertFtoD_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorConvertDtoF")> _
		Shared Function dx_VectorConvertDtoF_x86(ByRef Out As VECTOR, ByRef [In] As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorConvertDtoF")> _
		Shared Function dx_VectorConvertDtoF_x64(ByRef Out As VECTOR, ByRef [In] As VECTOR_D) As Integer
		End Function
		Public Shared Function VectorConvertDtoF(ByRef Out As VECTOR, ByRef [In] As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorConvertDtoF_x86(Out, [In])
			Else
				Return dx_VectorConvertDtoF_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorNormalize")> _
		Shared Function dx_VectorNormalize_x86(ByRef Out As VECTOR, ByRef [In] As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorNormalize")> _
		Shared Function dx_VectorNormalize_x64(ByRef Out As VECTOR, ByRef [In] As VECTOR) As Integer
		End Function
		Public Shared Function VectorNormalize(ByRef Out As VECTOR, ByRef [In] As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorNormalize_x86(Out, [In])
			Else
				Return dx_VectorNormalize_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorNormalizeD")> _
		Shared Function dx_VectorNormalizeD_x86(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorNormalizeD")> _
		Shared Function dx_VectorNormalizeD_x64(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D) As Integer
		End Function
		Public Shared Function VectorNormalizeD(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorNormalizeD_x86(Out, [In])
			Else
				Return dx_VectorNormalizeD_x64(Out, [In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorScale")> _
		Shared Function dx_VectorScale_x86(ByRef Out As VECTOR, ByRef [In] As VECTOR, Scale As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorScale")> _
		Shared Function dx_VectorScale_x64(ByRef Out As VECTOR, ByRef [In] As VECTOR, Scale As Single) As Integer
		End Function
		Public Shared Function VectorScale(ByRef Out As VECTOR, ByRef [In] As VECTOR, Scale As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorScale_x86(Out, [In], Scale)
			Else
				Return dx_VectorScale_x64(Out, [In], Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorScaleD")> _
		Shared Function dx_VectorScaleD_x86(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Scale As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorScaleD")> _
		Shared Function dx_VectorScaleD_x64(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Scale As Double) As Integer
		End Function
		Public Shared Function VectorScaleD(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Scale As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorScaleD_x86(Out, [In], Scale)
			Else
				Return dx_VectorScaleD_x64(Out, [In], Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorMultiply")> _
		Shared Function dx_VectorMultiply_x86(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorMultiply")> _
		Shared Function dx_VectorMultiply_x64(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		Public Shared Function VectorMultiply(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorMultiply_x86(Out, In1, In2)
			Else
				Return dx_VectorMultiply_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorMultiplyD")> _
		Shared Function dx_VectorMultiplyD_x86(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorMultiplyD")> _
		Shared Function dx_VectorMultiplyD_x64(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		Public Shared Function VectorMultiplyD(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorMultiplyD_x86(Out, In1, In2)
			Else
				Return dx_VectorMultiplyD_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorSub")> _
		Shared Function dx_VectorSub_x86(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorSub")> _
		Shared Function dx_VectorSub_x64(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		Public Shared Function VectorSub(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorSub_x86(Out, In1, In2)
			Else
				Return dx_VectorSub_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorSubD")> _
		Shared Function dx_VectorSubD_x86(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorSubD")> _
		Shared Function dx_VectorSubD_x64(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		Public Shared Function VectorSubD(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorSubD_x86(Out, In1, In2)
			Else
				Return dx_VectorSubD_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorAdd")> _
		Shared Function dx_VectorAdd_x86(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorAdd")> _
		Shared Function dx_VectorAdd_x64(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		Public Shared Function VectorAdd(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorAdd_x86(Out, In1, In2)
			Else
				Return dx_VectorAdd_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorAddD")> _
		Shared Function dx_VectorAddD_x86(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorAddD")> _
		Shared Function dx_VectorAddD_x64(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		Public Shared Function VectorAddD(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorAddD_x86(Out, In1, In2)
			Else
				Return dx_VectorAddD_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorOuterProduct")> _
		Shared Function dx_VectorOuterProduct_x86(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorOuterProduct")> _
		Shared Function dx_VectorOuterProduct_x64(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
		End Function
		Public Shared Function VectorOuterProduct(ByRef Out As VECTOR, ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorOuterProduct_x86(Out, In1, In2)
			Else
				Return dx_VectorOuterProduct_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorOuterProductD")> _
		Shared Function dx_VectorOuterProductD_x86(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorOuterProductD")> _
		Shared Function dx_VectorOuterProductD_x64(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
		End Function
		Public Shared Function VectorOuterProductD(ByRef Out As VECTOR_D, ByRef In1 As VECTOR_D, ByRef In2 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorOuterProductD_x86(Out, In1, In2)
			Else
				Return dx_VectorOuterProductD_x64(Out, In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorInnerProduct")> _
		Shared Function dx_VectorInnerProduct_x86(ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorInnerProduct")> _
		Shared Function dx_VectorInnerProduct_x64(ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Single
		End Function
		Public Shared Function VectorInnerProduct(ByRef In1 As VECTOR, ByRef In2 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_VectorInnerProduct_x86(In1, In2)
			Else
				Return dx_VectorInnerProduct_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorRotationX")> _
		Shared Function dx_VectorRotationX_x86(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorRotationX")> _
		Shared Function dx_VectorRotationX_x64(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
		End Function
		Public Shared Function VectorRotationX(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorRotationX_x86(Out, [In], Angle)
			Else
				Return dx_VectorRotationX_x64(Out, [In], Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorRotationXD")> _
		Shared Function dx_VectorRotationXD_x86(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorRotationXD")> _
		Shared Function dx_VectorRotationXD_x64(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
		End Function
		Public Shared Function VectorRotationXD(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorRotationXD_x86(Out, [In], Angle)
			Else
				Return dx_VectorRotationXD_x64(Out, [In], Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorRotationY")> _
		Shared Function dx_VectorRotationY_x86(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorRotationY")> _
		Shared Function dx_VectorRotationY_x64(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
		End Function
		Public Shared Function VectorRotationY(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorRotationY_x86(Out, [In], Angle)
			Else
				Return dx_VectorRotationY_x64(Out, [In], Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorRotationYD")> _
		Shared Function dx_VectorRotationYD_x86(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorRotationYD")> _
		Shared Function dx_VectorRotationYD_x64(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
		End Function
		Public Shared Function VectorRotationYD(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorRotationYD_x86(Out, [In], Angle)
			Else
				Return dx_VectorRotationYD_x64(Out, [In], Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorRotationZ")> _
		Shared Function dx_VectorRotationZ_x86(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorRotationZ")> _
		Shared Function dx_VectorRotationZ_x64(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
		End Function
		Public Shared Function VectorRotationZ(ByRef Out As VECTOR, ByRef [In] As VECTOR, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorRotationZ_x86(Out, [In], Angle)
			Else
				Return dx_VectorRotationZ_x64(Out, [In], Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorRotationZD")> _
		Shared Function dx_VectorRotationZD_x86(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorRotationZD")> _
		Shared Function dx_VectorRotationZD_x64(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
		End Function
		Public Shared Function VectorRotationZD(ByRef Out As VECTOR_D, ByRef [In] As VECTOR_D, Angle As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorRotationZD_x86(Out, [In], Angle)
			Else
				Return dx_VectorRotationZD_x64(Out, [In], Angle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorTransform")> _
		Shared Function dx_VectorTransform_x86(ByRef Out As VECTOR, ByRef InVec As VECTOR, ByRef InMatrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorTransform")> _
		Shared Function dx_VectorTransform_x64(ByRef Out As VECTOR, ByRef InVec As VECTOR, ByRef InMatrix As MATRIX) As Integer
		End Function
		Public Shared Function VectorTransform(ByRef Out As VECTOR, ByRef InVec As VECTOR, ByRef InMatrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorTransform_x86(Out, InVec, InMatrix)
			Else
				Return dx_VectorTransform_x64(Out, InVec, InMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorTransformD")> _
		Shared Function dx_VectorTransformD_x86(ByRef Out As VECTOR_D, ByRef InVec As VECTOR_D, ByRef InMatrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorTransformD")> _
		Shared Function dx_VectorTransformD_x64(ByRef Out As VECTOR_D, ByRef InVec As VECTOR_D, ByRef InMatrix As MATRIX_D) As Integer
		End Function
		Public Shared Function VectorTransformD(ByRef Out As VECTOR_D, ByRef InVec As VECTOR_D, ByRef InMatrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorTransformD_x86(Out, InVec, InMatrix)
			Else
				Return dx_VectorTransformD_x64(Out, InVec, InMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorTransformSR")> _
		Shared Function dx_VectorTransformSR_x86(ByRef Out As VECTOR, ByRef InVec As VECTOR, ByRef InMatrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorTransformSR")> _
		Shared Function dx_VectorTransformSR_x64(ByRef Out As VECTOR, ByRef InVec As VECTOR, ByRef InMatrix As MATRIX) As Integer
		End Function
		Public Shared Function VectorTransformSR(ByRef Out As VECTOR, ByRef InVec As VECTOR, ByRef InMatrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorTransformSR_x86(Out, InVec, InMatrix)
			Else
				Return dx_VectorTransformSR_x64(Out, InVec, InMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorTransformSRD")> _
		Shared Function dx_VectorTransformSRD_x86(ByRef Out As VECTOR_D, ByRef InVec As VECTOR_D, ByRef InMatrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorTransformSRD")> _
		Shared Function dx_VectorTransformSRD_x64(ByRef Out As VECTOR_D, ByRef InVec As VECTOR_D, ByRef InMatrix As MATRIX_D) As Integer
		End Function
		Public Shared Function VectorTransformSRD(ByRef Out As VECTOR_D, ByRef InVec As VECTOR_D, ByRef InMatrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorTransformSRD_x86(Out, InVec, InMatrix)
			Else
				Return dx_VectorTransformSRD_x64(Out, InVec, InMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorTransform4")> _
		Shared Function dx_VectorTransform4_x86(ByRef Out As VECTOR, ByRef V4Out As Single, ByRef InVec As VECTOR, ByRef V4In As Single, ByRef InMatrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorTransform4")> _
		Shared Function dx_VectorTransform4_x64(ByRef Out As VECTOR, ByRef V4Out As Single, ByRef InVec As VECTOR, ByRef V4In As Single, ByRef InMatrix As MATRIX) As Integer
		End Function
		Public Shared Function VectorTransform4(ByRef Out As VECTOR, ByRef V4Out As Single, ByRef InVec As VECTOR, ByRef V4In As Single, ByRef InMatrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorTransform4_x86(Out, V4Out, InVec, V4In, InMatrix)
			Else
				Return dx_VectorTransform4_x64(Out, V4Out, InVec, V4In, InMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VectorTransform4D")> _
		Shared Function dx_VectorTransform4D_x86(ByRef Out As VECTOR_D, ByRef V4Out As Double, ByRef InVec As VECTOR_D, ByRef V4In As Double, ByRef InMatrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VectorTransform4D")> _
		Shared Function dx_VectorTransform4D_x64(ByRef Out As VECTOR_D, ByRef V4Out As Double, ByRef InVec As VECTOR_D, ByRef V4In As Double, ByRef InMatrix As MATRIX_D) As Integer
		End Function
		Public Shared Function VectorTransform4D(ByRef Out As VECTOR_D, ByRef V4Out As Double, ByRef InVec As VECTOR_D, ByRef V4In As Double, ByRef InMatrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_VectorTransform4D_x86(Out, V4Out, InVec, V4In, InMatrix)
			Else
				Return dx_VectorTransform4D_x64(Out, V4Out, InVec, V4In, InMatrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Segment_Analyse")> _
		Shared Function dx_Segment_Segment_Analyse_x86(ByRef SegmentAPos1 As VECTOR, ByRef SegmentAPos2 As VECTOR, ByRef SegmentBPos1 As VECTOR, ByRef SegmentBPos2 As VECTOR, ByRef Result As SEGMENT_SEGMENT_RESULT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Segment_Analyse")> _
		Shared Function dx_Segment_Segment_Analyse_x64(ByRef SegmentAPos1 As VECTOR, ByRef SegmentAPos2 As VECTOR, ByRef SegmentBPos1 As VECTOR, ByRef SegmentBPos2 As VECTOR, ByRef Result As SEGMENT_SEGMENT_RESULT) As Integer
		End Function
		Public Shared Function Segment_Segment_Analyse(ByRef SegmentAPos1 As VECTOR, ByRef SegmentAPos2 As VECTOR, ByRef SegmentBPos1 As VECTOR, ByRef SegmentBPos2 As VECTOR, ByRef Result As SEGMENT_SEGMENT_RESULT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Segment_Analyse_x86(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2, Result)
			Else
				Return dx_Segment_Segment_Analyse_x64(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Segment_AnalyseD")> _
		Shared Function dx_Segment_Segment_AnalyseD_x86(ByRef SegmentAPos1 As VECTOR_D, ByRef SegmentAPos2 As VECTOR_D, ByRef SegmentBPos1 As VECTOR_D, ByRef SegmentBPos2 As VECTOR_D, ByRef Result As SEGMENT_SEGMENT_RESULT_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Segment_AnalyseD")> _
		Shared Function dx_Segment_Segment_AnalyseD_x64(ByRef SegmentAPos1 As VECTOR_D, ByRef SegmentAPos2 As VECTOR_D, ByRef SegmentBPos1 As VECTOR_D, ByRef SegmentBPos2 As VECTOR_D, ByRef Result As SEGMENT_SEGMENT_RESULT_D) As Integer
		End Function
		Public Shared Function Segment_Segment_AnalyseD(ByRef SegmentAPos1 As VECTOR_D, ByRef SegmentAPos2 As VECTOR_D, ByRef SegmentBPos1 As VECTOR_D, ByRef SegmentBPos2 As VECTOR_D, ByRef Result As SEGMENT_SEGMENT_RESULT_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Segment_AnalyseD_x86(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2, Result)
			Else
				Return dx_Segment_Segment_AnalyseD_x64(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Point_Analyse")> _
		Shared Function dx_Segment_Point_Analyse_x86(ByRef SegmentPos1 As VECTOR, ByRef SegmentPos2 As VECTOR, ByRef PointPos As VECTOR, ByRef Result As SEGMENT_POINT_RESULT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Point_Analyse")> _
		Shared Function dx_Segment_Point_Analyse_x64(ByRef SegmentPos1 As VECTOR, ByRef SegmentPos2 As VECTOR, ByRef PointPos As VECTOR, ByRef Result As SEGMENT_POINT_RESULT) As Integer
		End Function
		Public Shared Function Segment_Point_Analyse(ByRef SegmentPos1 As VECTOR, ByRef SegmentPos2 As VECTOR, ByRef PointPos As VECTOR, ByRef Result As SEGMENT_POINT_RESULT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Point_Analyse_x86(SegmentPos1, SegmentPos2, PointPos, Result)
			Else
				Return dx_Segment_Point_Analyse_x64(SegmentPos1, SegmentPos2, PointPos, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Point_AnalyseD")> _
		Shared Function dx_Segment_Point_AnalyseD_x86(ByRef SegmentPos1 As VECTOR_D, ByRef SegmentPos2 As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As SEGMENT_POINT_RESULT_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Point_AnalyseD")> _
		Shared Function dx_Segment_Point_AnalyseD_x64(ByRef SegmentPos1 As VECTOR_D, ByRef SegmentPos2 As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As SEGMENT_POINT_RESULT_D) As Integer
		End Function
		Public Shared Function Segment_Point_AnalyseD(ByRef SegmentPos1 As VECTOR_D, ByRef SegmentPos2 As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As SEGMENT_POINT_RESULT_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Point_AnalyseD_x86(SegmentPos1, SegmentPos2, PointPos, Result)
			Else
				Return dx_Segment_Point_AnalyseD_x64(SegmentPos1, SegmentPos2, PointPos, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Triangle_Analyse")> _
		Shared Function dx_Segment_Triangle_Analyse_x86(ByRef SegmentPos1 As VECTOR, ByRef SegmentPos2 As VECTOR, ByRef TrianglePos1 As VECTOR, ByRef TrianglePos2 As VECTOR, ByRef TrianglePos3 As VECTOR, ByRef Result As SEGMENT_TRIANGLE_RESULT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Triangle_Analyse")> _
		Shared Function dx_Segment_Triangle_Analyse_x64(ByRef SegmentPos1 As VECTOR, ByRef SegmentPos2 As VECTOR, ByRef TrianglePos1 As VECTOR, ByRef TrianglePos2 As VECTOR, ByRef TrianglePos3 As VECTOR, ByRef Result As SEGMENT_TRIANGLE_RESULT) As Integer
		End Function
		Public Shared Function Segment_Triangle_Analyse(ByRef SegmentPos1 As VECTOR, ByRef SegmentPos2 As VECTOR, ByRef TrianglePos1 As VECTOR, ByRef TrianglePos2 As VECTOR, ByRef TrianglePos3 As VECTOR, ByRef Result As SEGMENT_TRIANGLE_RESULT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Triangle_Analyse_x86(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3, Result)
			Else
				Return dx_Segment_Triangle_Analyse_x64(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Triangle_AnalyseD")> _
		Shared Function dx_Segment_Triangle_AnalyseD_x86(ByRef SegmentPos1 As VECTOR_D, ByRef SegmentPos2 As VECTOR_D, ByRef TrianglePos1 As VECTOR_D, ByRef TrianglePos2 As VECTOR_D, ByRef TrianglePos3 As VECTOR_D, ByRef Result As SEGMENT_TRIANGLE_RESULT_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Triangle_AnalyseD")> _
		Shared Function dx_Segment_Triangle_AnalyseD_x64(ByRef SegmentPos1 As VECTOR_D, ByRef SegmentPos2 As VECTOR_D, ByRef TrianglePos1 As VECTOR_D, ByRef TrianglePos2 As VECTOR_D, ByRef TrianglePos3 As VECTOR_D, ByRef Result As SEGMENT_TRIANGLE_RESULT_D) As Integer
		End Function
		Public Shared Function Segment_Triangle_AnalyseD(ByRef SegmentPos1 As VECTOR_D, ByRef SegmentPos2 As VECTOR_D, ByRef TrianglePos1 As VECTOR_D, ByRef TrianglePos2 As VECTOR_D, ByRef TrianglePos3 As VECTOR_D, ByRef Result As SEGMENT_TRIANGLE_RESULT_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Triangle_AnalyseD_x86(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3, Result)
			Else
				Return dx_Segment_Triangle_AnalyseD_x64(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Triangle_Point_Analyse")> _
		Shared Function dx_Triangle_Point_Analyse_x86(ByRef TrianglePos1 As VECTOR, ByRef TrianglePos2 As VECTOR, ByRef TrianglePos3 As VECTOR, ByRef PointPos As VECTOR, ByRef Result As TRIANGLE_POINT_RESULT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Triangle_Point_Analyse")> _
		Shared Function dx_Triangle_Point_Analyse_x64(ByRef TrianglePos1 As VECTOR, ByRef TrianglePos2 As VECTOR, ByRef TrianglePos3 As VECTOR, ByRef PointPos As VECTOR, ByRef Result As TRIANGLE_POINT_RESULT) As Integer
		End Function
		Public Shared Function Triangle_Point_Analyse(ByRef TrianglePos1 As VECTOR, ByRef TrianglePos2 As VECTOR, ByRef TrianglePos3 As VECTOR, ByRef PointPos As VECTOR, ByRef Result As TRIANGLE_POINT_RESULT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Triangle_Point_Analyse_x86(TrianglePos1, TrianglePos2, TrianglePos3, PointPos, Result)
			Else
				Return dx_Triangle_Point_Analyse_x64(TrianglePos1, TrianglePos2, TrianglePos3, PointPos, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Triangle_Point_AnalyseD")> _
		Shared Function dx_Triangle_Point_AnalyseD_x86(ByRef TrianglePos1 As VECTOR_D, ByRef TrianglePos2 As VECTOR_D, ByRef TrianglePos3 As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As TRIANGLE_POINT_RESULT_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Triangle_Point_AnalyseD")> _
		Shared Function dx_Triangle_Point_AnalyseD_x64(ByRef TrianglePos1 As VECTOR_D, ByRef TrianglePos2 As VECTOR_D, ByRef TrianglePos3 As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As TRIANGLE_POINT_RESULT_D) As Integer
		End Function
		Public Shared Function Triangle_Point_AnalyseD(ByRef TrianglePos1 As VECTOR_D, ByRef TrianglePos2 As VECTOR_D, ByRef TrianglePos3 As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As TRIANGLE_POINT_RESULT_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Triangle_Point_AnalyseD_x86(TrianglePos1, TrianglePos2, TrianglePos3, PointPos, Result)
			Else
				Return dx_Triangle_Point_AnalyseD_x64(TrianglePos1, TrianglePos2, TrianglePos3, PointPos, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Plane_Point_Analyse")> _
		Shared Function dx_Plane_Point_Analyse_x86(ByRef PlanePos As VECTOR, ByRef PlaneNormal As VECTOR, ByRef PointPos As VECTOR, ByRef Result As PLANE_POINT_RESULT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Plane_Point_Analyse")> _
		Shared Function dx_Plane_Point_Analyse_x64(ByRef PlanePos As VECTOR, ByRef PlaneNormal As VECTOR, ByRef PointPos As VECTOR, ByRef Result As PLANE_POINT_RESULT) As Integer
		End Function
		Public Shared Function Plane_Point_Analyse(ByRef PlanePos As VECTOR, ByRef PlaneNormal As VECTOR, ByRef PointPos As VECTOR, ByRef Result As PLANE_POINT_RESULT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Plane_Point_Analyse_x86(PlanePos, PlaneNormal, PointPos, Result)
			Else
				Return dx_Plane_Point_Analyse_x64(PlanePos, PlaneNormal, PointPos, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Plane_Point_AnalyseD")> _
		Shared Function dx_Plane_Point_AnalyseD_x86(ByRef PlanePos As VECTOR_D, ByRef PlaneNormal As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As PLANE_POINT_RESULT_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Plane_Point_AnalyseD")> _
		Shared Function dx_Plane_Point_AnalyseD_x64(ByRef PlanePos As VECTOR_D, ByRef PlaneNormal As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As PLANE_POINT_RESULT_D) As Integer
		End Function
		Public Shared Function Plane_Point_AnalyseD(ByRef PlanePos As VECTOR_D, ByRef PlaneNormal As VECTOR_D, ByRef PointPos As VECTOR_D, ByRef Result As PLANE_POINT_RESULT_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Plane_Point_AnalyseD_x86(PlanePos, PlaneNormal, PointPos, Result)
			Else
				Return dx_Plane_Point_AnalyseD_x64(PlanePos, PlaneNormal, PointPos, Result)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_TriangleBarycenter")> _
		Shared Sub dx_TriangleBarycenter_x86(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, Position As VECTOR, ByRef TrianglePos1Weight As Single, ByRef TrianglePos2Weight As Single, _
			ByRef TrianglePos3Weight As Single)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_TriangleBarycenter")> _
		Shared Sub dx_TriangleBarycenter_x64(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, Position As VECTOR, ByRef TrianglePos1Weight As Single, ByRef TrianglePos2Weight As Single, _
			ByRef TrianglePos3Weight As Single)
		End Sub
		Public Shared Sub TriangleBarycenter(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, Position As VECTOR, ByRef TrianglePos1Weight As Single, ByRef TrianglePos2Weight As Single, _
			ByRef TrianglePos3Weight As Single)
			If System.IntPtr.Size = 4 Then
				dx_TriangleBarycenter_x86(TrianglePos1, TrianglePos2, TrianglePos3, Position, TrianglePos1Weight, TrianglePos2Weight, _
					TrianglePos3Weight)
			Else
				dx_TriangleBarycenter_x64(TrianglePos1, TrianglePos2, TrianglePos3, Position, TrianglePos1Weight, TrianglePos2Weight, _
					TrianglePos3Weight)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_TriangleBarycenterD")> _
		Shared Sub dx_TriangleBarycenterD_x86(TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D, Position As VECTOR_D, ByRef TrianglePos1Weight As Double, ByRef TrianglePos2Weight As Double, _
			ByRef TrianglePos3Weight As Double)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_TriangleBarycenterD")> _
		Shared Sub dx_TriangleBarycenterD_x64(TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D, Position As VECTOR_D, ByRef TrianglePos1Weight As Double, ByRef TrianglePos2Weight As Double, _
			ByRef TrianglePos3Weight As Double)
		End Sub
		Public Shared Sub TriangleBarycenterD(TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D, Position As VECTOR_D, ByRef TrianglePos1Weight As Double, ByRef TrianglePos2Weight As Double, _
			ByRef TrianglePos3Weight As Double)
			If System.IntPtr.Size = 4 Then
				dx_TriangleBarycenterD_x86(TrianglePos1, TrianglePos2, TrianglePos3, Position, TrianglePos1Weight, TrianglePos2Weight, _
					TrianglePos3Weight)
			Else
				dx_TriangleBarycenterD_x64(TrianglePos1, TrianglePos2, TrianglePos3, Position, TrianglePos1Weight, TrianglePos2Weight, _
					TrianglePos3Weight)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Segment_MinLength")> _
		Shared Function dx_Segment_Segment_MinLength_x86(SegmentAPos1 As VECTOR, SegmentAPos2 As VECTOR, SegmentBPos1 As VECTOR, SegmentBPos2 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Segment_MinLength")> _
		Shared Function dx_Segment_Segment_MinLength_x64(SegmentAPos1 As VECTOR, SegmentAPos2 As VECTOR, SegmentBPos1 As VECTOR, SegmentBPos2 As VECTOR) As Single
		End Function
		Public Shared Function Segment_Segment_MinLength(SegmentAPos1 As VECTOR, SegmentAPos2 As VECTOR, SegmentBPos1 As VECTOR, SegmentBPos2 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Segment_MinLength_x86(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2)
			Else
				Return dx_Segment_Segment_MinLength_x64(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Segment_MinLength_Square")> _
		Shared Function dx_Segment_Segment_MinLength_Square_x86(SegmentAPos1 As VECTOR, SegmentAPos2 As VECTOR, SegmentBPos1 As VECTOR, SegmentBPos2 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Segment_MinLength_Square")> _
		Shared Function dx_Segment_Segment_MinLength_Square_x64(SegmentAPos1 As VECTOR, SegmentAPos2 As VECTOR, SegmentBPos1 As VECTOR, SegmentBPos2 As VECTOR) As Single
		End Function
		Public Shared Function Segment_Segment_MinLength_Square(SegmentAPos1 As VECTOR, SegmentAPos2 As VECTOR, SegmentBPos1 As VECTOR, SegmentBPos2 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Segment_MinLength_Square_x86(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2)
			Else
				Return dx_Segment_Segment_MinLength_Square_x64(SegmentAPos1, SegmentAPos2, SegmentBPos1, SegmentBPos2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Triangle_MinLength")> _
		Shared Function dx_Segment_Triangle_MinLength_x86(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Triangle_MinLength")> _
		Shared Function dx_Segment_Triangle_MinLength_x64(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Single
		End Function
		Public Shared Function Segment_Triangle_MinLength(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Triangle_MinLength_x86(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_Segment_Triangle_MinLength_x64(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Triangle_MinLength_Square")> _
		Shared Function dx_Segment_Triangle_MinLength_Square_x86(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Triangle_MinLength_Square")> _
		Shared Function dx_Segment_Triangle_MinLength_Square_x64(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Single
		End Function
		Public Shared Function Segment_Triangle_MinLength_Square(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Triangle_MinLength_Square_x86(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_Segment_Triangle_MinLength_Square_x64(SegmentPos1, SegmentPos2, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Point_MinLength")> _
		Shared Function dx_Segment_Point_MinLength_x86(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, PointPos As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Point_MinLength")> _
		Shared Function dx_Segment_Point_MinLength_x64(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, PointPos As VECTOR) As Single
		End Function
		Public Shared Function Segment_Point_MinLength(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, PointPos As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Point_MinLength_x86(SegmentPos1, SegmentPos2, PointPos)
			Else
				Return dx_Segment_Point_MinLength_x64(SegmentPos1, SegmentPos2, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Segment_Point_MinLength_Square")> _
		Shared Function dx_Segment_Point_MinLength_Square_x86(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, PointPos As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Segment_Point_MinLength_Square")> _
		Shared Function dx_Segment_Point_MinLength_Square_x64(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, PointPos As VECTOR) As Single
		End Function
		Public Shared Function Segment_Point_MinLength_Square(SegmentPos1 As VECTOR, SegmentPos2 As VECTOR, PointPos As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Segment_Point_MinLength_Square_x86(SegmentPos1, SegmentPos2, PointPos)
			Else
				Return dx_Segment_Point_MinLength_Square_x64(SegmentPos1, SegmentPos2, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Triangle_Point_MinLength")> _
		Shared Function dx_Triangle_Point_MinLength_x86(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, PointPos As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Triangle_Point_MinLength")> _
		Shared Function dx_Triangle_Point_MinLength_x64(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, PointPos As VECTOR) As Single
		End Function
		Public Shared Function Triangle_Point_MinLength(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, PointPos As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Triangle_Point_MinLength_x86(TrianglePos1, TrianglePos2, TrianglePos3, PointPos)
			Else
				Return dx_Triangle_Point_MinLength_x64(TrianglePos1, TrianglePos2, TrianglePos3, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Triangle_Point_MinLength_Square")> _
		Shared Function dx_Triangle_Point_MinLength_Square_x86(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, PointPos As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Triangle_Point_MinLength_Square")> _
		Shared Function dx_Triangle_Point_MinLength_Square_x64(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, PointPos As VECTOR) As Single
		End Function
		Public Shared Function Triangle_Point_MinLength_Square(TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR, PointPos As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Triangle_Point_MinLength_Square_x86(TrianglePos1, TrianglePos2, TrianglePos3, PointPos)
			Else
				Return dx_Triangle_Point_MinLength_Square_x64(TrianglePos1, TrianglePos2, TrianglePos3, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Triangle_Triangle_MinLength")> _
		Shared Function dx_Triangle_Triangle_MinLength_x86(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Triangle_Triangle_MinLength")> _
		Shared Function dx_Triangle_Triangle_MinLength_x64(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Single
		End Function
		Public Shared Function Triangle_Triangle_MinLength(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Triangle_Triangle_MinLength_x86(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			Else
				Return dx_Triangle_Triangle_MinLength_x64(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Triangle_Triangle_MinLength_Square")> _
		Shared Function dx_Triangle_Triangle_MinLength_Square_x86(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Triangle_Triangle_MinLength_Square")> _
		Shared Function dx_Triangle_Triangle_MinLength_Square_x64(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Single
		End Function
		Public Shared Function Triangle_Triangle_MinLength_Square(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Triangle_Triangle_MinLength_Square_x86(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			Else
				Return dx_Triangle_Triangle_MinLength_Square_x64(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Plane_Point_MinLength_Position")> _
		Shared Function dx_Plane_Point_MinLength_Position_x86(PlanePos As VECTOR, PlaneNormal As VECTOR, PointPos As VECTOR) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Plane_Point_MinLength_Position")> _
		Shared Function dx_Plane_Point_MinLength_Position_x64(PlanePos As VECTOR, PlaneNormal As VECTOR, PointPos As VECTOR) As VECTOR
		End Function
		Public Shared Function Plane_Point_MinLength_Position(PlanePos As VECTOR, PlaneNormal As VECTOR, PointPos As VECTOR) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_Plane_Point_MinLength_Position_x86(PlanePos, PlaneNormal, PointPos)
			Else
				Return dx_Plane_Point_MinLength_Position_x64(PlanePos, PlaneNormal, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Plane_Point_MinLength_PositionD")> _
		Shared Function dx_Plane_Point_MinLength_PositionD_x86(PlanePos As VECTOR_D, PlaneNormal As VECTOR_D, PointPos As VECTOR_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Plane_Point_MinLength_PositionD")> _
		Shared Function dx_Plane_Point_MinLength_PositionD_x64(PlanePos As VECTOR_D, PlaneNormal As VECTOR_D, PointPos As VECTOR_D) As VECTOR_D
		End Function
		Public Shared Function Plane_Point_MinLength_PositionD(PlanePos As VECTOR_D, PlaneNormal As VECTOR_D, PointPos As VECTOR_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_Plane_Point_MinLength_PositionD_x86(PlanePos, PlaneNormal, PointPos)
			Else
				Return dx_Plane_Point_MinLength_PositionD_x64(PlanePos, PlaneNormal, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Plane_Point_MinLength")> _
		Shared Function dx_Plane_Point_MinLength_x86(PlanePos As VECTOR, PlaneNormal As VECTOR, PointPos As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Plane_Point_MinLength")> _
		Shared Function dx_Plane_Point_MinLength_x64(PlanePos As VECTOR, PlaneNormal As VECTOR, PointPos As VECTOR) As Single
		End Function
		Public Shared Function Plane_Point_MinLength(PlanePos As VECTOR, PlaneNormal As VECTOR, PointPos As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_Plane_Point_MinLength_x86(PlanePos, PlaneNormal, PointPos)
			Else
				Return dx_Plane_Point_MinLength_x64(PlanePos, PlaneNormal, PointPos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Line_Triangle")> _
		Shared Function dx_HitCheck_Line_Triangle_x86(LinePos1 As VECTOR, LinePos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As HITRESULT_LINE
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Line_Triangle")> _
		Shared Function dx_HitCheck_Line_Triangle_x64(LinePos1 As VECTOR, LinePos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As HITRESULT_LINE
		End Function
		Public Shared Function HitCheck_Line_Triangle(LinePos1 As VECTOR, LinePos2 As VECTOR, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As HITRESULT_LINE
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Line_Triangle_x86(LinePos1, LinePos2, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_HitCheck_Line_Triangle_x64(LinePos1, LinePos2, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Triangle_Triangle")> _
		Shared Function dx_HitCheck_Triangle_Triangle_x86(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Triangle_Triangle")> _
		Shared Function dx_HitCheck_Triangle_Triangle_x64(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Integer
		End Function
		Public Shared Function HitCheck_Triangle_Triangle(Triangle1Pos1 As VECTOR, Triangle1Pos2 As VECTOR, Triangle1Pos3 As VECTOR, Triangle2Pos1 As VECTOR, Triangle2Pos2 As VECTOR, Triangle2Pos3 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Triangle_Triangle_x86(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			Else
				Return dx_HitCheck_Triangle_Triangle_x64(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Triangle_TriangleD")> _
		Shared Function dx_HitCheck_Triangle_TriangleD_x86(Triangle1Pos1 As VECTOR_D, Triangle1Pos2 As VECTOR_D, Triangle1Pos3 As VECTOR_D, Triangle2Pos1 As VECTOR_D, Triangle2Pos2 As VECTOR_D, Triangle2Pos3 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Triangle_TriangleD")> _
		Shared Function dx_HitCheck_Triangle_TriangleD_x64(Triangle1Pos1 As VECTOR_D, Triangle1Pos2 As VECTOR_D, Triangle1Pos3 As VECTOR_D, Triangle2Pos1 As VECTOR_D, Triangle2Pos2 As VECTOR_D, Triangle2Pos3 As VECTOR_D) As Integer
		End Function
		Public Shared Function HitCheck_Triangle_TriangleD(Triangle1Pos1 As VECTOR_D, Triangle1Pos2 As VECTOR_D, Triangle1Pos3 As VECTOR_D, Triangle2Pos1 As VECTOR_D, Triangle2Pos2 As VECTOR_D, Triangle2Pos3 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Triangle_TriangleD_x86(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			Else
				Return dx_HitCheck_Triangle_TriangleD_x64(Triangle1Pos1, Triangle1Pos2, Triangle1Pos3, Triangle2Pos1, Triangle2Pos2, Triangle2Pos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Line_Cube")> _
		Shared Function dx_HitCheck_Line_Cube_x86(LinePos1 As VECTOR, LinePos2 As VECTOR, CubePos1 As VECTOR, CubePos2 As VECTOR) As HITRESULT_LINE
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Line_Cube")> _
		Shared Function dx_HitCheck_Line_Cube_x64(LinePos1 As VECTOR, LinePos2 As VECTOR, CubePos1 As VECTOR, CubePos2 As VECTOR) As HITRESULT_LINE
		End Function
		Public Shared Function HitCheck_Line_Cube(LinePos1 As VECTOR, LinePos2 As VECTOR, CubePos1 As VECTOR, CubePos2 As VECTOR) As HITRESULT_LINE
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Line_Cube_x86(LinePos1, LinePos2, CubePos1, CubePos2)
			Else
				Return dx_HitCheck_Line_Cube_x64(LinePos1, LinePos2, CubePos1, CubePos2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Line_Sphere")> _
		Shared Function dx_HitCheck_Line_Sphere_x86(LinePos1 As VECTOR, LinePos2 As VECTOR, SphereCenterPos As VECTOR, SphereR As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Line_Sphere")> _
		Shared Function dx_HitCheck_Line_Sphere_x64(LinePos1 As VECTOR, LinePos2 As VECTOR, SphereCenterPos As VECTOR, SphereR As Single) As Integer
		End Function
		Public Shared Function HitCheck_Line_Sphere(LinePos1 As VECTOR, LinePos2 As VECTOR, SphereCenterPos As VECTOR, SphereR As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Line_Sphere_x86(LinePos1, LinePos2, SphereCenterPos, SphereR)
			Else
				Return dx_HitCheck_Line_Sphere_x64(LinePos1, LinePos2, SphereCenterPos, SphereR)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Line_SphereD")> _
		Shared Function dx_HitCheck_Line_SphereD_x86(LinePos1 As VECTOR_D, LinePos2 As VECTOR_D, SphereCenterPos As VECTOR_D, SphereR As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Line_SphereD")> _
		Shared Function dx_HitCheck_Line_SphereD_x64(LinePos1 As VECTOR_D, LinePos2 As VECTOR_D, SphereCenterPos As VECTOR_D, SphereR As Double) As Integer
		End Function
		Public Shared Function HitCheck_Line_SphereD(LinePos1 As VECTOR_D, LinePos2 As VECTOR_D, SphereCenterPos As VECTOR_D, SphereR As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Line_SphereD_x86(LinePos1, LinePos2, SphereCenterPos, SphereR)
			Else
				Return dx_HitCheck_Line_SphereD_x64(LinePos1, LinePos2, SphereCenterPos, SphereR)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Sphere_Sphere")> _
		Shared Function dx_HitCheck_Sphere_Sphere_x86(Sphere1CenterPos As VECTOR, Sphere1R As Single, Sphere2CenterPos As VECTOR, Sphere2R As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Sphere_Sphere")> _
		Shared Function dx_HitCheck_Sphere_Sphere_x64(Sphere1CenterPos As VECTOR, Sphere1R As Single, Sphere2CenterPos As VECTOR, Sphere2R As Single) As Integer
		End Function
		Public Shared Function HitCheck_Sphere_Sphere(Sphere1CenterPos As VECTOR, Sphere1R As Single, Sphere2CenterPos As VECTOR, Sphere2R As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Sphere_Sphere_x86(Sphere1CenterPos, Sphere1R, Sphere2CenterPos, Sphere2R)
			Else
				Return dx_HitCheck_Sphere_Sphere_x64(Sphere1CenterPos, Sphere1R, Sphere2CenterPos, Sphere2R)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Sphere_SphereD")> _
		Shared Function dx_HitCheck_Sphere_SphereD_x86(Sphere1CenterPos As VECTOR_D, Sphere1R As Double, Sphere2CenterPos As VECTOR_D, Sphere2R As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Sphere_SphereD")> _
		Shared Function dx_HitCheck_Sphere_SphereD_x64(Sphere1CenterPos As VECTOR_D, Sphere1R As Double, Sphere2CenterPos As VECTOR_D, Sphere2R As Double) As Integer
		End Function
		Public Shared Function HitCheck_Sphere_SphereD(Sphere1CenterPos As VECTOR_D, Sphere1R As Double, Sphere2CenterPos As VECTOR_D, Sphere2R As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Sphere_SphereD_x86(Sphere1CenterPos, Sphere1R, Sphere2CenterPos, Sphere2R)
			Else
				Return dx_HitCheck_Sphere_SphereD_x64(Sphere1CenterPos, Sphere1R, Sphere2CenterPos, Sphere2R)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Sphere_Capsule")> _
		Shared Function dx_HitCheck_Sphere_Capsule_x86(SphereCenterPos As VECTOR, SphereR As Single, CapPos1 As VECTOR, CapPos2 As VECTOR, CapR As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Sphere_Capsule")> _
		Shared Function dx_HitCheck_Sphere_Capsule_x64(SphereCenterPos As VECTOR, SphereR As Single, CapPos1 As VECTOR, CapPos2 As VECTOR, CapR As Single) As Integer
		End Function
		Public Shared Function HitCheck_Sphere_Capsule(SphereCenterPos As VECTOR, SphereR As Single, CapPos1 As VECTOR, CapPos2 As VECTOR, CapR As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Sphere_Capsule_x86(SphereCenterPos, SphereR, CapPos1, CapPos2, CapR)
			Else
				Return dx_HitCheck_Sphere_Capsule_x64(SphereCenterPos, SphereR, CapPos1, CapPos2, CapR)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Sphere_CapsuleD")> _
		Shared Function dx_HitCheck_Sphere_CapsuleD_x86(SphereCenterPos As VECTOR_D, SphereR As Double, CapPos1 As VECTOR_D, CapPos2 As VECTOR_D, CapR As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Sphere_CapsuleD")> _
		Shared Function dx_HitCheck_Sphere_CapsuleD_x64(SphereCenterPos As VECTOR_D, SphereR As Double, CapPos1 As VECTOR_D, CapPos2 As VECTOR_D, CapR As Double) As Integer
		End Function
		Public Shared Function HitCheck_Sphere_CapsuleD(SphereCenterPos As VECTOR_D, SphereR As Double, CapPos1 As VECTOR_D, CapPos2 As VECTOR_D, CapR As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Sphere_CapsuleD_x86(SphereCenterPos, SphereR, CapPos1, CapPos2, CapR)
			Else
				Return dx_HitCheck_Sphere_CapsuleD_x64(SphereCenterPos, SphereR, CapPos1, CapPos2, CapR)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Sphere_Triangle")> _
		Shared Function dx_HitCheck_Sphere_Triangle_x86(SphereCenterPos As VECTOR, SphereR As Single, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Sphere_Triangle")> _
		Shared Function dx_HitCheck_Sphere_Triangle_x64(SphereCenterPos As VECTOR, SphereR As Single, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Integer
		End Function
		Public Shared Function HitCheck_Sphere_Triangle(SphereCenterPos As VECTOR, SphereR As Single, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Sphere_Triangle_x86(SphereCenterPos, SphereR, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_HitCheck_Sphere_Triangle_x64(SphereCenterPos, SphereR, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Sphere_TriangleD")> _
		Shared Function dx_HitCheck_Sphere_TriangleD_x86(SphereCenterPos As VECTOR_D, SphereR As Double, TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Sphere_TriangleD")> _
		Shared Function dx_HitCheck_Sphere_TriangleD_x64(SphereCenterPos As VECTOR_D, SphereR As Double, TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D) As Integer
		End Function
		Public Shared Function HitCheck_Sphere_TriangleD(SphereCenterPos As VECTOR_D, SphereR As Double, TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Sphere_TriangleD_x86(SphereCenterPos, SphereR, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_HitCheck_Sphere_TriangleD_x64(SphereCenterPos, SphereR, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Capsule_Capsule")> _
		Shared Function dx_HitCheck_Capsule_Capsule_x86(Cap1Pos1 As VECTOR, Cap1Pos2 As VECTOR, Cap1R As Single, Cap2Pos1 As VECTOR, Cap2Pos2 As VECTOR, Cap2R As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Capsule_Capsule")> _
		Shared Function dx_HitCheck_Capsule_Capsule_x64(Cap1Pos1 As VECTOR, Cap1Pos2 As VECTOR, Cap1R As Single, Cap2Pos1 As VECTOR, Cap2Pos2 As VECTOR, Cap2R As Single) As Integer
		End Function
		Public Shared Function HitCheck_Capsule_Capsule(Cap1Pos1 As VECTOR, Cap1Pos2 As VECTOR, Cap1R As Single, Cap2Pos1 As VECTOR, Cap2Pos2 As VECTOR, Cap2R As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Capsule_Capsule_x86(Cap1Pos1, Cap1Pos2, Cap1R, Cap2Pos1, Cap2Pos2, Cap2R)
			Else
				Return dx_HitCheck_Capsule_Capsule_x64(Cap1Pos1, Cap1Pos2, Cap1R, Cap2Pos1, Cap2Pos2, Cap2R)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Capsule_CapsuleD")> _
		Shared Function dx_HitCheck_Capsule_CapsuleD_x86(Cap1Pos1 As VECTOR_D, Cap1Pos2 As VECTOR_D, Cap1R As Double, Cap2Pos1 As VECTOR_D, Cap2Pos2 As VECTOR_D, Cap2R As Double) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Capsule_CapsuleD")> _
		Shared Function dx_HitCheck_Capsule_CapsuleD_x64(Cap1Pos1 As VECTOR_D, Cap1Pos2 As VECTOR_D, Cap1R As Double, Cap2Pos1 As VECTOR_D, Cap2Pos2 As VECTOR_D, Cap2R As Double) As Integer
		End Function
		Public Shared Function HitCheck_Capsule_CapsuleD(Cap1Pos1 As VECTOR_D, Cap1Pos2 As VECTOR_D, Cap1R As Double, Cap2Pos1 As VECTOR_D, Cap2Pos2 As VECTOR_D, Cap2R As Double) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Capsule_CapsuleD_x86(Cap1Pos1, Cap1Pos2, Cap1R, Cap2Pos1, Cap2Pos2, Cap2R)
			Else
				Return dx_HitCheck_Capsule_CapsuleD_x64(Cap1Pos1, Cap1Pos2, Cap1R, Cap2Pos1, Cap2Pos2, Cap2R)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Capsule_Triangle")> _
		Shared Function dx_HitCheck_Capsule_Triangle_x86(CapPos1 As VECTOR, CapPos2 As VECTOR, CapR As Single, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Capsule_Triangle")> _
		Shared Function dx_HitCheck_Capsule_Triangle_x64(CapPos1 As VECTOR, CapPos2 As VECTOR, CapR As Single, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Integer
		End Function
		Public Shared Function HitCheck_Capsule_Triangle(CapPos1 As VECTOR, CapPos2 As VECTOR, CapR As Single, TrianglePos1 As VECTOR, TrianglePos2 As VECTOR, TrianglePos3 As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Capsule_Triangle_x86(CapPos1, CapPos2, CapR, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_HitCheck_Capsule_Triangle_x64(CapPos1, CapPos2, CapR, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_HitCheck_Capsule_TriangleD")> _
		Shared Function dx_HitCheck_Capsule_TriangleD_x86(CapPos1 As VECTOR_D, CapPos2 As VECTOR_D, CapR As Double, TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_HitCheck_Capsule_TriangleD")> _
		Shared Function dx_HitCheck_Capsule_TriangleD_x64(CapPos1 As VECTOR_D, CapPos2 As VECTOR_D, CapR As Double, TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D) As Integer
		End Function
		Public Shared Function HitCheck_Capsule_TriangleD(CapPos1 As VECTOR_D, CapPos2 As VECTOR_D, CapR As Double, TrianglePos1 As VECTOR_D, TrianglePos2 As VECTOR_D, TrianglePos3 As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_HitCheck_Capsule_TriangleD_x86(CapPos1, CapPos2, CapR, TrianglePos1, TrianglePos2, TrianglePos3)
			Else
				Return dx_HitCheck_Capsule_TriangleD_x64(CapPos1, CapPos2, CapR, TrianglePos1, TrianglePos2, TrianglePos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_RectClipping")> _
		Shared Function dx_RectClipping_x86(ByRef Rect As RECT, ByRef ClippuRect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_RectClipping")> _
		Shared Function dx_RectClipping_x64(ByRef Rect As RECT, ByRef ClippuRect As RECT) As Integer
		End Function
		Public Shared Function RectClipping(ByRef Rect As RECT, ByRef ClippuRect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_RectClipping_x86(Rect, ClippuRect)
			Else
				Return dx_RectClipping_x64(Rect, ClippuRect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_RectAdjust")> _
		Shared Function dx_RectAdjust_x86(ByRef Rect As RECT) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_RectAdjust")> _
		Shared Function dx_RectAdjust_x64(ByRef Rect As RECT) As Integer
		End Function
		Public Shared Function RectAdjust(ByRef Rect As RECT) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_RectAdjust_x86(Rect)
			Else
				Return dx_RectAdjust_x64(Rect)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetRectSize")> _
		Shared Function dx_GetRectSize_x86(ByRef Rect As RECT, ByRef Width As Integer, ByRef Height As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetRectSize")> _
		Shared Function dx_GetRectSize_x64(ByRef Rect As RECT, ByRef Width As Integer, ByRef Height As Integer) As Integer
		End Function
		Public Shared Function GetRectSize(ByRef Rect As RECT, ByRef Width As Integer, ByRef Height As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetRectSize_x86(Rect, Width, Height)
			Else
				Return dx_GetRectSize_x64(Rect, Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetIdent")> _
		Shared Function dx_MGetIdent_x86() As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetIdent")> _
		Shared Function dx_MGetIdent_x64() As MATRIX
		End Function
		Public Shared Function MGetIdent() As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetIdent_x86()
			Else
				Return dx_MGetIdent_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetIdentD")> _
		Shared Function dx_MGetIdentD_x86() As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetIdentD")> _
		Shared Function dx_MGetIdentD_x64() As MATRIX_D
		End Function
		Public Shared Function MGetIdentD() As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetIdentD_x86()
			Else
				Return dx_MGetIdentD_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MMult")> _
		Shared Function dx_MMult_x86(In1 As MATRIX, In2 As MATRIX) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MMult")> _
		Shared Function dx_MMult_x64(In1 As MATRIX, In2 As MATRIX) As MATRIX
		End Function
		Public Shared Function MMult(In1 As MATRIX, In2 As MATRIX) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MMult_x86(In1, In2)
			Else
				Return dx_MMult_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MMultD")> _
		Shared Function dx_MMultD_x86(In1 As MATRIX_D, In2 As MATRIX_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MMultD")> _
		Shared Function dx_MMultD_x64(In1 As MATRIX_D, In2 As MATRIX_D) As MATRIX_D
		End Function
		Public Shared Function MMultD(In1 As MATRIX_D, In2 As MATRIX_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MMultD_x86(In1, In2)
			Else
				Return dx_MMultD_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MScale")> _
		Shared Function dx_MScale_x86(InM As MATRIX, Scale As Single) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MScale")> _
		Shared Function dx_MScale_x64(InM As MATRIX, Scale As Single) As MATRIX
		End Function
		Public Shared Function MScale(InM As MATRIX, Scale As Single) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MScale_x86(InM, Scale)
			Else
				Return dx_MScale_x64(InM, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MScaleD")> _
		Shared Function dx_MScaleD_x86(InM As MATRIX_D, Scale As Double) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MScaleD")> _
		Shared Function dx_MScaleD_x64(InM As MATRIX_D, Scale As Double) As MATRIX_D
		End Function
		Public Shared Function MScaleD(InM As MATRIX_D, Scale As Double) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MScaleD_x86(InM, Scale)
			Else
				Return dx_MScaleD_x64(InM, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MAdd")> _
		Shared Function dx_MAdd_x86(In1 As MATRIX, In2 As MATRIX) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MAdd")> _
		Shared Function dx_MAdd_x64(In1 As MATRIX, In2 As MATRIX) As MATRIX
		End Function
		Public Shared Function MAdd(In1 As MATRIX, In2 As MATRIX) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MAdd_x86(In1, In2)
			Else
				Return dx_MAdd_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MAddD")> _
		Shared Function dx_MAddD_x86(In1 As MATRIX_D, In2 As MATRIX_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MAddD")> _
		Shared Function dx_MAddD_x64(In1 As MATRIX_D, In2 As MATRIX_D) As MATRIX_D
		End Function
		Public Shared Function MAddD(In1 As MATRIX_D, In2 As MATRIX_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MAddD_x86(In1, In2)
			Else
				Return dx_MAddD_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetScale")> _
		Shared Function dx_MGetScale_x86(Scale As VECTOR) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetScale")> _
		Shared Function dx_MGetScale_x64(Scale As VECTOR) As MATRIX
		End Function
		Public Shared Function MGetScale(Scale As VECTOR) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetScale_x86(Scale)
			Else
				Return dx_MGetScale_x64(Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetScaleD")> _
		Shared Function dx_MGetScaleD_x86(Scale As VECTOR_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetScaleD")> _
		Shared Function dx_MGetScaleD_x64(Scale As VECTOR_D) As MATRIX_D
		End Function
		Public Shared Function MGetScaleD(Scale As VECTOR_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetScaleD_x86(Scale)
			Else
				Return dx_MGetScaleD_x64(Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotX")> _
		Shared Function dx_MGetRotX_x86(XAxisRotate As Single) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotX")> _
		Shared Function dx_MGetRotX_x64(XAxisRotate As Single) As MATRIX
		End Function
		Public Shared Function MGetRotX(XAxisRotate As Single) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotX_x86(XAxisRotate)
			Else
				Return dx_MGetRotX_x64(XAxisRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotXD")> _
		Shared Function dx_MGetRotXD_x86(XAxisRotate As Double) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotXD")> _
		Shared Function dx_MGetRotXD_x64(XAxisRotate As Double) As MATRIX_D
		End Function
		Public Shared Function MGetRotXD(XAxisRotate As Double) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotXD_x86(XAxisRotate)
			Else
				Return dx_MGetRotXD_x64(XAxisRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotY")> _
		Shared Function dx_MGetRotY_x86(YAxisRotate As Single) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotY")> _
		Shared Function dx_MGetRotY_x64(YAxisRotate As Single) As MATRIX
		End Function
		Public Shared Function MGetRotY(YAxisRotate As Single) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotY_x86(YAxisRotate)
			Else
				Return dx_MGetRotY_x64(YAxisRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotYD")> _
		Shared Function dx_MGetRotYD_x86(YAxisRotate As Double) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotYD")> _
		Shared Function dx_MGetRotYD_x64(YAxisRotate As Double) As MATRIX_D
		End Function
		Public Shared Function MGetRotYD(YAxisRotate As Double) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotYD_x86(YAxisRotate)
			Else
				Return dx_MGetRotYD_x64(YAxisRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotZ")> _
		Shared Function dx_MGetRotZ_x86(ZAxisRotate As Single) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotZ")> _
		Shared Function dx_MGetRotZ_x64(ZAxisRotate As Single) As MATRIX
		End Function
		Public Shared Function MGetRotZ(ZAxisRotate As Single) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotZ_x86(ZAxisRotate)
			Else
				Return dx_MGetRotZ_x64(ZAxisRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotZD")> _
		Shared Function dx_MGetRotZD_x86(ZAxisRotate As Double) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotZD")> _
		Shared Function dx_MGetRotZD_x64(ZAxisRotate As Double) As MATRIX_D
		End Function
		Public Shared Function MGetRotZD(ZAxisRotate As Double) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotZD_x86(ZAxisRotate)
			Else
				Return dx_MGetRotZD_x64(ZAxisRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotAxis")> _
		Shared Function dx_MGetRotAxis_x86(RotateAxis As VECTOR, Rotate As Single) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotAxis")> _
		Shared Function dx_MGetRotAxis_x64(RotateAxis As VECTOR, Rotate As Single) As MATRIX
		End Function
		Public Shared Function MGetRotAxis(RotateAxis As VECTOR, Rotate As Single) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotAxis_x86(RotateAxis, Rotate)
			Else
				Return dx_MGetRotAxis_x64(RotateAxis, Rotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotAxisD")> _
		Shared Function dx_MGetRotAxisD_x86(RotateAxis As VECTOR_D, Rotate As Double) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotAxisD")> _
		Shared Function dx_MGetRotAxisD_x64(RotateAxis As VECTOR_D, Rotate As Double) As MATRIX_D
		End Function
		Public Shared Function MGetRotAxisD(RotateAxis As VECTOR_D, Rotate As Double) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotAxisD_x86(RotateAxis, Rotate)
			Else
				Return dx_MGetRotAxisD_x64(RotateAxis, Rotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotVec2")> _
		Shared Function dx_MGetRotVec2_x86(In1 As VECTOR, In2 As VECTOR) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotVec2")> _
		Shared Function dx_MGetRotVec2_x64(In1 As VECTOR, In2 As VECTOR) As MATRIX
		End Function
		Public Shared Function MGetRotVec2(In1 As VECTOR, In2 As VECTOR) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotVec2_x86(In1, In2)
			Else
				Return dx_MGetRotVec2_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetRotVec2D")> _
		Shared Function dx_MGetRotVec2D_x86(In1 As VECTOR_D, In2 As VECTOR_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetRotVec2D")> _
		Shared Function dx_MGetRotVec2D_x64(In1 As VECTOR_D, In2 As VECTOR_D) As MATRIX_D
		End Function
		Public Shared Function MGetRotVec2D(In1 As VECTOR_D, In2 As VECTOR_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetRotVec2D_x86(In1, In2)
			Else
				Return dx_MGetRotVec2D_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetTranslate")> _
		Shared Function dx_MGetTranslate_x86(Trans As VECTOR) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetTranslate")> _
		Shared Function dx_MGetTranslate_x64(Trans As VECTOR) As MATRIX
		End Function
		Public Shared Function MGetTranslate(Trans As VECTOR) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetTranslate_x86(Trans)
			Else
				Return dx_MGetTranslate_x64(Trans)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetTranslateD")> _
		Shared Function dx_MGetTranslateD_x86(Trans As VECTOR_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetTranslateD")> _
		Shared Function dx_MGetTranslateD_x64(Trans As VECTOR_D) As MATRIX_D
		End Function
		Public Shared Function MGetTranslateD(Trans As VECTOR_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetTranslateD_x86(Trans)
			Else
				Return dx_MGetTranslateD_x64(Trans)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetAxis1")> _
		Shared Function dx_MGetAxis1_x86(XAxis As VECTOR, YAxis As VECTOR, ZAxis As VECTOR, Pos As VECTOR) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetAxis1")> _
		Shared Function dx_MGetAxis1_x64(XAxis As VECTOR, YAxis As VECTOR, ZAxis As VECTOR, Pos As VECTOR) As MATRIX
		End Function
		Public Shared Function MGetAxis1(XAxis As VECTOR, YAxis As VECTOR, ZAxis As VECTOR, Pos As VECTOR) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetAxis1_x86(XAxis, YAxis, ZAxis, Pos)
			Else
				Return dx_MGetAxis1_x64(XAxis, YAxis, ZAxis, Pos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetAxis1D")> _
		Shared Function dx_MGetAxis1D_x86(XAxis As VECTOR_D, YAxis As VECTOR_D, ZAxis As VECTOR_D, Pos As VECTOR_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetAxis1D")> _
		Shared Function dx_MGetAxis1D_x64(XAxis As VECTOR_D, YAxis As VECTOR_D, ZAxis As VECTOR_D, Pos As VECTOR_D) As MATRIX_D
		End Function
		Public Shared Function MGetAxis1D(XAxis As VECTOR_D, YAxis As VECTOR_D, ZAxis As VECTOR_D, Pos As VECTOR_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetAxis1D_x86(XAxis, YAxis, ZAxis, Pos)
			Else
				Return dx_MGetAxis1D_x64(XAxis, YAxis, ZAxis, Pos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetAxis2")> _
		Shared Function dx_MGetAxis2_x86(XAxis As VECTOR, YAxis As VECTOR, ZAxis As VECTOR, Pos As VECTOR) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetAxis2")> _
		Shared Function dx_MGetAxis2_x64(XAxis As VECTOR, YAxis As VECTOR, ZAxis As VECTOR, Pos As VECTOR) As MATRIX
		End Function
		Public Shared Function MGetAxis2(XAxis As VECTOR, YAxis As VECTOR, ZAxis As VECTOR, Pos As VECTOR) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MGetAxis2_x86(XAxis, YAxis, ZAxis, Pos)
			Else
				Return dx_MGetAxis2_x64(XAxis, YAxis, ZAxis, Pos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetAxis2D")> _
		Shared Function dx_MGetAxis2D_x86(XAxis As VECTOR_D, YAxis As VECTOR_D, ZAxis As VECTOR_D, Pos As VECTOR_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetAxis2D")> _
		Shared Function dx_MGetAxis2D_x64(XAxis As VECTOR_D, YAxis As VECTOR_D, ZAxis As VECTOR_D, Pos As VECTOR_D) As MATRIX_D
		End Function
		Public Shared Function MGetAxis2D(XAxis As VECTOR_D, YAxis As VECTOR_D, ZAxis As VECTOR_D, Pos As VECTOR_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetAxis2D_x86(XAxis, YAxis, ZAxis, Pos)
			Else
				Return dx_MGetAxis2D_x64(XAxis, YAxis, ZAxis, Pos)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MTranspose")> _
		Shared Function dx_MTranspose_x86(InM As MATRIX) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MTranspose")> _
		Shared Function dx_MTranspose_x64(InM As MATRIX) As MATRIX
		End Function
		Public Shared Function MTranspose(InM As MATRIX) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MTranspose_x86(InM)
			Else
				Return dx_MTranspose_x64(InM)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MTransposeD")> _
		Shared Function dx_MTransposeD_x86(InM As MATRIX_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MTransposeD")> _
		Shared Function dx_MTransposeD_x64(InM As MATRIX_D) As MATRIX_D
		End Function
		Public Shared Function MTransposeD(InM As MATRIX_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MTransposeD_x86(InM)
			Else
				Return dx_MTransposeD_x64(InM)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MInverse")> _
		Shared Function dx_MInverse_x86(InM As MATRIX) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MInverse")> _
		Shared Function dx_MInverse_x64(InM As MATRIX) As MATRIX
		End Function
		Public Shared Function MInverse(InM As MATRIX) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MInverse_x86(InM)
			Else
				Return dx_MInverse_x64(InM)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MInverseD")> _
		Shared Function dx_MInverseD_x86(InM As MATRIX_D) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MInverseD")> _
		Shared Function dx_MInverseD_x64(InM As MATRIX_D) As MATRIX_D
		End Function
		Public Shared Function MInverseD(InM As MATRIX_D) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MInverseD_x86(InM)
			Else
				Return dx_MInverseD_x64(InM)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetSize")> _
		Shared Function dx_MGetSize_x86(InM As MATRIX) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetSize")> _
		Shared Function dx_MGetSize_x64(InM As MATRIX) As VECTOR
		End Function
		Public Shared Function MGetSize(InM As MATRIX) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MGetSize_x86(InM)
			Else
				Return dx_MGetSize_x64(InM)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MGetSizeD")> _
		Shared Function dx_MGetSizeD_x86(InM As MATRIX_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MGetSizeD")> _
		Shared Function dx_MGetSizeD_x64(InM As MATRIX_D) As VECTOR_D
		End Function
		Public Shared Function MGetSizeD(InM As MATRIX_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_MGetSizeD_x86(InM)
			Else
				Return dx_MGetSizeD_x64(InM)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VNorm")> _
		Shared Function dx_VNorm_x86([In] As VECTOR) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VNorm")> _
		Shared Function dx_VNorm_x64([In] As VECTOR) As VECTOR
		End Function
		Public Shared Function VNorm([In] As VECTOR) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_VNorm_x86([In])
			Else
				Return dx_VNorm_x64([In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VNormD")> _
		Shared Function dx_VNormD_x86([In] As VECTOR_D) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VNormD")> _
		Shared Function dx_VNormD_x64([In] As VECTOR_D) As VECTOR_D
		End Function
		Public Shared Function VNormD([In] As VECTOR_D) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_VNormD_x86([In])
			Else
				Return dx_VNormD_x64([In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VSize")> _
		Shared Function dx_VSize_x86([In] As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VSize")> _
		Shared Function dx_VSize_x64([In] As VECTOR) As Single
		End Function
		Public Shared Function VSize([In] As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_VSize_x86([In])
			Else
				Return dx_VSize_x64([In])
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VCos")> _
		Shared Function dx_VCos_x86(In1 As VECTOR, In2 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VCos")> _
		Shared Function dx_VCos_x64(In1 As VECTOR, In2 As VECTOR) As Single
		End Function
		Public Shared Function VCos(In1 As VECTOR, In2 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_VCos_x86(In1, In2)
			Else
				Return dx_VCos_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_VRad")> _
		Shared Function dx_VRad_x86(In1 As VECTOR, In2 As VECTOR) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_VRad")> _
		Shared Function dx_VRad_x64(In1 As VECTOR, In2 As VECTOR) As Single
		End Function
		Public Shared Function VRad(In1 As VECTOR, In2 As VECTOR) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_VRad_x86(In1, In2)
			Else
				Return dx_VRad_x64(In1, In2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseFastLoadFlag")> _
		Shared Function dx_SetUseFastLoadFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseFastLoadFlag")> _
		Shared Function dx_SetUseFastLoadFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseFastLoadFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseFastLoadFlag_x86(Flag)
			Else
				Return dx_SetUseFastLoadFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetGraphDataShavedMode")> _
		Shared Function dx_SetGraphDataShavedMode_x86(ShavedMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetGraphDataShavedMode")> _
		Shared Function dx_SetGraphDataShavedMode_x64(ShavedMode As Integer) As Integer
		End Function
		Public Shared Function SetGraphDataShavedMode(ShavedMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetGraphDataShavedMode_x86(ShavedMode)
			Else
				Return dx_SetGraphDataShavedMode_x64(ShavedMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetGraphDataShavedMode")> _
		Shared Function dx_GetGraphDataShavedMode_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetGraphDataShavedMode")> _
		Shared Function dx_GetGraphDataShavedMode_x64() As Integer
		End Function
		Public Shared Function GetGraphDataShavedMode() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetGraphDataShavedMode_x86()
			Else
				Return dx_GetGraphDataShavedMode_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUsePremulAlphaConvertLoad")> _
		Shared Function dx_SetUsePremulAlphaConvertLoad_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUsePremulAlphaConvertLoad")> _
		Shared Function dx_SetUsePremulAlphaConvertLoad_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function SetUsePremulAlphaConvertLoad(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUsePremulAlphaConvertLoad_x86(UseFlag)
			Else
				Return dx_SetUsePremulAlphaConvertLoad_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColorF")> _
		Shared Function dx_GetColorF_x86(Red As Single, Green As Single, Blue As Single, Alpha As Single) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColorF")> _
		Shared Function dx_GetColorF_x64(Red As Single, Green As Single, Blue As Single, Alpha As Single) As COLOR_F
		End Function
		Public Shared Function GetColorF(Red As Single, Green As Single, Blue As Single, Alpha As Single) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_GetColorF_x86(Red, Green, Blue, Alpha)
			Else
				Return dx_GetColorF_x64(Red, Green, Blue, Alpha)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColorU8")> _
		Shared Function dx_GetColorU8_x86(Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As COLOR_U8
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColorU8")> _
		Shared Function dx_GetColorU8_x64(Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As COLOR_U8
		End Function
		Public Shared Function GetColorU8(Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As COLOR_U8
			If System.IntPtr.Size = 4 Then
				Return dx_GetColorU8_x86(Red, Green, Blue, Alpha)
			Else
				Return dx_GetColorU8_x64(Red, Green, Blue, Alpha)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColor")> _
		Shared Function dx_GetColor_x86(Red As Integer, Green As Integer, Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColor")> _
		Shared Function dx_GetColor_x64(Red As Integer, Green As Integer, Blue As Integer) As Integer
		End Function
		Public Shared Function GetColor(Red As Integer, Green As Integer, Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColor_x86(Red, Green, Blue)
			Else
				Return dx_GetColor_x64(Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColor2")> _
		Shared Function dx_GetColor2_x86(Color As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColor2")> _
		Shared Function dx_GetColor2_x64(Color As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
		End Function
		Public Shared Function GetColor2(Color As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColor2_x86(Color, Red, Green, Blue)
			Else
				Return dx_GetColor2_x64(Color, Red, Green, Blue)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColor3")> _
		Shared Function dx_GetColor3_x86(ByRef ColorData As COLORDATA, Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColor3")> _
		Shared Function dx_GetColor3_x64(ByRef ColorData As COLORDATA, Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As Integer
		End Function
		Public Shared Function GetColor3(ByRef ColorData As COLORDATA, Red As Integer, Green As Integer, Blue As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColor3_x86(ColorData, Red, Green, Blue, 255)
			Else
				Return dx_GetColor3_x64(ColorData, Red, Green, Blue, 255)
			End If
		End Function
		Public Shared Function GetColor3(ByRef ColorData As COLORDATA, Red As Integer, Green As Integer, Blue As Integer, Alpha As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColor3_x86(ColorData, Red, Green, Blue, Alpha)
			Else
				Return dx_GetColor3_x64(ColorData, Red, Green, Blue, Alpha)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColor4")> _
		Shared Function dx_GetColor4_x86(ByRef DestColorData As COLORDATA, ByRef SrcColorData As COLORDATA, SrcColor As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColor4")> _
		Shared Function dx_GetColor4_x64(ByRef DestColorData As COLORDATA, ByRef SrcColorData As COLORDATA, SrcColor As Integer) As Integer
		End Function
		Public Shared Function GetColor4(ByRef DestColorData As COLORDATA, ByRef SrcColorData As COLORDATA, SrcColor As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColor4_x86(DestColorData, SrcColorData, SrcColor)
			Else
				Return dx_GetColor4_x64(DestColorData, SrcColorData, SrcColor)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetColor5")> _
		Shared Function dx_GetColor5_x86(ByRef ColorData As COLORDATA, Color As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer, ByRef Alpha As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetColor5")> _
		Shared Function dx_GetColor5_x64(ByRef ColorData As COLORDATA, Color As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer, ByRef Alpha As Integer) As Integer
		End Function
		Public Shared Function GetColor5(ByRef ColorData As COLORDATA, Color As Integer, ByRef Red As Integer, ByRef Green As Integer, ByRef Blue As Integer, ByRef Alpha As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetColor5_x86(ColorData, Color, Red, Green, Blue, Alpha)
			Else
				Return dx_GetColor5_x64(ColorData, Color, Red, Green, Blue, Alpha)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePaletteColorData")> _
		Shared Function dx_CreatePaletteColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePaletteColorData")> _
		Shared Function dx_CreatePaletteColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreatePaletteColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePaletteColorData_x86(ColorDataBuf)
			Else
				Return dx_CreatePaletteColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateXRGB8ColorData")> _
		Shared Function dx_CreateXRGB8ColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateXRGB8ColorData")> _
		Shared Function dx_CreateXRGB8ColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreateXRGB8ColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateXRGB8ColorData_x86(ColorDataBuf)
			Else
				Return dx_CreateXRGB8ColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateARGB8ColorData")> _
		Shared Function dx_CreateARGB8ColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateARGB8ColorData")> _
		Shared Function dx_CreateARGB8ColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreateARGB8ColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateARGB8ColorData_x86(ColorDataBuf)
			Else
				Return dx_CreateARGB8ColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateARGB4ColorData")> _
		Shared Function dx_CreateARGB4ColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateARGB4ColorData")> _
		Shared Function dx_CreateARGB4ColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreateARGB4ColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateARGB4ColorData_x86(ColorDataBuf)
			Else
				Return dx_CreateARGB4ColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateFullColorData")> _
		Shared Function dx_CreateFullColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateFullColorData")> _
		Shared Function dx_CreateFullColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreateFullColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateFullColorData_x86(ColorDataBuf)
			Else
				Return dx_CreateFullColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateGrayColorData")> _
		Shared Function dx_CreateGrayColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateGrayColorData")> _
		Shared Function dx_CreateGrayColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreateGrayColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateGrayColorData_x86(ColorDataBuf)
			Else
				Return dx_CreateGrayColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreatePal8ColorData")> _
		Shared Function dx_CreatePal8ColorData_x86(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreatePal8ColorData")> _
		Shared Function dx_CreatePal8ColorData_x64(ByRef ColorDataBuf As COLORDATA) As Integer
		End Function
		Public Shared Function CreatePal8ColorData(ByRef ColorDataBuf As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreatePal8ColorData_x86(ColorDataBuf)
			Else
				Return dx_CreatePal8ColorData_x64(ColorDataBuf)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CreateColorData")> _
		Shared Function dx_CreateColorData_x86(ByRef ColorDataBuf As COLORDATA, ColorBitDepth As Integer, RedMask As UInteger, GreenMask As UInteger, BlueMask As UInteger, AlphaMask As UInteger, _
			ChannelNum As Integer, ChannelBitDepth As Integer, FloatTypeFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CreateColorData")> _
		Shared Function dx_CreateColorData_x64(ByRef ColorDataBuf As COLORDATA, ColorBitDepth As Integer, RedMask As UInteger, GreenMask As UInteger, BlueMask As UInteger, AlphaMask As UInteger, _
			ChannelNum As Integer, ChannelBitDepth As Integer, FloatTypeFlag As Integer) As Integer
		End Function
		Public Shared Function CreateColorData(ByRef ColorDataBuf As COLORDATA, ColorBitDepth As Integer, RedMask As UInteger, GreenMask As UInteger, BlueMask As UInteger, AlphaMask As UInteger) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateColorData_x86(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					0, 0, [FALSE])
			Else
				Return dx_CreateColorData_x64(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					0, 0, [FALSE])
			End If
		End Function
		Public Shared Function CreateColorData(ByRef ColorDataBuf As COLORDATA, ColorBitDepth As Integer, RedMask As UInteger, GreenMask As UInteger, BlueMask As UInteger, AlphaMask As UInteger, _
			ChannelNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateColorData_x86(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					ChannelNum, 0, [FALSE])
			Else
				Return dx_CreateColorData_x64(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					ChannelNum, 0, [FALSE])
			End If
		End Function
		Public Shared Function CreateColorData(ByRef ColorDataBuf As COLORDATA, ColorBitDepth As Integer, RedMask As UInteger, GreenMask As UInteger, BlueMask As UInteger, AlphaMask As UInteger, _
			ChannelNum As Integer, ChannelBitDepth As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateColorData_x86(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					ChannelNum, ChannelBitDepth, [FALSE])
			Else
				Return dx_CreateColorData_x64(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					ChannelNum, ChannelBitDepth, [FALSE])
			End If
		End Function
		Public Shared Function CreateColorData(ByRef ColorDataBuf As COLORDATA, ColorBitDepth As Integer, RedMask As UInteger, GreenMask As UInteger, BlueMask As UInteger, AlphaMask As UInteger, _
			ChannelNum As Integer, ChannelBitDepth As Integer, FloatTypeFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CreateColorData_x86(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					ChannelNum, ChannelBitDepth, FloatTypeFlag)
			Else
				Return dx_CreateColorData_x64(ColorDataBuf, ColorBitDepth, RedMask, GreenMask, BlueMask, AlphaMask, _
					ChannelNum, ChannelBitDepth, FloatTypeFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetColorDataNoneMask")> _
		Shared Sub dx_SetColorDataNoneMask_x86(ByRef ColorData As COLORDATA)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetColorDataNoneMask")> _
		Shared Sub dx_SetColorDataNoneMask_x64(ByRef ColorData As COLORDATA)
		End Sub
		Public Shared Sub SetColorDataNoneMask(ByRef ColorData As COLORDATA)
			If System.IntPtr.Size = 4 Then
				dx_SetColorDataNoneMask_x86(ColorData)
			Else
				dx_SetColorDataNoneMask_x64(ColorData)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_CmpColorData")> _
		Shared Function dx_CmpColorData_x86(ByRef ColorData1 As COLORDATA, ByRef ColorData2 As COLORDATA) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CmpColorData")> _
		Shared Function dx_CmpColorData_x64(ByRef ColorData1 As COLORDATA, ByRef ColorData2 As COLORDATA) As Integer
		End Function
		Public Shared Function CmpColorData(ByRef ColorData1 As COLORDATA, ByRef ColorData2 As COLORDATA) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CmpColorData_x86(ColorData1, ColorData2)
			Else
				Return dx_CmpColorData_x64(ColorData1, ColorData2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitSoftImage")> _
		Shared Function dx_InitSoftImage_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitSoftImage")> _
		Shared Function dx_InitSoftImage_x64() As Integer
		End Function
		Public Shared Function InitSoftImage() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitSoftImage_x86()
			Else
				Return dx_InitSoftImage_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoftImage")> _
		Shared Function dx_LoadSoftImage_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoftImage")> _
		Shared Function dx_LoadSoftImage_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadSoftImage(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoftImage_x86(FileName)
			Else
				Return dx_LoadSoftImage_x64(FileName)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoftImageToMem")> _
		Shared Function dx_LoadSoftImageToMem_x86(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoftImageToMem")> _
		Shared Function dx_LoadSoftImageToMem_x64(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		Public Shared Function LoadSoftImageToMem(FileImage As System.Void*, FileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoftImageToMem_x86(FileImage, FileImageSize)
			Else
				Return dx_LoadSoftImageToMem_x64(FileImage, FileImageSize)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftImage")> _
		Shared Function dx_MakeSoftImage_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftImage")> _
		Shared Function dx_MakeSoftImage_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakeSoftImage(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftImage_x86(SizeX, SizeY)
			Else
				Return dx_MakeSoftImage_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeARGB8ColorSoftImage")> _
		Shared Function dx_MakeARGB8ColorSoftImage_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeARGB8ColorSoftImage")> _
		Shared Function dx_MakeARGB8ColorSoftImage_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakeARGB8ColorSoftImage(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeARGB8ColorSoftImage_x86(SizeX, SizeY)
			Else
				Return dx_MakeARGB8ColorSoftImage_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeXRGB8ColorSoftImage")> _
		Shared Function dx_MakeXRGB8ColorSoftImage_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeXRGB8ColorSoftImage")> _
		Shared Function dx_MakeXRGB8ColorSoftImage_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakeXRGB8ColorSoftImage(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeXRGB8ColorSoftImage_x86(SizeX, SizeY)
			Else
				Return dx_MakeXRGB8ColorSoftImage_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeARGB4ColorSoftImage")> _
		Shared Function dx_MakeARGB4ColorSoftImage_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeARGB4ColorSoftImage")> _
		Shared Function dx_MakeARGB4ColorSoftImage_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakeARGB4ColorSoftImage(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeARGB4ColorSoftImage_x86(SizeX, SizeY)
			Else
				Return dx_MakeARGB4ColorSoftImage_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeRGB8ColorSoftImage")> _
		Shared Function dx_MakeRGB8ColorSoftImage_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeRGB8ColorSoftImage")> _
		Shared Function dx_MakeRGB8ColorSoftImage_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakeRGB8ColorSoftImage(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeRGB8ColorSoftImage_x86(SizeX, SizeY)
			Else
				Return dx_MakeRGB8ColorSoftImage_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakePAL8ColorSoftImage")> _
		Shared Function dx_MakePAL8ColorSoftImage_x86(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakePAL8ColorSoftImage")> _
		Shared Function dx_MakePAL8ColorSoftImage_x64(SizeX As Integer, SizeY As Integer) As Integer
		End Function
		Public Shared Function MakePAL8ColorSoftImage(SizeX As Integer, SizeY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakePAL8ColorSoftImage_x86(SizeX, SizeY)
			Else
				Return dx_MakePAL8ColorSoftImage_x64(SizeX, SizeY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteSoftImage")> _
		Shared Function dx_DeleteSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteSoftImage")> _
		Shared Function dx_DeleteSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteSoftImage_x86(SIHandle)
			Else
				Return dx_DeleteSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoftImageSize")> _
		Shared Function dx_GetSoftImageSize_x86(SIHandle As Integer, ByRef Width As Integer, ByRef Height As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoftImageSize")> _
		Shared Function dx_GetSoftImageSize_x64(SIHandle As Integer, ByRef Width As Integer, ByRef Height As Integer) As Integer
		End Function
		Public Shared Function GetSoftImageSize(SIHandle As Integer, ByRef Width As Integer, ByRef Height As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoftImageSize_x86(SIHandle, Width, Height)
			Else
				Return dx_GetSoftImageSize_x64(SIHandle, Width, Height)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckPaletteSoftImage")> _
		Shared Function dx_CheckPaletteSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckPaletteSoftImage")> _
		Shared Function dx_CheckPaletteSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function CheckPaletteSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckPaletteSoftImage_x86(SIHandle)
			Else
				Return dx_CheckPaletteSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckAlphaSoftImage")> _
		Shared Function dx_CheckAlphaSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckAlphaSoftImage")> _
		Shared Function dx_CheckAlphaSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function CheckAlphaSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckAlphaSoftImage_x86(SIHandle)
			Else
				Return dx_CheckAlphaSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckPixelAlphaSoftImage")> _
		Shared Function dx_CheckPixelAlphaSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckPixelAlphaSoftImage")> _
		Shared Function dx_CheckPixelAlphaSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function CheckPixelAlphaSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckPixelAlphaSoftImage_x86(SIHandle)
			Else
				Return dx_CheckPixelAlphaSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawScreenSoftImage")> _
		Shared Function dx_GetDrawScreenSoftImage_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawScreenSoftImage")> _
		Shared Function dx_GetDrawScreenSoftImage_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, SIHandle As Integer) As Integer
		End Function
		Public Shared Function GetDrawScreenSoftImage(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawScreenSoftImage_x86(x1, y1, x2, y2, SIHandle)
			Else
				Return dx_GetDrawScreenSoftImage_x64(x1, y1, x2, y2, SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDrawScreenSoftImageDestPos")> _
		Shared Function dx_GetDrawScreenSoftImageDestPos_x86(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, SIHandle As Integer, DestX As Integer, _
			DestY As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDrawScreenSoftImageDestPos")> _
		Shared Function dx_GetDrawScreenSoftImageDestPos_x64(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, SIHandle As Integer, DestX As Integer, _
			DestY As Integer) As Integer
		End Function
		Public Shared Function GetDrawScreenSoftImageDestPos(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, SIHandle As Integer, DestX As Integer, _
			DestY As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDrawScreenSoftImageDestPos_x86(x1, y1, x2, y2, SIHandle, DestX, _
					DestY)
			Else
				Return dx_GetDrawScreenSoftImageDestPos_x64(x1, y1, x2, y2, SIHandle, DestX, _
					DestY)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_UpdateLayerdWindowForSoftImage")> _
		Shared Function dx_UpdateLayerdWindowForSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_UpdateLayerdWindowForSoftImage")> _
		Shared Function dx_UpdateLayerdWindowForSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function UpdateLayerdWindowForSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_UpdateLayerdWindowForSoftImage_x86(SIHandle)
			Else
				Return dx_UpdateLayerdWindowForSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_UpdateLayerdWindowForSoftImageRect")> _
		Shared Function dx_UpdateLayerdWindowForSoftImageRect_x86(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_UpdateLayerdWindowForSoftImageRect")> _
		Shared Function dx_UpdateLayerdWindowForSoftImageRect_x64(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		Public Shared Function UpdateLayerdWindowForSoftImageRect(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_UpdateLayerdWindowForSoftImageRect_x86(SIHandle, x1, y1, x2, y2)
			Else
				Return dx_UpdateLayerdWindowForSoftImageRect_x64(SIHandle, x1, y1, x2, y2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage")> _
		Shared Function dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage")> _
		Shared Function dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function UpdateLayerdWindowForPremultipliedAlphaSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage_x86(SIHandle)
			Else
				Return dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect")> _
		Shared Function dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect_x86(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect")> _
		Shared Function dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect_x64(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
		End Function
		Public Shared Function UpdateLayerdWindowForPremultipliedAlphaSoftImageRect(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect_x86(SIHandle, x1, y1, x2, y2)
			Else
				Return dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect_x64(SIHandle, x1, y1, x2, y2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_FillSoftImage")> _
		Shared Function dx_FillSoftImage_x86(SIHandle As Integer, r As Integer, g As Integer, b As Integer, a As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_FillSoftImage")> _
		Shared Function dx_FillSoftImage_x64(SIHandle As Integer, r As Integer, g As Integer, b As Integer, a As Integer) As Integer
		End Function
		Public Shared Function FillSoftImage(SIHandle As Integer, r As Integer, g As Integer, b As Integer, a As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_FillSoftImage_x86(SIHandle, r, g, b, a)
			Else
				Return dx_FillSoftImage_x64(SIHandle, r, g, b, a)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ClearRectSoftImage")> _
		Shared Function dx_ClearRectSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer, w As Integer, h As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ClearRectSoftImage")> _
		Shared Function dx_ClearRectSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer, w As Integer, h As Integer) As Integer
		End Function
		Public Shared Function ClearRectSoftImage(SIHandle As Integer, x As Integer, y As Integer, w As Integer, h As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ClearRectSoftImage_x86(SIHandle, x, y, w, h)
			Else
				Return dx_ClearRectSoftImage_x64(SIHandle, x, y, w, h)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPaletteSoftImage")> _
		Shared Function dx_GetPaletteSoftImage_x86(SIHandle As Integer, PaletteNo As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, ByRef a As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPaletteSoftImage")> _
		Shared Function dx_GetPaletteSoftImage_x64(SIHandle As Integer, PaletteNo As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, ByRef a As Integer) As Integer
		End Function
		Public Shared Function GetPaletteSoftImage(SIHandle As Integer, PaletteNo As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, ByRef a As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPaletteSoftImage_x86(SIHandle, PaletteNo, r, g, b, a)
			Else
				Return dx_GetPaletteSoftImage_x64(SIHandle, PaletteNo, r, g, b, a)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPaletteSoftImage")> _
		Shared Function dx_SetPaletteSoftImage_x86(SIHandle As Integer, PaletteNo As Integer, r As Integer, g As Integer, b As Integer, a As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPaletteSoftImage")> _
		Shared Function dx_SetPaletteSoftImage_x64(SIHandle As Integer, PaletteNo As Integer, r As Integer, g As Integer, b As Integer, a As Integer) As Integer
		End Function
		Public Shared Function SetPaletteSoftImage(SIHandle As Integer, PaletteNo As Integer, r As Integer, g As Integer, b As Integer, a As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPaletteSoftImage_x86(SIHandle, PaletteNo, r, g, b, a)
			Else
				Return dx_SetPaletteSoftImage_x64(SIHandle, PaletteNo, r, g, b, a)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixelPalCodeSoftImage")> _
		Shared Function dx_DrawPixelPalCodeSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer, palNo As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixelPalCodeSoftImage")> _
		Shared Function dx_DrawPixelPalCodeSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer, palNo As Integer) As Integer
		End Function
		Public Shared Function DrawPixelPalCodeSoftImage(SIHandle As Integer, x As Integer, y As Integer, palNo As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPixelPalCodeSoftImage_x86(SIHandle, x, y, palNo)
			Else
				Return dx_DrawPixelPalCodeSoftImage_x64(SIHandle, x, y, palNo)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPixelPalCodeSoftImage")> _
		Shared Function dx_GetPixelPalCodeSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPixelPalCodeSoftImage")> _
		Shared Function dx_GetPixelPalCodeSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer) As Integer
		End Function
		Public Shared Function GetPixelPalCodeSoftImage(SIHandle As Integer, x As Integer, y As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPixelPalCodeSoftImage_x86(SIHandle, x, y)
			Else
				Return dx_GetPixelPalCodeSoftImage_x64(SIHandle, x, y)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetImageAddressSoftImage")> _
		Shared Sub dx_GetImageAddressSoftImage_x86(SIHandle As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetImageAddressSoftImage")> _
		Shared Sub dx_GetImageAddressSoftImage_x64(SIHandle As Integer)
		End Sub
		Public Shared Sub GetImageAddressSoftImage(SIHandle As Integer)
			If System.IntPtr.Size = 4 Then
				Return dx_GetImageAddressSoftImage_x86(SIHandle)
			Else
				Return dx_GetImageAddressSoftImage_x64(SIHandle)
			End If
		End Sub
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPitchSoftImage")> _
		Shared Function dx_GetPitchSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPitchSoftImage")> _
		Shared Function dx_GetPitchSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function GetPitchSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPitchSoftImage_x86(SIHandle)
			Else
				Return dx_GetPitchSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixelSoftImage")> _
		Shared Function dx_DrawPixelSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer, _
			a As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixelSoftImage")> _
		Shared Function dx_DrawPixelSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer, _
			a As Integer) As Integer
		End Function
		Public Shared Function DrawPixelSoftImage(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer, _
			a As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawPixelSoftImage_x86(SIHandle, x, y, r, g, b, _
					a)
			Else
				Return dx_DrawPixelSoftImage_x64(SIHandle, x, y, r, g, b, _
					a)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixelSoftImage_Unsafe_XRGB8")> _
		Shared Sub dx_DrawPixelSoftImage_Unsafe_XRGB8_x86(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixelSoftImage_Unsafe_XRGB8")> _
		Shared Sub dx_DrawPixelSoftImage_Unsafe_XRGB8_x64(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer)
		End Sub
		Public Shared Sub DrawPixelSoftImage_Unsafe_XRGB8(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer)
			If System.IntPtr.Size = 4 Then
				dx_DrawPixelSoftImage_Unsafe_XRGB8_x86(SIHandle, x, y, r, g, b)
			Else
				dx_DrawPixelSoftImage_Unsafe_XRGB8_x64(SIHandle, x, y, r, g, b)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawPixelSoftImage_Unsafe_ARGB8")> _
		Shared Sub dx_DrawPixelSoftImage_Unsafe_ARGB8_x86(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer, _
			a As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawPixelSoftImage_Unsafe_ARGB8")> _
		Shared Sub dx_DrawPixelSoftImage_Unsafe_ARGB8_x64(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer, _
			a As Integer)
		End Sub
		Public Shared Sub DrawPixelSoftImage_Unsafe_ARGB8(SIHandle As Integer, x As Integer, y As Integer, r As Integer, g As Integer, b As Integer, _
			a As Integer)
			If System.IntPtr.Size = 4 Then
				dx_DrawPixelSoftImage_Unsafe_ARGB8_x86(SIHandle, x, y, r, g, b, _
					a)
			Else
				dx_DrawPixelSoftImage_Unsafe_ARGB8_x64(SIHandle, x, y, r, g, b, _
					a)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPixelSoftImage")> _
		Shared Function dx_GetPixelSoftImage_x86(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, _
			ByRef a As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPixelSoftImage")> _
		Shared Function dx_GetPixelSoftImage_x64(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, _
			ByRef a As Integer) As Integer
		End Function
		Public Shared Function GetPixelSoftImage(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, _
			ByRef a As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPixelSoftImage_x86(SIHandle, x, y, r, g, b, _
					a)
			Else
				Return dx_GetPixelSoftImage_x64(SIHandle, x, y, r, g, b, _
					a)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPixelSoftImage_Unsafe_XRGB8")> _
		Shared Sub dx_GetPixelSoftImage_Unsafe_XRGB8_x86(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPixelSoftImage_Unsafe_XRGB8")> _
		Shared Sub dx_GetPixelSoftImage_Unsafe_XRGB8_x64(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer)
		End Sub
		Public Shared Sub GetPixelSoftImage_Unsafe_XRGB8(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer)
			If System.IntPtr.Size = 4 Then
				dx_GetPixelSoftImage_Unsafe_XRGB8_x86(SIHandle, x, y, r, g, b)
			Else
				dx_GetPixelSoftImage_Unsafe_XRGB8_x64(SIHandle, x, y, r, g, b)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPixelSoftImage_Unsafe_ARGB8")> _
		Shared Sub dx_GetPixelSoftImage_Unsafe_ARGB8_x86(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, _
			ByRef a As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPixelSoftImage_Unsafe_ARGB8")> _
		Shared Sub dx_GetPixelSoftImage_Unsafe_ARGB8_x64(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, _
			ByRef a As Integer)
		End Sub
		Public Shared Sub GetPixelSoftImage_Unsafe_ARGB8(SIHandle As Integer, x As Integer, y As Integer, ByRef r As Integer, ByRef g As Integer, ByRef b As Integer, _
			ByRef a As Integer)
			If System.IntPtr.Size = 4 Then
				dx_GetPixelSoftImage_Unsafe_ARGB8_x86(SIHandle, x, y, r, g, b, _
					a)
			Else
				dx_GetPixelSoftImage_Unsafe_ARGB8_x64(SIHandle, x, y, r, g, b, _
					a)
			End If
		End Sub

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawLineSoftImage")> _
		Shared Function dx_DrawLineSoftImage_x86(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, r As Integer, _
			g As Integer, b As Integer, a As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawLineSoftImage")> _
		Shared Function dx_DrawLineSoftImage_x64(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, r As Integer, _
			g As Integer, b As Integer, a As Integer) As Integer
		End Function
		Public Shared Function DrawLineSoftImage(SIHandle As Integer, x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, r As Integer, _
			g As Integer, b As Integer, a As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawLineSoftImage_x86(SIHandle, x1, y1, x2, y2, r, _
					g, b, a)
			Else
				Return dx_DrawLineSoftImage_x64(SIHandle, x1, y1, x2, y2, r, _
					g, b, a)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltSoftImage")> _
		Shared Function dx_BltSoftImage_x86(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltSoftImage")> _
		Shared Function dx_BltSoftImage_x64(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer) As Integer
		End Function
		Public Shared Function BltSoftImage(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltSoftImage_x86(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle)
			Else
				Return dx_BltSoftImage_x64(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltSoftImageWithTransColor")> _
		Shared Function dx_BltSoftImageWithTransColor_x86(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer, Tr As Integer, Tg As Integer, Tb As Integer, Ta As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltSoftImageWithTransColor")> _
		Shared Function dx_BltSoftImageWithTransColor_x64(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer, Tr As Integer, Tg As Integer, Tb As Integer, Ta As Integer) As Integer
		End Function
		Public Shared Function BltSoftImageWithTransColor(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer, Tr As Integer, Tg As Integer, Tb As Integer, Ta As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltSoftImageWithTransColor_x86(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle, Tr, Tg, Tb, Ta)
			Else
				Return dx_BltSoftImageWithTransColor_x64(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle, Tr, Tg, Tb, Ta)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltSoftImageWithAlphaBlend")> _
		Shared Function dx_BltSoftImageWithAlphaBlend_x86(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer, Opacity As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltSoftImageWithAlphaBlend")> _
		Shared Function dx_BltSoftImageWithAlphaBlend_x64(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer, Opacity As Integer) As Integer
		End Function
		Public Shared Function BltSoftImageWithAlphaBlend(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltSoftImageWithAlphaBlend_x86(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle, 255)
			Else
				Return dx_BltSoftImageWithAlphaBlend_x64(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle, 255)
			End If
		End Function
		Public Shared Function BltSoftImageWithAlphaBlend(SrcX As Integer, SrcY As Integer, SrcSizeX As Integer, SrcSizeY As Integer, SrcSIHandle As Integer, DestX As Integer, _
			DestY As Integer, DestSIHandle As Integer, Opacity As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltSoftImageWithAlphaBlend_x86(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle, Opacity)
			Else
				Return dx_BltSoftImageWithAlphaBlend_x64(SrcX, SrcY, SrcSizeX, SrcSizeY, SrcSIHandle, DestX, _
					DestY, DestSIHandle, Opacity)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReverseSoftImageH")> _
		Shared Function dx_ReverseSoftImageH_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReverseSoftImageH")> _
		Shared Function dx_ReverseSoftImageH_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function ReverseSoftImageH(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReverseSoftImageH_x86(SIHandle)
			Else
				Return dx_ReverseSoftImageH_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReverseSoftImageV")> _
		Shared Function dx_ReverseSoftImageV_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReverseSoftImageV")> _
		Shared Function dx_ReverseSoftImageV_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function ReverseSoftImageV(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReverseSoftImageV_x86(SIHandle)
			Else
				Return dx_ReverseSoftImageV_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReverseSoftImage")> _
		Shared Function dx_ReverseSoftImage_x86(SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReverseSoftImage")> _
		Shared Function dx_ReverseSoftImage_x64(SIHandle As Integer) As Integer
		End Function
		Public Shared Function ReverseSoftImage(SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReverseSoftImage_x86(SIHandle)
			Else
				Return dx_ReverseSoftImage_x64(SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltStringSoftImage")> _
		Shared Function dx_BltStringSoftImage_x86(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltStringSoftImage")> _
		Shared Function dx_BltStringSoftImage_x64(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function BltStringSoftImage(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltStringSoftImage_x86(x, y, StrData, DestSIHandle, -1, [FALSE])
			Else
				Return dx_BltStringSoftImage_x64(x, y, StrData, DestSIHandle, -1, [FALSE])
			End If
		End Function
		Public Shared Function BltStringSoftImage(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltStringSoftImage_x86(x, y, StrData, DestSIHandle, DestEdgeSIHandle, [FALSE])
			Else
				Return dx_BltStringSoftImage_x64(x, y, StrData, DestSIHandle, DestEdgeSIHandle, [FALSE])
			End If
		End Function
		Public Shared Function BltStringSoftImage(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltStringSoftImage_x86(x, y, StrData, DestSIHandle, DestEdgeSIHandle, VerticalFlag)
			Else
				Return dx_BltStringSoftImage_x64(x, y, StrData, DestSIHandle, DestEdgeSIHandle, VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_BltStringSoftImageToHandle")> _
		Shared Function dx_BltStringSoftImageToHandle_x86(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, FontHandle As Integer, _
			VerticalFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_BltStringSoftImageToHandle")> _
		Shared Function dx_BltStringSoftImageToHandle_x64(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, FontHandle As Integer, _
			VerticalFlag As Integer) As Integer
		End Function
		Public Shared Function BltStringSoftImageToHandle(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, FontHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltStringSoftImageToHandle_x86(x, y, StrData, DestSIHandle, DestEdgeSIHandle, FontHandle, _
					[FALSE])
			Else
				Return dx_BltStringSoftImageToHandle_x64(x, y, StrData, DestSIHandle, DestEdgeSIHandle, FontHandle, _
					[FALSE])
			End If
		End Function
		Public Shared Function BltStringSoftImageToHandle(x As Integer, y As Integer, StrData As String, DestSIHandle As Integer, DestEdgeSIHandle As Integer, FontHandle As Integer, _
			VerticalFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_BltStringSoftImageToHandle_x86(x, y, StrData, DestSIHandle, DestEdgeSIHandle, FontHandle, _
					VerticalFlag)
			Else
				Return dx_BltStringSoftImageToHandle_x64(x, y, StrData, DestSIHandle, DestEdgeSIHandle, FontHandle, _
					VerticalFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DrawSoftImage")> _
		Shared Function dx_DrawSoftImage_x86(x As Integer, y As Integer, SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DrawSoftImage")> _
		Shared Function dx_DrawSoftImage_x64(x As Integer, y As Integer, SIHandle As Integer) As Integer
		End Function
		Public Shared Function DrawSoftImage(x As Integer, y As Integer, SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DrawSoftImage_x86(x, y, SIHandle)
			Else
				Return dx_DrawSoftImage_x64(x, y, SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveSoftImageToBmp")> _
		Shared Function dx_SaveSoftImageToBmp_x86(FilePath As String, SIHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveSoftImageToBmp")> _
		Shared Function dx_SaveSoftImageToBmp_x64(FilePath As String, SIHandle As Integer) As Integer
		End Function
		Public Shared Function SaveSoftImageToBmp(FilePath As String, SIHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveSoftImageToBmp_x86(FilePath, SIHandle)
			Else
				Return dx_SaveSoftImageToBmp_x64(FilePath, SIHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveSoftImageToPng")> _
		Shared Function dx_SaveSoftImageToPng_x86(FilePath As String, SIHandle As Integer, CompressionLevel As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveSoftImageToPng")> _
		Shared Function dx_SaveSoftImageToPng_x64(FilePath As String, SIHandle As Integer, CompressionLevel As Integer) As Integer
		End Function
		Public Shared Function SaveSoftImageToPng(FilePath As String, SIHandle As Integer, CompressionLevel As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveSoftImageToPng_x86(FilePath, SIHandle, CompressionLevel)
			Else
				Return dx_SaveSoftImageToPng_x64(FilePath, SIHandle, CompressionLevel)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveSoftImageToJpeg")> _
		Shared Function dx_SaveSoftImageToJpeg_x86(FilePath As String, SIHandle As Integer, Quality As Integer, Sample2x1 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveSoftImageToJpeg")> _
		Shared Function dx_SaveSoftImageToJpeg_x64(FilePath As String, SIHandle As Integer, Quality As Integer, Sample2x1 As Integer) As Integer
		End Function
		Public Shared Function SaveSoftImageToJpeg(FilePath As String, SIHandle As Integer, Quality As Integer, Sample2x1 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveSoftImageToJpeg_x86(FilePath, SIHandle, Quality, Sample2x1)
			Else
				Return dx_SaveSoftImageToJpeg_x64(FilePath, SIHandle, Quality, Sample2x1)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitSoundMem")> _
		Shared Function dx_InitSoundMem_x86(LogOutFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitSoundMem")> _
		Shared Function dx_InitSoundMem_x64(LogOutFlag As Integer) As Integer
		End Function
		Public Shared Function InitSoundMem() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitSoundMem_x86([FALSE])
			Else
				Return dx_InitSoundMem_x64([FALSE])
			End If
		End Function
		Public Shared Function InitSoundMem(LogOutFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitSoundMem_x86(LogOutFlag)
			Else
				Return dx_InitSoundMem_x64(LogOutFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddSoundData")> _
		Shared Function dx_AddSoundData_x86(Handle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddSoundData")> _
		Shared Function dx_AddSoundData_x64(Handle As Integer) As Integer
		End Function
		Public Shared Function AddSoundData() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddSoundData_x86(-1)
			Else
				Return dx_AddSoundData_x64(-1)
			End If
		End Function
		Public Shared Function AddSoundData(Handle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddSoundData_x86(Handle)
			Else
				Return dx_AddSoundData_x64(Handle)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_AddStreamSoundMemToMem")> _
		Shared Function dx_AddStreamSoundMemToMem_x86(FileImage As System.Void*, FileImageSize As Integer, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer, UnionHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddStreamSoundMemToMem")> _
		Shared Function dx_AddStreamSoundMemToMem_x64(FileImage As System.Void*, FileImageSize As Integer, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer, UnionHandle As Integer) As Integer
		End Function
		Public Shared Function AddStreamSoundMemToMem(FileImage As System.Void*, FileImageSize As Integer, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddStreamSoundMemToMem_x86(FileImage, FileImageSize, LoopNum, SoundHandle, StreamDataType, -1)
			Else
				Return dx_AddStreamSoundMemToMem_x64(FileImage, FileImageSize, LoopNum, SoundHandle, StreamDataType, -1)
			End If
		End Function
		Public Shared Function AddStreamSoundMemToMem(FileImage As System.Void*, FileImageSize As Integer, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer, UnionHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddStreamSoundMemToMem_x86(FileImage, FileImageSize, LoopNum, SoundHandle, StreamDataType, UnionHandle)
			Else
				Return dx_AddStreamSoundMemToMem_x64(FileImage, FileImageSize, LoopNum, SoundHandle, StreamDataType, UnionHandle)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddStreamSoundMemToFile")> _
		Shared Function dx_AddStreamSoundMemToFile_x86(WaveFile As String, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer, UnionHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddStreamSoundMemToFile")> _
		Shared Function dx_AddStreamSoundMemToFile_x64(WaveFile As String, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer, UnionHandle As Integer) As Integer
		End Function
		Public Shared Function AddStreamSoundMemToFile(WaveFile As String, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddStreamSoundMemToFile_x86(WaveFile, LoopNum, SoundHandle, StreamDataType, -1)
			Else
				Return dx_AddStreamSoundMemToFile_x64(WaveFile, LoopNum, SoundHandle, StreamDataType, -1)
			End If
		End Function
		Public Shared Function AddStreamSoundMemToFile(WaveFile As String, LoopNum As Integer, SoundHandle As Integer, StreamDataType As Integer, UnionHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddStreamSoundMemToFile_x86(WaveFile, LoopNum, SoundHandle, StreamDataType, UnionHandle)
			Else
				Return dx_AddStreamSoundMemToFile_x64(WaveFile, LoopNum, SoundHandle, StreamDataType, UnionHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetupStreamSoundMem")> _
		Shared Function dx_SetupStreamSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetupStreamSoundMem")> _
		Shared Function dx_SetupStreamSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetupStreamSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetupStreamSoundMem_x86(SoundHandle)
			Else
				Return dx_SetupStreamSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayStreamSoundMem")> _
		Shared Function dx_PlayStreamSoundMem_x86(SoundHandle As Integer, PlayType As Integer, TopPositionFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayStreamSoundMem")> _
		Shared Function dx_PlayStreamSoundMem_x64(SoundHandle As Integer, PlayType As Integer, TopPositionFlag As Integer) As Integer
		End Function
		Public Shared Function PlayStreamSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayStreamSoundMem_x86(SoundHandle, DX_PLAYTYPE_LOOP, [TRUE])
			Else
				Return dx_PlayStreamSoundMem_x64(SoundHandle, DX_PLAYTYPE_LOOP, [TRUE])
			End If
		End Function
		Public Shared Function PlayStreamSoundMem(SoundHandle As Integer, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayStreamSoundMem_x86(SoundHandle, PlayType, [TRUE])
			Else
				Return dx_PlayStreamSoundMem_x64(SoundHandle, PlayType, [TRUE])
			End If
		End Function
		Public Shared Function PlayStreamSoundMem(SoundHandle As Integer, PlayType As Integer, TopPositionFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayStreamSoundMem_x86(SoundHandle, PlayType, TopPositionFlag)
			Else
				Return dx_PlayStreamSoundMem_x64(SoundHandle, PlayType, TopPositionFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckStreamSoundMem")> _
		Shared Function dx_CheckStreamSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckStreamSoundMem")> _
		Shared Function dx_CheckStreamSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function CheckStreamSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckStreamSoundMem_x86(SoundHandle)
			Else
				Return dx_CheckStreamSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopStreamSoundMem")> _
		Shared Function dx_StopStreamSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopStreamSoundMem")> _
		Shared Function dx_StopStreamSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function StopStreamSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopStreamSoundMem_x86(SoundHandle)
			Else
				Return dx_StopStreamSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetStreamSoundCurrentPosition")> _
		Shared Function dx_SetStreamSoundCurrentPosition_x86([Byte] As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetStreamSoundCurrentPosition")> _
		Shared Function dx_SetStreamSoundCurrentPosition_x64([Byte] As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetStreamSoundCurrentPosition([Byte] As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetStreamSoundCurrentPosition_x86([Byte], SoundHandle)
			Else
				Return dx_SetStreamSoundCurrentPosition_x64([Byte], SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStreamSoundCurrentPosition")> _
		Shared Function dx_GetStreamSoundCurrentPosition_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStreamSoundCurrentPosition")> _
		Shared Function dx_GetStreamSoundCurrentPosition_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetStreamSoundCurrentPosition(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStreamSoundCurrentPosition_x86(SoundHandle)
			Else
				Return dx_GetStreamSoundCurrentPosition_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetStreamSoundCurrentTime")> _
		Shared Function dx_SetStreamSoundCurrentTime_x86(Time As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetStreamSoundCurrentTime")> _
		Shared Function dx_SetStreamSoundCurrentTime_x64(Time As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetStreamSoundCurrentTime(Time As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetStreamSoundCurrentTime_x86(Time, SoundHandle)
			Else
				Return dx_SetStreamSoundCurrentTime_x64(Time, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStreamSoundCurrentTime")> _
		Shared Function dx_GetStreamSoundCurrentTime_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStreamSoundCurrentTime")> _
		Shared Function dx_GetStreamSoundCurrentTime_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetStreamSoundCurrentTime(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStreamSoundCurrentTime_x86(SoundHandle)
			Else
				Return dx_GetStreamSoundCurrentTime_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ProcessStreamSoundMem")> _
		Shared Function dx_ProcessStreamSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ProcessStreamSoundMem")> _
		Shared Function dx_ProcessStreamSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ProcessStreamSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessStreamSoundMem_x86(SoundHandle)
			Else
				Return dx_ProcessStreamSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ProcessStreamSoundMemAll")> _
		Shared Function dx_ProcessStreamSoundMemAll_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ProcessStreamSoundMemAll")> _
		Shared Function dx_ProcessStreamSoundMemAll_x64() As Integer
		End Function
		Public Shared Function ProcessStreamSoundMemAll() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessStreamSoundMemAll_x86()
			Else
				Return dx_ProcessStreamSoundMemAll_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMem2")> _
		Shared Function dx_LoadSoundMem2_x86(FileName1 As String, FileName2 As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMem2")> _
		Shared Function dx_LoadSoundMem2_x64(FileName1 As String, FileName2 As String) As Integer
		End Function
		Public Shared Function LoadSoundMem2(FileName1 As String, FileName2 As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMem2_x86(FileName1, FileName2)
			Else
				Return dx_LoadSoundMem2_x64(FileName1, FileName2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadBGM")> _
		Shared Function dx_LoadBGM_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadBGM")> _
		Shared Function dx_LoadBGM_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadBGM(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadBGM_x86(FileName)
			Else
				Return dx_LoadBGM_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemBase")> _
		Shared Function dx_LoadSoundMemBase_x86(FileName As String, BufferNum As Integer, UnionHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemBase")> _
		Shared Function dx_LoadSoundMemBase_x64(FileName As String, BufferNum As Integer, UnionHandle As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemBase(FileName As String, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemBase_x86(FileName, BufferNum, -1)
			Else
				Return dx_LoadSoundMemBase_x64(FileName, BufferNum, -1)
			End If
		End Function
		Public Shared Function LoadSoundMemBase(FileName As String, BufferNum As Integer, UnionHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemBase_x86(FileName, BufferNum, UnionHandle)
			Else
				Return dx_LoadSoundMemBase_x64(FileName, BufferNum, UnionHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMem")> _
		Shared Function dx_LoadSoundMem_x86(FileName As String, BufferNum As Integer, UnionHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMem")> _
		Shared Function dx_LoadSoundMem_x64(FileName As String, BufferNum As Integer, UnionHandle As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMem(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMem_x86(FileName, 3, -1)
			Else
				Return dx_LoadSoundMem_x64(FileName, 3, -1)
			End If
		End Function
		Public Shared Function LoadSoundMem(FileName As String, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMem_x86(FileName, BufferNum, -1)
			Else
				Return dx_LoadSoundMem_x64(FileName, BufferNum, -1)
			End If
		End Function
		Public Shared Function LoadSoundMem(FileName As String, BufferNum As Integer, UnionHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMem_x86(FileName, BufferNum, UnionHandle)
			Else
				Return dx_LoadSoundMem_x64(FileName, BufferNum, UnionHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemToBufNumSitei")> _
		Shared Function dx_LoadSoundMemToBufNumSitei_x86(FileName As String, BufferNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemToBufNumSitei")> _
		Shared Function dx_LoadSoundMemToBufNumSitei_x64(FileName As String, BufferNum As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemToBufNumSitei(FileName As String, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemToBufNumSitei_x86(FileName, BufferNum)
			Else
				Return dx_LoadSoundMemToBufNumSitei_x64(FileName, BufferNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemByResource")> _
		Shared Function dx_LoadSoundMemByResource_x86(ResourceName As String, ResourceType As String, BufferNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemByResource")> _
		Shared Function dx_LoadSoundMemByResource_x64(ResourceName As String, ResourceType As String, BufferNum As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemByResource(ResourceName As String, ResourceType As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByResource_x86(ResourceName, ResourceType, 1)
			Else
				Return dx_LoadSoundMemByResource_x64(ResourceName, ResourceType, 1)
			End If
		End Function
		Public Shared Function LoadSoundMemByResource(ResourceName As String, ResourceType As String, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByResource_x86(ResourceName, ResourceType, BufferNum)
			Else
				Return dx_LoadSoundMemByResource_x64(ResourceName, ResourceType, BufferNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DuplicateSoundMem")> _
		Shared Function dx_DuplicateSoundMem_x86(SrcSoundHandle As Integer, BufferNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DuplicateSoundMem")> _
		Shared Function dx_DuplicateSoundMem_x64(SrcSoundHandle As Integer, BufferNum As Integer) As Integer
		End Function
		Public Shared Function DuplicateSoundMem(SrcSoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DuplicateSoundMem_x86(SrcSoundHandle, 3)
			Else
				Return dx_DuplicateSoundMem_x64(SrcSoundHandle, 3)
			End If
		End Function
		Public Shared Function DuplicateSoundMem(SrcSoundHandle As Integer, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DuplicateSoundMem_x86(SrcSoundHandle, BufferNum)
			Else
				Return dx_DuplicateSoundMem_x64(SrcSoundHandle, BufferNum)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemByMemImageBase")> _
		Shared Function dx_LoadSoundMemByMemImageBase_x86(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer, UnionHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemByMemImageBase")> _
		Shared Function dx_LoadSoundMemByMemImageBase_x64(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer, UnionHandle As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemByMemImageBase(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByMemImageBase_x86(FileImage, FileImageSize, BufferNum, -1)
			Else
				Return dx_LoadSoundMemByMemImageBase_x64(FileImage, FileImageSize, BufferNum, -1)
			End If
		End Function
		Public Shared Function LoadSoundMemByMemImageBase(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer, UnionHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByMemImageBase_x86(FileImage, FileImageSize, BufferNum, UnionHandle)
			Else
				Return dx_LoadSoundMemByMemImageBase_x64(FileImage, FileImageSize, BufferNum, UnionHandle)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemByMemImage")> _
		Shared Function dx_LoadSoundMemByMemImage_x86(FileImage As System.Void*, FileImageSize As Integer, UnionHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemByMemImage")> _
		Shared Function dx_LoadSoundMemByMemImage_x64(FileImage As System.Void*, FileImageSize As Integer, UnionHandle As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemByMemImage(FileImage As System.Void*, FileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByMemImage_x86(FileImage, FileImageSize, -1)
			Else
				Return dx_LoadSoundMemByMemImage_x64(FileImage, FileImageSize, -1)
			End If
		End Function
		Public Shared Function LoadSoundMemByMemImage(FileImage As System.Void*, FileImageSize As Integer, UnionHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByMemImage_x86(FileImage, FileImageSize, UnionHandle)
			Else
				Return dx_LoadSoundMemByMemImage_x64(FileImage, FileImageSize, UnionHandle)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemByMemImageToBufNumSitei")> _
		Shared Function dx_LoadSoundMemByMemImageToBufNumSitei_x86(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemByMemImageToBufNumSitei")> _
		Shared Function dx_LoadSoundMemByMemImageToBufNumSitei_x64(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemByMemImageToBufNumSitei(FileImage As System.Void*, FileImageSize As Integer, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemByMemImageToBufNumSitei_x86(FileImage, FileImageSize, BufferNum)
			Else
				Return dx_LoadSoundMemByMemImageToBufNumSitei_x64(FileImage, FileImageSize, BufferNum)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMem2ByMemImage")> _
		Shared Function dx_LoadSoundMem2ByMemImage_x86(FileImage1 As System.Void*, FileImageSize1 As Integer, FileImage2 As System.Void*, FileImageSize2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMem2ByMemImage")> _
		Shared Function dx_LoadSoundMem2ByMemImage_x64(FileImage1 As System.Void*, FileImageSize1 As Integer, FileImage2 As System.Void*, FileImageSize2 As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMem2ByMemImage(FileImage1 As System.Void*, FileImageSize1 As Integer, FileImage2 As System.Void*, FileImageSize2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMem2ByMemImage_x86(FileImage1, FileImageSize1, FileImage2, FileImageSize2)
			Else
				Return dx_LoadSoundMem2ByMemImage_x64(FileImage1, FileImageSize1, FileImage2, FileImageSize2)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoundMemFromSoftSound")> _
		Shared Function dx_LoadSoundMemFromSoftSound_x86(SoftSoundHandle As Integer, BufferNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoundMemFromSoftSound")> _
		Shared Function dx_LoadSoundMemFromSoftSound_x64(SoftSoundHandle As Integer, BufferNum As Integer) As Integer
		End Function
		Public Shared Function LoadSoundMemFromSoftSound(SoftSoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemFromSoftSound_x86(SoftSoundHandle, 3)
			Else
				Return dx_LoadSoundMemFromSoftSound_x64(SoftSoundHandle, 3)
			End If
		End Function
		Public Shared Function LoadSoundMemFromSoftSound(SoftSoundHandle As Integer, BufferNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoundMemFromSoftSound_x86(SoftSoundHandle, BufferNum)
			Else
				Return dx_LoadSoundMemFromSoftSound_x64(SoftSoundHandle, BufferNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteSoundMem")> _
		Shared Function dx_DeleteSoundMem_x86(SoundHandle As Integer, LogOutFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteSoundMem")> _
		Shared Function dx_DeleteSoundMem_x64(SoundHandle As Integer, LogOutFlag As Integer) As Integer
		End Function
		Public Shared Function DeleteSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteSoundMem_x86(SoundHandle, [FALSE])
			Else
				Return dx_DeleteSoundMem_x64(SoundHandle, [FALSE])
			End If
		End Function
		Public Shared Function DeleteSoundMem(SoundHandle As Integer, LogOutFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteSoundMem_x86(SoundHandle, LogOutFlag)
			Else
				Return dx_DeleteSoundMem_x64(SoundHandle, LogOutFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlaySoundMem")> _
		Shared Function dx_PlaySoundMem_x86(SoundHandle As Integer, PlayType As Integer, TopPositionFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlaySoundMem")> _
		Shared Function dx_PlaySoundMem_x64(SoundHandle As Integer, PlayType As Integer, TopPositionFlag As Integer) As Integer
		End Function
		Public Shared Function PlaySoundMem(SoundHandle As Integer, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlaySoundMem_x86(SoundHandle, PlayType, [TRUE])
			Else
				Return dx_PlaySoundMem_x64(SoundHandle, PlayType, [TRUE])
			End If
		End Function
		Public Shared Function PlaySoundMem(SoundHandle As Integer, PlayType As Integer, TopPositionFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlaySoundMem_x86(SoundHandle, PlayType, TopPositionFlag)
			Else
				Return dx_PlaySoundMem_x64(SoundHandle, PlayType, TopPositionFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopSoundMem")> _
		Shared Function dx_StopSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopSoundMem")> _
		Shared Function dx_StopSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function StopSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopSoundMem_x86(SoundHandle)
			Else
				Return dx_StopSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckSoundMem")> _
		Shared Function dx_CheckSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckSoundMem")> _
		Shared Function dx_CheckSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function CheckSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckSoundMem_x86(SoundHandle)
			Else
				Return dx_CheckSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPanSoundMem")> _
		Shared Function dx_SetPanSoundMem_x86(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPanSoundMem")> _
		Shared Function dx_SetPanSoundMem_x64(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetPanSoundMem(PanPal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPanSoundMem_x86(PanPal, SoundHandle)
			Else
				Return dx_SetPanSoundMem_x64(PanPal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangePanSoundMem")> _
		Shared Function dx_ChangePanSoundMem_x86(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangePanSoundMem")> _
		Shared Function dx_ChangePanSoundMem_x64(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ChangePanSoundMem(PanPal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangePanSoundMem_x86(PanPal, SoundHandle)
			Else
				Return dx_ChangePanSoundMem_x64(PanPal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetPanSoundMem")> _
		Shared Function dx_GetPanSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetPanSoundMem")> _
		Shared Function dx_GetPanSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetPanSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetPanSoundMem_x86(SoundHandle)
			Else
				Return dx_GetPanSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVolumeSoundMem")> _
		Shared Function dx_SetVolumeSoundMem_x86(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVolumeSoundMem")> _
		Shared Function dx_SetVolumeSoundMem_x64(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetVolumeSoundMem(VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVolumeSoundMem_x86(VolumePal, SoundHandle)
			Else
				Return dx_SetVolumeSoundMem_x64(VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeVolumeSoundMem")> _
		Shared Function dx_ChangeVolumeSoundMem_x86(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeVolumeSoundMem")> _
		Shared Function dx_ChangeVolumeSoundMem_x64(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ChangeVolumeSoundMem(VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeVolumeSoundMem_x86(VolumePal, SoundHandle)
			Else
				Return dx_ChangeVolumeSoundMem_x64(VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetVolumeSoundMem")> _
		Shared Function dx_GetVolumeSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetVolumeSoundMem")> _
		Shared Function dx_GetVolumeSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetVolumeSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetVolumeSoundMem_x86(SoundHandle)
			Else
				Return dx_GetVolumeSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetChannelVolumeSoundMem")> _
		Shared Function dx_SetChannelVolumeSoundMem_x86(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetChannelVolumeSoundMem")> _
		Shared Function dx_SetChannelVolumeSoundMem_x64(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetChannelVolumeSoundMem(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetChannelVolumeSoundMem_x86(Channel, VolumePal, SoundHandle)
			Else
				Return dx_SetChannelVolumeSoundMem_x64(Channel, VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeChannelVolumeSoundMem")> _
		Shared Function dx_ChangeChannelVolumeSoundMem_x86(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeChannelVolumeSoundMem")> _
		Shared Function dx_ChangeChannelVolumeSoundMem_x64(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ChangeChannelVolumeSoundMem(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeChannelVolumeSoundMem_x86(Channel, VolumePal, SoundHandle)
			Else
				Return dx_ChangeChannelVolumeSoundMem_x64(Channel, VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetChannelVolumeSoundMem")> _
		Shared Function dx_GetChannelVolumeSoundMem_x86(Channel As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetChannelVolumeSoundMem")> _
		Shared Function dx_GetChannelVolumeSoundMem_x64(Channel As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetChannelVolumeSoundMem(Channel As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetChannelVolumeSoundMem_x86(Channel, SoundHandle)
			Else
				Return dx_GetChannelVolumeSoundMem_x64(Channel, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetFrequencySoundMem")> _
		Shared Function dx_SetFrequencySoundMem_x86(FrequencyPal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetFrequencySoundMem")> _
		Shared Function dx_SetFrequencySoundMem_x64(FrequencyPal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetFrequencySoundMem(FrequencyPal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetFrequencySoundMem_x86(FrequencyPal, SoundHandle)
			Else
				Return dx_SetFrequencySoundMem_x64(FrequencyPal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetFrequencySoundMem")> _
		Shared Function dx_GetFrequencySoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetFrequencySoundMem")> _
		Shared Function dx_GetFrequencySoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetFrequencySoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetFrequencySoundMem_x86(SoundHandle)
			Else
				Return dx_GetFrequencySoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetFrequencySoundMem")> _
		Shared Function dx_ResetFrequencySoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetFrequencySoundMem")> _
		Shared Function dx_ResetFrequencySoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ResetFrequencySoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetFrequencySoundMem_x86(SoundHandle)
			Else
				Return dx_ResetFrequencySoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlayPanSoundMem")> _
		Shared Function dx_SetNextPlayPanSoundMem_x86(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlayPanSoundMem")> _
		Shared Function dx_SetNextPlayPanSoundMem_x64(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlayPanSoundMem(PanPal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlayPanSoundMem_x86(PanPal, SoundHandle)
			Else
				Return dx_SetNextPlayPanSoundMem_x64(PanPal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeNextPlayPanSoundMem")> _
		Shared Function dx_ChangeNextPlayPanSoundMem_x86(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeNextPlayPanSoundMem")> _
		Shared Function dx_ChangeNextPlayPanSoundMem_x64(PanPal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ChangeNextPlayPanSoundMem(PanPal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeNextPlayPanSoundMem_x86(PanPal, SoundHandle)
			Else
				Return dx_ChangeNextPlayPanSoundMem_x64(PanPal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlayVolumeSoundMem")> _
		Shared Function dx_SetNextPlayVolumeSoundMem_x86(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlayVolumeSoundMem")> _
		Shared Function dx_SetNextPlayVolumeSoundMem_x64(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlayVolumeSoundMem(VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlayVolumeSoundMem_x86(VolumePal, SoundHandle)
			Else
				Return dx_SetNextPlayVolumeSoundMem_x64(VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeNextPlayVolumeSoundMem")> _
		Shared Function dx_ChangeNextPlayVolumeSoundMem_x86(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeNextPlayVolumeSoundMem")> _
		Shared Function dx_ChangeNextPlayVolumeSoundMem_x64(VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ChangeNextPlayVolumeSoundMem(VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeNextPlayVolumeSoundMem_x86(VolumePal, SoundHandle)
			Else
				Return dx_ChangeNextPlayVolumeSoundMem_x64(VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlayChannelVolumeSoundMem")> _
		Shared Function dx_SetNextPlayChannelVolumeSoundMem_x86(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlayChannelVolumeSoundMem")> _
		Shared Function dx_SetNextPlayChannelVolumeSoundMem_x64(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlayChannelVolumeSoundMem(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlayChannelVolumeSoundMem_x86(Channel, VolumePal, SoundHandle)
			Else
				Return dx_SetNextPlayChannelVolumeSoundMem_x64(Channel, VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ChangeNextPlayChannelVolumeSoundMem")> _
		Shared Function dx_ChangeNextPlayChannelVolumeSoundMem_x86(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ChangeNextPlayChannelVolumeSoundMem")> _
		Shared Function dx_ChangeNextPlayChannelVolumeSoundMem_x64(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function ChangeNextPlayChannelVolumeSoundMem(Channel As Integer, VolumePal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ChangeNextPlayChannelVolumeSoundMem_x86(Channel, VolumePal, SoundHandle)
			Else
				Return dx_ChangeNextPlayChannelVolumeSoundMem_x64(Channel, VolumePal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlayFrequencySoundMem")> _
		Shared Function dx_SetNextPlayFrequencySoundMem_x86(FrequencyPal As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlayFrequencySoundMem")> _
		Shared Function dx_SetNextPlayFrequencySoundMem_x64(FrequencyPal As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlayFrequencySoundMem(FrequencyPal As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlayFrequencySoundMem_x86(FrequencyPal, SoundHandle)
			Else
				Return dx_SetNextPlayFrequencySoundMem_x64(FrequencyPal, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCurrentPositionSoundMem")> _
		Shared Function dx_SetCurrentPositionSoundMem_x86(SamplePosition As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCurrentPositionSoundMem")> _
		Shared Function dx_SetCurrentPositionSoundMem_x64(SamplePosition As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetCurrentPositionSoundMem(SamplePosition As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCurrentPositionSoundMem_x86(SamplePosition, SoundHandle)
			Else
				Return dx_SetCurrentPositionSoundMem_x64(SamplePosition, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCurrentPositionSoundMem")> _
		Shared Function dx_GetCurrentPositionSoundMem_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCurrentPositionSoundMem")> _
		Shared Function dx_GetCurrentPositionSoundMem_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetCurrentPositionSoundMem(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCurrentPositionSoundMem_x86(SoundHandle)
			Else
				Return dx_GetCurrentPositionSoundMem_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetSoundCurrentPosition")> _
		Shared Function dx_SetSoundCurrentPosition_x86([Byte] As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetSoundCurrentPosition")> _
		Shared Function dx_SetSoundCurrentPosition_x64([Byte] As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetSoundCurrentPosition([Byte] As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetSoundCurrentPosition_x86([Byte], SoundHandle)
			Else
				Return dx_SetSoundCurrentPosition_x64([Byte], SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoundCurrentPosition")> _
		Shared Function dx_GetSoundCurrentPosition_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoundCurrentPosition")> _
		Shared Function dx_GetSoundCurrentPosition_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetSoundCurrentPosition(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoundCurrentPosition_x86(SoundHandle)
			Else
				Return dx_GetSoundCurrentPosition_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetSoundCurrentTime")> _
		Shared Function dx_SetSoundCurrentTime_x86(Time As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetSoundCurrentTime")> _
		Shared Function dx_SetSoundCurrentTime_x64(Time As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetSoundCurrentTime(Time As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetSoundCurrentTime_x86(Time, SoundHandle)
			Else
				Return dx_SetSoundCurrentTime_x64(Time, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoundCurrentTime")> _
		Shared Function dx_GetSoundCurrentTime_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoundCurrentTime")> _
		Shared Function dx_GetSoundCurrentTime_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetSoundCurrentTime(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoundCurrentTime_x86(SoundHandle)
			Else
				Return dx_GetSoundCurrentTime_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoundTotalSample")> _
		Shared Function dx_GetSoundTotalSample_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoundTotalSample")> _
		Shared Function dx_GetSoundTotalSample_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetSoundTotalSample(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoundTotalSample_x86(SoundHandle)
			Else
				Return dx_GetSoundTotalSample_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoundTotalTime")> _
		Shared Function dx_GetSoundTotalTime_x86(SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoundTotalTime")> _
		Shared Function dx_GetSoundTotalTime_x64(SoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetSoundTotalTime(SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoundTotalTime_x86(SoundHandle)
			Else
				Return dx_GetSoundTotalTime_x64(SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLoopPosSoundMem")> _
		Shared Function dx_SetLoopPosSoundMem_x86(LoopTime As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLoopPosSoundMem")> _
		Shared Function dx_SetLoopPosSoundMem_x64(LoopTime As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetLoopPosSoundMem(LoopTime As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLoopPosSoundMem_x86(LoopTime, SoundHandle)
			Else
				Return dx_SetLoopPosSoundMem_x64(LoopTime, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLoopTimePosSoundMem")> _
		Shared Function dx_SetLoopTimePosSoundMem_x86(LoopTime As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLoopTimePosSoundMem")> _
		Shared Function dx_SetLoopTimePosSoundMem_x64(LoopTime As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetLoopTimePosSoundMem(LoopTime As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLoopTimePosSoundMem_x86(LoopTime, SoundHandle)
			Else
				Return dx_SetLoopTimePosSoundMem_x64(LoopTime, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLoopSamplePosSoundMem")> _
		Shared Function dx_SetLoopSamplePosSoundMem_x86(LoopSamplePosition As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLoopSamplePosSoundMem")> _
		Shared Function dx_SetLoopSamplePosSoundMem_x64(LoopSamplePosition As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetLoopSamplePosSoundMem(LoopSamplePosition As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLoopSamplePosSoundMem_x86(LoopSamplePosition, SoundHandle)
			Else
				Return dx_SetLoopSamplePosSoundMem_x64(LoopSamplePosition, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLoopStartTimePosSoundMem")> _
		Shared Function dx_SetLoopStartTimePosSoundMem_x86(LoopStartTime As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLoopStartTimePosSoundMem")> _
		Shared Function dx_SetLoopStartTimePosSoundMem_x64(LoopStartTime As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetLoopStartTimePosSoundMem(LoopStartTime As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLoopStartTimePosSoundMem_x86(LoopStartTime, SoundHandle)
			Else
				Return dx_SetLoopStartTimePosSoundMem_x64(LoopStartTime, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetLoopStartSamplePosSoundMem")> _
		Shared Function dx_SetLoopStartSamplePosSoundMem_x86(LoopStartSamplePosition As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetLoopStartSamplePosSoundMem")> _
		Shared Function dx_SetLoopStartSamplePosSoundMem_x64(LoopStartSamplePosition As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetLoopStartSamplePosSoundMem(LoopStartSamplePosition As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetLoopStartSamplePosSoundMem_x86(LoopStartSamplePosition, SoundHandle)
			Else
				Return dx_SetLoopStartSamplePosSoundMem_x64(LoopStartSamplePosition, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetPlayFinishDeleteSoundMem")> _
		Shared Function dx_SetPlayFinishDeleteSoundMem_x86(DeleteFlag As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetPlayFinishDeleteSoundMem")> _
		Shared Function dx_SetPlayFinishDeleteSoundMem_x64(DeleteFlag As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetPlayFinishDeleteSoundMem(DeleteFlag As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetPlayFinishDeleteSoundMem_x86(DeleteFlag, SoundHandle)
			Else
				Return dx_SetPlayFinishDeleteSoundMem_x64(DeleteFlag, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DReverbParamSoundMem")> _
		Shared Function dx_Set3DReverbParamSoundMem_x86(ByRef Param As SOUND3D_REVERB_PARAM, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DReverbParamSoundMem")> _
		Shared Function dx_Set3DReverbParamSoundMem_x64(ByRef Param As SOUND3D_REVERB_PARAM, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function Set3DReverbParamSoundMem(ByRef Param As SOUND3D_REVERB_PARAM, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DReverbParamSoundMem_x86(Param, SoundHandle)
			Else
				Return dx_Set3DReverbParamSoundMem_x64(Param, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DPresetReverbParamSoundMem")> _
		Shared Function dx_Set3DPresetReverbParamSoundMem_x86(PresetNo As Integer, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DPresetReverbParamSoundMem")> _
		Shared Function dx_Set3DPresetReverbParamSoundMem_x64(PresetNo As Integer, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function Set3DPresetReverbParamSoundMem(PresetNo As Integer, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DPresetReverbParamSoundMem_x86(PresetNo, SoundHandle)
			Else
				Return dx_Set3DPresetReverbParamSoundMem_x64(PresetNo, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DReverbParamSoundMemAll")> _
		Shared Function dx_Set3DReverbParamSoundMemAll_x86(ByRef Param As SOUND3D_REVERB_PARAM, PlaySoundOnly As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DReverbParamSoundMemAll")> _
		Shared Function dx_Set3DReverbParamSoundMemAll_x64(ByRef Param As SOUND3D_REVERB_PARAM, PlaySoundOnly As Integer) As Integer
		End Function
		Public Shared Function Set3DReverbParamSoundMemAll(ByRef Param As SOUND3D_REVERB_PARAM) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DReverbParamSoundMemAll_x86(Param, [FALSE])
			Else
				Return dx_Set3DReverbParamSoundMemAll_x64(Param, [FALSE])
			End If
		End Function
		Public Shared Function Set3DReverbParamSoundMemAll(ByRef Param As SOUND3D_REVERB_PARAM, PlaySoundOnly As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DReverbParamSoundMemAll_x86(Param, PlaySoundOnly)
			Else
				Return dx_Set3DReverbParamSoundMemAll_x64(Param, PlaySoundOnly)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DPresetReverbParamSoundMemAll")> _
		Shared Function dx_Set3DPresetReverbParamSoundMemAll_x86(PresetNo As Integer, PlaySoundOnly As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DPresetReverbParamSoundMemAll")> _
		Shared Function dx_Set3DPresetReverbParamSoundMemAll_x64(PresetNo As Integer, PlaySoundOnly As Integer) As Integer
		End Function
		Public Shared Function Set3DPresetReverbParamSoundMemAll(PresetNo As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DPresetReverbParamSoundMemAll_x86(PresetNo, [FALSE])
			Else
				Return dx_Set3DPresetReverbParamSoundMemAll_x64(PresetNo, [FALSE])
			End If
		End Function
		Public Shared Function Set3DPresetReverbParamSoundMemAll(PresetNo As Integer, PlaySoundOnly As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DPresetReverbParamSoundMemAll_x86(PresetNo, PlaySoundOnly)
			Else
				Return dx_Set3DPresetReverbParamSoundMemAll_x64(PresetNo, PlaySoundOnly)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Get3DReverbParamSoundMem")> _
		Shared Function dx_Get3DReverbParamSoundMem_x86(ByRef ParamBuffer As SOUND3D_REVERB_PARAM, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Get3DReverbParamSoundMem")> _
		Shared Function dx_Get3DReverbParamSoundMem_x64(ByRef ParamBuffer As SOUND3D_REVERB_PARAM, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function Get3DReverbParamSoundMem(ByRef ParamBuffer As SOUND3D_REVERB_PARAM, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Get3DReverbParamSoundMem_x86(ParamBuffer, SoundHandle)
			Else
				Return dx_Get3DReverbParamSoundMem_x64(ParamBuffer, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Get3DPresetReverbParamSoundMem")> _
		Shared Function dx_Get3DPresetReverbParamSoundMem_x86(ByRef ParamBuffer As SOUND3D_REVERB_PARAM, PresetNo As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Get3DPresetReverbParamSoundMem")> _
		Shared Function dx_Get3DPresetReverbParamSoundMem_x64(ByRef ParamBuffer As SOUND3D_REVERB_PARAM, PresetNo As Integer) As Integer
		End Function
		Public Shared Function Get3DPresetReverbParamSoundMem(ByRef ParamBuffer As SOUND3D_REVERB_PARAM, PresetNo As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Get3DPresetReverbParamSoundMem_x86(ParamBuffer, PresetNo)
			Else
				Return dx_Get3DPresetReverbParamSoundMem_x64(ParamBuffer, PresetNo)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DPositionSoundMem")> _
		Shared Function dx_Set3DPositionSoundMem_x86(Position As VECTOR, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DPositionSoundMem")> _
		Shared Function dx_Set3DPositionSoundMem_x64(Position As VECTOR, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function Set3DPositionSoundMem(Position As VECTOR, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DPositionSoundMem_x86(Position, SoundHandle)
			Else
				Return dx_Set3DPositionSoundMem_x64(Position, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DRadiusSoundMem")> _
		Shared Function dx_Set3DRadiusSoundMem_x86(Radius As Single, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DRadiusSoundMem")> _
		Shared Function dx_Set3DRadiusSoundMem_x64(Radius As Single, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function Set3DRadiusSoundMem(Radius As Single, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DRadiusSoundMem_x86(Radius, SoundHandle)
			Else
				Return dx_Set3DRadiusSoundMem_x64(Radius, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DVelocitySoundMem")> _
		Shared Function dx_Set3DVelocitySoundMem_x86(Velocity As VECTOR, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DVelocitySoundMem")> _
		Shared Function dx_Set3DVelocitySoundMem_x64(Velocity As VECTOR, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function Set3DVelocitySoundMem(Velocity As VECTOR, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DVelocitySoundMem_x86(Velocity, SoundHandle)
			Else
				Return dx_Set3DVelocitySoundMem_x64(Velocity, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlay3DPositionSoundMem")> _
		Shared Function dx_SetNextPlay3DPositionSoundMem_x86(Position As VECTOR, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlay3DPositionSoundMem")> _
		Shared Function dx_SetNextPlay3DPositionSoundMem_x64(Position As VECTOR, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlay3DPositionSoundMem(Position As VECTOR, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlay3DPositionSoundMem_x86(Position, SoundHandle)
			Else
				Return dx_SetNextPlay3DPositionSoundMem_x64(Position, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlay3DRadiusSoundMem")> _
		Shared Function dx_SetNextPlay3DRadiusSoundMem_x86(Radius As Single, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlay3DRadiusSoundMem")> _
		Shared Function dx_SetNextPlay3DRadiusSoundMem_x64(Radius As Single, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlay3DRadiusSoundMem(Radius As Single, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlay3DRadiusSoundMem_x86(Radius, SoundHandle)
			Else
				Return dx_SetNextPlay3DRadiusSoundMem_x64(Radius, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetNextPlay3DVelocitySoundMem")> _
		Shared Function dx_SetNextPlay3DVelocitySoundMem_x86(Velocity As VECTOR, SoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetNextPlay3DVelocitySoundMem")> _
		Shared Function dx_SetNextPlay3DVelocitySoundMem_x64(Velocity As VECTOR, SoundHandle As Integer) As Integer
		End Function
		Public Shared Function SetNextPlay3DVelocitySoundMem(Velocity As VECTOR, SoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetNextPlay3DVelocitySoundMem_x86(Velocity, SoundHandle)
			Else
				Return dx_SetNextPlay3DVelocitySoundMem_x64(Velocity, SoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreateSoundDataType")> _
		Shared Function dx_SetCreateSoundDataType_x86(SoundDataType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreateSoundDataType")> _
		Shared Function dx_SetCreateSoundDataType_x64(SoundDataType As Integer) As Integer
		End Function
		Public Shared Function SetCreateSoundDataType(SoundDataType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreateSoundDataType_x86(SoundDataType)
			Else
				Return dx_SetCreateSoundDataType_x64(SoundDataType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetCreateSoundDataType")> _
		Shared Function dx_GetCreateSoundDataType_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetCreateSoundDataType")> _
		Shared Function dx_GetCreateSoundDataType_x64() As Integer
		End Function
		Public Shared Function GetCreateSoundDataType() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetCreateSoundDataType_x86()
			Else
				Return dx_GetCreateSoundDataType_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDisableReadSoundFunctionMask")> _
		Shared Function dx_SetDisableReadSoundFunctionMask_x86(Mask As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDisableReadSoundFunctionMask")> _
		Shared Function dx_SetDisableReadSoundFunctionMask_x64(Mask As Integer) As Integer
		End Function
		Public Shared Function SetDisableReadSoundFunctionMask(Mask As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDisableReadSoundFunctionMask_x86(Mask)
			Else
				Return dx_SetDisableReadSoundFunctionMask_x64(Mask)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDisableReadSoundFunctionMask")> _
		Shared Function dx_GetDisableReadSoundFunctionMask_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDisableReadSoundFunctionMask")> _
		Shared Function dx_GetDisableReadSoundFunctionMask_x64() As Integer
		End Function
		Public Shared Function GetDisableReadSoundFunctionMask() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetDisableReadSoundFunctionMask_x86()
			Else
				Return dx_GetDisableReadSoundFunctionMask_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetEnableSoundCaptureFlag")> _
		Shared Function dx_SetEnableSoundCaptureFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetEnableSoundCaptureFlag")> _
		Shared Function dx_SetEnableSoundCaptureFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetEnableSoundCaptureFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetEnableSoundCaptureFlag_x86(Flag)
			Else
				Return dx_SetEnableSoundCaptureFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseSoftwareMixingSoundFlag")> _
		Shared Function dx_SetUseSoftwareMixingSoundFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseSoftwareMixingSoundFlag")> _
		Shared Function dx_SetUseSoftwareMixingSoundFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseSoftwareMixingSoundFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseSoftwareMixingSoundFlag_x86(Flag)
			Else
				Return dx_SetUseSoftwareMixingSoundFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetEnableXAudioFlag")> _
		Shared Function dx_SetEnableXAudioFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetEnableXAudioFlag")> _
		Shared Function dx_SetEnableXAudioFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetEnableXAudioFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetEnableXAudioFlag_x86(Flag)
			Else
				Return dx_SetEnableXAudioFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseOldVolumeCalcFlag")> _
		Shared Function dx_SetUseOldVolumeCalcFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseOldVolumeCalcFlag")> _
		Shared Function dx_SetUseOldVolumeCalcFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseOldVolumeCalcFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseOldVolumeCalcFlag_x86(Flag)
			Else
				Return dx_SetUseOldVolumeCalcFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetCreate3DSoundFlag")> _
		Shared Function dx_SetCreate3DSoundFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetCreate3DSoundFlag")> _
		Shared Function dx_SetCreate3DSoundFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetCreate3DSoundFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetCreate3DSoundFlag_x86(Flag)
			Else
				Return dx_SetCreate3DSoundFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DSoundOneMetre")> _
		Shared Function dx_Set3DSoundOneMetre_x86(Distance As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DSoundOneMetre")> _
		Shared Function dx_Set3DSoundOneMetre_x64(Distance As Single) As Integer
		End Function
		Public Shared Function Set3DSoundOneMetre(Distance As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DSoundOneMetre_x86(Distance)
			Else
				Return dx_Set3DSoundOneMetre_x64(Distance)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DSoundListenerPosAndFrontPos_UpVecY")> _
		Shared Function dx_Set3DSoundListenerPosAndFrontPos_UpVecY_x86(Position As VECTOR, FrontPosition As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DSoundListenerPosAndFrontPos_UpVecY")> _
		Shared Function dx_Set3DSoundListenerPosAndFrontPos_UpVecY_x64(Position As VECTOR, FrontPosition As VECTOR) As Integer
		End Function
		Public Shared Function Set3DSoundListenerPosAndFrontPos_UpVecY(Position As VECTOR, FrontPosition As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DSoundListenerPosAndFrontPos_UpVecY_x86(Position, FrontPosition)
			Else
				Return dx_Set3DSoundListenerPosAndFrontPos_UpVecY_x64(Position, FrontPosition)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DSoundListenerPosAndFrontPosAndUpVec")> _
		Shared Function dx_Set3DSoundListenerPosAndFrontPosAndUpVec_x86(Position As VECTOR, FrontPosition As VECTOR, UpVector As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DSoundListenerPosAndFrontPosAndUpVec")> _
		Shared Function dx_Set3DSoundListenerPosAndFrontPosAndUpVec_x64(Position As VECTOR, FrontPosition As VECTOR, UpVector As VECTOR) As Integer
		End Function
		Public Shared Function Set3DSoundListenerPosAndFrontPosAndUpVec(Position As VECTOR, FrontPosition As VECTOR, UpVector As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DSoundListenerPosAndFrontPosAndUpVec_x86(Position, FrontPosition, UpVector)
			Else
				Return dx_Set3DSoundListenerPosAndFrontPosAndUpVec_x64(Position, FrontPosition, UpVector)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DSoundListenerVelocity")> _
		Shared Function dx_Set3DSoundListenerVelocity_x86(Velocity As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DSoundListenerVelocity")> _
		Shared Function dx_Set3DSoundListenerVelocity_x64(Velocity As VECTOR) As Integer
		End Function
		Public Shared Function Set3DSoundListenerVelocity(Velocity As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DSoundListenerVelocity_x86(Velocity)
			Else
				Return dx_Set3DSoundListenerVelocity_x64(Velocity)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DSoundListenerConeAngle")> _
		Shared Function dx_Set3DSoundListenerConeAngle_x86(InnerAngle As Single, OuterAngle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DSoundListenerConeAngle")> _
		Shared Function dx_Set3DSoundListenerConeAngle_x64(InnerAngle As Single, OuterAngle As Single) As Integer
		End Function
		Public Shared Function Set3DSoundListenerConeAngle(InnerAngle As Single, OuterAngle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DSoundListenerConeAngle_x86(InnerAngle, OuterAngle)
			Else
				Return dx_Set3DSoundListenerConeAngle_x64(InnerAngle, OuterAngle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_Set3DSoundListenerConeVolume")> _
		Shared Function dx_Set3DSoundListenerConeVolume_x86(InnerAngleVolume As Single, OuterAngleVolume As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_Set3DSoundListenerConeVolume")> _
		Shared Function dx_Set3DSoundListenerConeVolume_x64(InnerAngleVolume As Single, OuterAngleVolume As Single) As Integer
		End Function
		Public Shared Function Set3DSoundListenerConeVolume(InnerAngleVolume As Single, OuterAngleVolume As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_Set3DSoundListenerConeVolume_x86(InnerAngleVolume, OuterAngleVolume)
			Else
				Return dx_Set3DSoundListenerConeVolume_x64(InnerAngleVolume, OuterAngleVolume)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetDSoundObj")> _
		Shared Sub dx_GetDSoundObj_x86()
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetDSoundObj")> _
		Shared Sub dx_GetDSoundObj_x64()
		End Sub
		Public Shared Sub GetDSoundObj()
			If System.IntPtr.Size = 4 Then
				Return dx_GetDSoundObj_x86()
			Else
				Return dx_GetDSoundObj_x64()
			End If
		End Sub
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlaySoundFile")> _
		Shared Function dx_PlaySoundFile_x86(FileName As String, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlaySoundFile")> _
		Shared Function dx_PlaySoundFile_x64(FileName As String, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlaySoundFile(FileName As String, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlaySoundFile_x86(FileName, PlayType)
			Else
				Return dx_PlaySoundFile_x64(FileName, PlayType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlaySound")> _
		Shared Function dx_PlaySound_x86(FileName As String, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlaySound")> _
		Shared Function dx_PlaySound_x64(FileName As String, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlaySound(FileName As String, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlaySound_x86(FileName, PlayType)
			Else
				Return dx_PlaySound_x64(FileName, PlayType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckSoundFile")> _
		Shared Function dx_CheckSoundFile_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckSoundFile")> _
		Shared Function dx_CheckSoundFile_x64() As Integer
		End Function
		Public Shared Function CheckSoundFile() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckSoundFile_x86()
			Else
				Return dx_CheckSoundFile_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckSound")> _
		Shared Function dx_CheckSound_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckSound")> _
		Shared Function dx_CheckSound_x64() As Integer
		End Function
		Public Shared Function CheckSound() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckSound_x86()
			Else
				Return dx_CheckSound_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopSoundFile")> _
		Shared Function dx_StopSoundFile_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopSoundFile")> _
		Shared Function dx_StopSoundFile_x64() As Integer
		End Function
		Public Shared Function StopSoundFile() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopSoundFile_x86()
			Else
				Return dx_StopSoundFile_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopSound")> _
		Shared Function dx_StopSound_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopSound")> _
		Shared Function dx_StopSound_x64() As Integer
		End Function
		Public Shared Function StopSound() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopSound_x86()
			Else
				Return dx_StopSound_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVolumeSoundFile")> _
		Shared Function dx_SetVolumeSoundFile_x86(VolumePal As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVolumeSoundFile")> _
		Shared Function dx_SetVolumeSoundFile_x64(VolumePal As Integer) As Integer
		End Function
		Public Shared Function SetVolumeSoundFile(VolumePal As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVolumeSoundFile_x86(VolumePal)
			Else
				Return dx_SetVolumeSoundFile_x64(VolumePal)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVolumeSound")> _
		Shared Function dx_SetVolumeSound_x86(VolumePal As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVolumeSound")> _
		Shared Function dx_SetVolumeSound_x64(VolumePal As Integer) As Integer
		End Function
		Public Shared Function SetVolumeSound(VolumePal As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVolumeSound_x86(VolumePal)
			Else
				Return dx_SetVolumeSound_x64(VolumePal)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitSoftSound")> _
		Shared Function dx_InitSoftSound_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitSoftSound")> _
		Shared Function dx_InitSoftSound_x64() As Integer
		End Function
		Public Shared Function InitSoftSound() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitSoftSound_x86()
			Else
				Return dx_InitSoftSound_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoftSound")> _
		Shared Function dx_LoadSoftSound_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoftSound")> _
		Shared Function dx_LoadSoftSound_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadSoftSound(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoftSound_x86(FileName)
			Else
				Return dx_LoadSoftSound_x64(FileName)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadSoftSoundFromMemImage")> _
		Shared Function dx_LoadSoftSoundFromMemImage_x86(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadSoftSoundFromMemImage")> _
		Shared Function dx_LoadSoftSoundFromMemImage_x64(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		Public Shared Function LoadSoftSoundFromMemImage(FileImage As System.Void*, FileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadSoftSoundFromMemImage_x86(FileImage, FileImageSize)
			Else
				Return dx_LoadSoftSoundFromMemImage_x64(FileImage, FileImageSize)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound")> _
		Shared Function dx_MakeSoftSound_x86(UseFormat_SoftSoundHandle As Integer, SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound")> _
		Shared Function dx_MakeSoftSound_x64(UseFormat_SoftSoundHandle As Integer, SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound(UseFormat_SoftSoundHandle As Integer, SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound_x86(UseFormat_SoftSoundHandle, SampleNum)
			Else
				Return dx_MakeSoftSound_x64(UseFormat_SoftSoundHandle, SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound2Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSound2Ch16Bit44KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound2Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSound2Ch16Bit44KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound2Ch16Bit44KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound2Ch16Bit44KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound2Ch16Bit44KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound2Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSound2Ch16Bit22KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound2Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSound2Ch16Bit22KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound2Ch16Bit22KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound2Ch16Bit22KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound2Ch16Bit22KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound2Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSound2Ch8Bit44KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound2Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSound2Ch8Bit44KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound2Ch8Bit44KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound2Ch8Bit44KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound2Ch8Bit44KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound2Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSound2Ch8Bit22KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound2Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSound2Ch8Bit22KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound2Ch8Bit22KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound2Ch8Bit22KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound2Ch8Bit22KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound1Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSound1Ch16Bit44KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound1Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSound1Ch16Bit44KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound1Ch16Bit44KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound1Ch16Bit44KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound1Ch16Bit44KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound1Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSound1Ch16Bit22KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound1Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSound1Ch16Bit22KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound1Ch16Bit22KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound1Ch16Bit22KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound1Ch16Bit22KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound1Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSound1Ch8Bit44KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound1Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSound1Ch8Bit44KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound1Ch8Bit44KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound1Ch8Bit44KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound1Ch8Bit44KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSound1Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSound1Ch8Bit22KHz_x86(SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSound1Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSound1Ch8Bit22KHz_x64(SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSound1Ch8Bit22KHz(SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSound1Ch8Bit22KHz_x86(SampleNum)
			Else
				Return dx_MakeSoftSound1Ch8Bit22KHz_x64(SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundCustom")> _
		Shared Function dx_MakeSoftSoundCustom_x86(ChannelNum As Integer, BitsPerSample As Integer, SamplesPerSec As Integer, SampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundCustom")> _
		Shared Function dx_MakeSoftSoundCustom_x64(ChannelNum As Integer, BitsPerSample As Integer, SamplesPerSec As Integer, SampleNum As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSoundCustom(ChannelNum As Integer, BitsPerSample As Integer, SamplesPerSec As Integer, SampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundCustom_x86(ChannelNum, BitsPerSample, SamplesPerSec, SampleNum)
			Else
				Return dx_MakeSoftSoundCustom_x64(ChannelNum, BitsPerSample, SamplesPerSec, SampleNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteSoftSound")> _
		Shared Function dx_DeleteSoftSound_x86(SoftSoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteSoftSound")> _
		Shared Function dx_DeleteSoftSound_x64(SoftSoundHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteSoftSound(SoftSoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteSoftSound_x86(SoftSoundHandle)
			Else
				Return dx_DeleteSoftSound_x64(SoftSoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SaveSoftSound")> _
		Shared Function dx_SaveSoftSound_x86(SoftSoundHandle As Integer, FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SaveSoftSound")> _
		Shared Function dx_SaveSoftSound_x64(SoftSoundHandle As Integer, FileName As String) As Integer
		End Function
		Public Shared Function SaveSoftSound(SoftSoundHandle As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SaveSoftSound_x86(SoftSoundHandle, FileName)
			Else
				Return dx_SaveSoftSound_x64(SoftSoundHandle, FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoftSoundSampleNum")> _
		Shared Function dx_GetSoftSoundSampleNum_x86(SoftSoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoftSoundSampleNum")> _
		Shared Function dx_GetSoftSoundSampleNum_x64(SoftSoundHandle As Integer) As Integer
		End Function
		Public Shared Function GetSoftSoundSampleNum(SoftSoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoftSoundSampleNum_x86(SoftSoundHandle)
			Else
				Return dx_GetSoftSoundSampleNum_x64(SoftSoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoftSoundFormat")> _
		Shared Function dx_GetSoftSoundFormat_x86(SoftSoundHandle As Integer, ByRef Channels As Integer, ByRef BitsPerSample As Integer, ByRef SamplesPerSec As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoftSoundFormat")> _
		Shared Function dx_GetSoftSoundFormat_x64(SoftSoundHandle As Integer, ByRef Channels As Integer, ByRef BitsPerSample As Integer, ByRef SamplesPerSec As Integer) As Integer
		End Function
		Public Shared Function GetSoftSoundFormat(SoftSoundHandle As Integer, ByRef Channels As Integer, ByRef BitsPerSample As Integer, ByRef SamplesPerSec As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoftSoundFormat_x86(SoftSoundHandle, Channels, BitsPerSample, SamplesPerSec)
			Else
				Return dx_GetSoftSoundFormat_x64(SoftSoundHandle, Channels, BitsPerSample, SamplesPerSec)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ReadSoftSoundData")> _
		Shared Function dx_ReadSoftSoundData_x86(SoftSoundHandle As Integer, SamplePosition As Integer, ByRef Channel1 As Integer, ByRef Channel2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ReadSoftSoundData")> _
		Shared Function dx_ReadSoftSoundData_x64(SoftSoundHandle As Integer, SamplePosition As Integer, ByRef Channel1 As Integer, ByRef Channel2 As Integer) As Integer
		End Function
		Public Shared Function ReadSoftSoundData(SoftSoundHandle As Integer, SamplePosition As Integer, ByRef Channel1 As Integer, ByRef Channel2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ReadSoftSoundData_x86(SoftSoundHandle, SamplePosition, Channel1, Channel2)
			Else
				Return dx_ReadSoftSoundData_x64(SoftSoundHandle, SamplePosition, Channel1, Channel2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_WriteSoftSoundData")> _
		Shared Function dx_WriteSoftSoundData_x86(SoftSoundHandle As Integer, SamplePosition As Integer, Channel1 As Integer, Channel2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_WriteSoftSoundData")> _
		Shared Function dx_WriteSoftSoundData_x64(SoftSoundHandle As Integer, SamplePosition As Integer, Channel1 As Integer, Channel2 As Integer) As Integer
		End Function
		Public Shared Function WriteSoftSoundData(SoftSoundHandle As Integer, SamplePosition As Integer, Channel1 As Integer, Channel2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_WriteSoftSoundData_x86(SoftSoundHandle, SamplePosition, Channel1, Channel2)
			Else
				Return dx_WriteSoftSoundData_x64(SoftSoundHandle, SamplePosition, Channel1, Channel2)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoftSoundDataImage")> _
		Shared Sub dx_GetSoftSoundDataImage_x86(SoftSoundHandle As Integer)
		End Sub
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoftSoundDataImage")> _
		Shared Sub dx_GetSoftSoundDataImage_x64(SoftSoundHandle As Integer)
		End Sub
		Public Shared Sub GetSoftSoundDataImage(SoftSoundHandle As Integer)
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoftSoundDataImage_x86(SoftSoundHandle)
			Else
				Return dx_GetSoftSoundDataImage_x64(SoftSoundHandle)
			End If
		End Sub
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitSoftSoundPlayer")> _
		Shared Function dx_InitSoftSoundPlayer_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitSoftSoundPlayer")> _
		Shared Function dx_InitSoftSoundPlayer_x64() As Integer
		End Function
		Public Shared Function InitSoftSoundPlayer() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitSoftSoundPlayer_x86()
			Else
				Return dx_InitSoftSoundPlayer_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer")> _
		Shared Function dx_MakeSoftSoundPlayer_x86(UseFormat_SoftSoundHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer")> _
		Shared Function dx_MakeSoftSoundPlayer_x64(UseFormat_SoftSoundHandle As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer(UseFormat_SoftSoundHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer_x86(UseFormat_SoftSoundHandle)
			Else
				Return dx_MakeSoftSoundPlayer_x64(UseFormat_SoftSoundHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer2Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch16Bit44KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer2Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch16Bit44KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer2Ch16Bit44KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer2Ch16Bit44KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer2Ch16Bit44KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer2Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch16Bit22KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer2Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch16Bit22KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer2Ch16Bit22KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer2Ch16Bit22KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer2Ch16Bit22KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer2Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch8Bit44KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer2Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch8Bit44KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer2Ch8Bit44KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer2Ch8Bit44KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer2Ch8Bit44KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer2Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch8Bit22KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer2Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer2Ch8Bit22KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer2Ch8Bit22KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer2Ch8Bit22KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer2Ch8Bit22KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer1Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch16Bit44KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer1Ch16Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch16Bit44KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer1Ch16Bit44KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer1Ch16Bit44KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer1Ch16Bit44KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer1Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch16Bit22KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer1Ch16Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch16Bit22KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer1Ch16Bit22KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer1Ch16Bit22KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer1Ch16Bit22KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer1Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch8Bit44KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer1Ch8Bit44KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch8Bit44KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer1Ch8Bit44KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer1Ch8Bit44KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer1Ch8Bit44KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayer1Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch8Bit22KHz_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayer1Ch8Bit22KHz")> _
		Shared Function dx_MakeSoftSoundPlayer1Ch8Bit22KHz_x64() As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayer1Ch8Bit22KHz() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayer1Ch8Bit22KHz_x86()
			Else
				Return dx_MakeSoftSoundPlayer1Ch8Bit22KHz_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MakeSoftSoundPlayerCustom")> _
		Shared Function dx_MakeSoftSoundPlayerCustom_x86(ChannelNum As Integer, BitsPerSample As Integer, SamplesPerSec As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MakeSoftSoundPlayerCustom")> _
		Shared Function dx_MakeSoftSoundPlayerCustom_x64(ChannelNum As Integer, BitsPerSample As Integer, SamplesPerSec As Integer) As Integer
		End Function
		Public Shared Function MakeSoftSoundPlayerCustom(ChannelNum As Integer, BitsPerSample As Integer, SamplesPerSec As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MakeSoftSoundPlayerCustom_x86(ChannelNum, BitsPerSample, SamplesPerSec)
			Else
				Return dx_MakeSoftSoundPlayerCustom_x64(ChannelNum, BitsPerSample, SamplesPerSec)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteSoftSoundPlayer")> _
		Shared Function dx_DeleteSoftSoundPlayer_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteSoftSoundPlayer")> _
		Shared Function dx_DeleteSoftSoundPlayer_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteSoftSoundPlayer(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteSoftSoundPlayer_x86(SSoundPlayerHandle)
			Else
				Return dx_DeleteSoftSoundPlayer_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddDataSoftSoundPlayer")> _
		Shared Function dx_AddDataSoftSoundPlayer_x86(SSoundPlayerHandle As Integer, SoftSoundHandle As Integer, AddSamplePosition As Integer, AddSampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddDataSoftSoundPlayer")> _
		Shared Function dx_AddDataSoftSoundPlayer_x64(SSoundPlayerHandle As Integer, SoftSoundHandle As Integer, AddSamplePosition As Integer, AddSampleNum As Integer) As Integer
		End Function
		Public Shared Function AddDataSoftSoundPlayer(SSoundPlayerHandle As Integer, SoftSoundHandle As Integer, AddSamplePosition As Integer, AddSampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddDataSoftSoundPlayer_x86(SSoundPlayerHandle, SoftSoundHandle, AddSamplePosition, AddSampleNum)
			Else
				Return dx_AddDataSoftSoundPlayer_x64(SSoundPlayerHandle, SoftSoundHandle, AddSamplePosition, AddSampleNum)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_AddDirectDataSoftSoundPlayer")> _
		Shared Function dx_AddDirectDataSoftSoundPlayer_x86(SSoundPlayerHandle As Integer, SoundData As System.Void*, AddSampleNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddDirectDataSoftSoundPlayer")> _
		Shared Function dx_AddDirectDataSoftSoundPlayer_x64(SSoundPlayerHandle As Integer, SoundData As System.Void*, AddSampleNum As Integer) As Integer
		End Function
		Public Shared Function AddDirectDataSoftSoundPlayer(SSoundPlayerHandle As Integer, SoundData As System.Void*, AddSampleNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddDirectDataSoftSoundPlayer_x86(SSoundPlayerHandle, SoundData, AddSampleNum)
			Else
				Return dx_AddDirectDataSoftSoundPlayer_x64(SSoundPlayerHandle, SoundData, AddSampleNum)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_AddOneDataSoftSoundPlayer")> _
		Shared Function dx_AddOneDataSoftSoundPlayer_x86(SSoundPlayerHandle As Integer, Channel1 As Integer, Channel2 As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_AddOneDataSoftSoundPlayer")> _
		Shared Function dx_AddOneDataSoftSoundPlayer_x64(SSoundPlayerHandle As Integer, Channel1 As Integer, Channel2 As Integer) As Integer
		End Function
		Public Shared Function AddOneDataSoftSoundPlayer(SSoundPlayerHandle As Integer, Channel1 As Integer, Channel2 As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_AddOneDataSoftSoundPlayer_x86(SSoundPlayerHandle, Channel1, Channel2)
			Else
				Return dx_AddOneDataSoftSoundPlayer_x64(SSoundPlayerHandle, Channel1, Channel2)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetSoftSoundPlayerFormat")> _
		Shared Function dx_GetSoftSoundPlayerFormat_x86(SSoundPlayerHandle As Integer, ByRef Channels As Integer, ByRef BitsPerSample As Integer, ByRef SamplesPerSec As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetSoftSoundPlayerFormat")> _
		Shared Function dx_GetSoftSoundPlayerFormat_x64(SSoundPlayerHandle As Integer, ByRef Channels As Integer, ByRef BitsPerSample As Integer, ByRef SamplesPerSec As Integer) As Integer
		End Function
		Public Shared Function GetSoftSoundPlayerFormat(SSoundPlayerHandle As Integer, ByRef Channels As Integer, ByRef BitsPerSample As Integer, ByRef SamplesPerSec As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetSoftSoundPlayerFormat_x86(SSoundPlayerHandle, Channels, BitsPerSample, SamplesPerSec)
			Else
				Return dx_GetSoftSoundPlayerFormat_x64(SSoundPlayerHandle, Channels, BitsPerSample, SamplesPerSec)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StartSoftSoundPlayer")> _
		Shared Function dx_StartSoftSoundPlayer_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StartSoftSoundPlayer")> _
		Shared Function dx_StartSoftSoundPlayer_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function StartSoftSoundPlayer(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StartSoftSoundPlayer_x86(SSoundPlayerHandle)
			Else
				Return dx_StartSoftSoundPlayer_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckStartSoftSoundPlayer")> _
		Shared Function dx_CheckStartSoftSoundPlayer_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckStartSoftSoundPlayer")> _
		Shared Function dx_CheckStartSoftSoundPlayer_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function CheckStartSoftSoundPlayer(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckStartSoftSoundPlayer_x86(SSoundPlayerHandle)
			Else
				Return dx_CheckStartSoftSoundPlayer_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopSoftSoundPlayer")> _
		Shared Function dx_StopSoftSoundPlayer_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopSoftSoundPlayer")> _
		Shared Function dx_StopSoftSoundPlayer_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function StopSoftSoundPlayer(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopSoftSoundPlayer_x86(SSoundPlayerHandle)
			Else
				Return dx_StopSoftSoundPlayer_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ResetSoftSoundPlayer")> _
		Shared Function dx_ResetSoftSoundPlayer_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ResetSoftSoundPlayer")> _
		Shared Function dx_ResetSoftSoundPlayer_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function ResetSoftSoundPlayer(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ResetSoftSoundPlayer_x86(SSoundPlayerHandle)
			Else
				Return dx_ResetSoftSoundPlayer_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetStockDataLengthSoftSoundPlayer")> _
		Shared Function dx_GetStockDataLengthSoftSoundPlayer_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetStockDataLengthSoftSoundPlayer")> _
		Shared Function dx_GetStockDataLengthSoftSoundPlayer_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function GetStockDataLengthSoftSoundPlayer(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetStockDataLengthSoftSoundPlayer_x86(SSoundPlayerHandle)
			Else
				Return dx_GetStockDataLengthSoftSoundPlayer_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckSoftSoundPlayerNoneData")> _
		Shared Function dx_CheckSoftSoundPlayerNoneData_x86(SSoundPlayerHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckSoftSoundPlayerNoneData")> _
		Shared Function dx_CheckSoftSoundPlayerNoneData_x64(SSoundPlayerHandle As Integer) As Integer
		End Function
		Public Shared Function CheckSoftSoundPlayerNoneData(SSoundPlayerHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckSoftSoundPlayerNoneData_x86(SSoundPlayerHandle)
			Else
				Return dx_CheckSoftSoundPlayerNoneData_x64(SSoundPlayerHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DeleteMusicMem")> _
		Shared Function dx_DeleteMusicMem_x86(MusicHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DeleteMusicMem")> _
		Shared Function dx_DeleteMusicMem_x64(MusicHandle As Integer) As Integer
		End Function
		Public Shared Function DeleteMusicMem(MusicHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DeleteMusicMem_x86(MusicHandle)
			Else
				Return dx_DeleteMusicMem_x64(MusicHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadMusicMem")> _
		Shared Function dx_LoadMusicMem_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadMusicMem")> _
		Shared Function dx_LoadMusicMem_x64(FileName As String) As Integer
		End Function
		Public Shared Function LoadMusicMem(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadMusicMem_x86(FileName)
			Else
				Return dx_LoadMusicMem_x64(FileName)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadMusicMemByMemImage")> _
		Shared Function dx_LoadMusicMemByMemImage_x86(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadMusicMemByMemImage")> _
		Shared Function dx_LoadMusicMemByMemImage_x64(FileImage As System.Void*, FileImageSize As Integer) As Integer
		End Function
		Public Shared Function LoadMusicMemByMemImage(FileImage As System.Void*, FileImageSize As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadMusicMemByMemImage_x86(FileImage, FileImageSize)
			Else
				Return dx_LoadMusicMemByMemImage_x64(FileImage, FileImageSize)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_LoadMusicMemByResource")> _
		Shared Function dx_LoadMusicMemByResource_x86(ResourceName As String, ResourceType As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_LoadMusicMemByResource")> _
		Shared Function dx_LoadMusicMemByResource_x64(ResourceName As String, ResourceType As String) As Integer
		End Function
		Public Shared Function LoadMusicMemByResource(ResourceName As String, ResourceType As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_LoadMusicMemByResource_x86(ResourceName, ResourceType)
			Else
				Return dx_LoadMusicMemByResource_x64(ResourceName, ResourceType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayMusicMem")> _
		Shared Function dx_PlayMusicMem_x86(MusicHandle As Integer, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayMusicMem")> _
		Shared Function dx_PlayMusicMem_x64(MusicHandle As Integer, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlayMusicMem(MusicHandle As Integer, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMusicMem_x86(MusicHandle, PlayType)
			Else
				Return dx_PlayMusicMem_x64(MusicHandle, PlayType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopMusicMem")> _
		Shared Function dx_StopMusicMem_x86(MusicHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopMusicMem")> _
		Shared Function dx_StopMusicMem_x64(MusicHandle As Integer) As Integer
		End Function
		Public Shared Function StopMusicMem(MusicHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopMusicMem_x86(MusicHandle)
			Else
				Return dx_StopMusicMem_x64(MusicHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckMusicMem")> _
		Shared Function dx_CheckMusicMem_x86(MusicHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckMusicMem")> _
		Shared Function dx_CheckMusicMem_x64(MusicHandle As Integer) As Integer
		End Function
		Public Shared Function CheckMusicMem(MusicHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckMusicMem_x86(MusicHandle)
			Else
				Return dx_CheckMusicMem_x64(MusicHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVolumeMusicMem")> _
		Shared Function dx_SetVolumeMusicMem_x86(Volume As Integer, MusicHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVolumeMusicMem")> _
		Shared Function dx_SetVolumeMusicMem_x64(Volume As Integer, MusicHandle As Integer) As Integer
		End Function
		Public Shared Function SetVolumeMusicMem(Volume As Integer, MusicHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVolumeMusicMem_x86(Volume, MusicHandle)
			Else
				Return dx_SetVolumeMusicMem_x64(Volume, MusicHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMusicMemPosition")> _
		Shared Function dx_GetMusicMemPosition_x86(MusicHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMusicMemPosition")> _
		Shared Function dx_GetMusicMemPosition_x64(MusicHandle As Integer) As Integer
		End Function
		Public Shared Function GetMusicMemPosition(MusicHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMusicMemPosition_x86(MusicHandle)
			Else
				Return dx_GetMusicMemPosition_x64(MusicHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_InitMusicMem")> _
		Shared Function dx_InitMusicMem_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_InitMusicMem")> _
		Shared Function dx_InitMusicMem_x64() As Integer
		End Function
		Public Shared Function InitMusicMem() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_InitMusicMem_x86()
			Else
				Return dx_InitMusicMem_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_ProcessMusicMem")> _
		Shared Function dx_ProcessMusicMem_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_ProcessMusicMem")> _
		Shared Function dx_ProcessMusicMem_x64() As Integer
		End Function
		Public Shared Function ProcessMusicMem() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_ProcessMusicMem_x86()
			Else
				Return dx_ProcessMusicMem_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayMusic")> _
		Shared Function dx_PlayMusic_x86(FileName As String, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayMusic")> _
		Shared Function dx_PlayMusic_x64(FileName As String, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlayMusic(FileName As String, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMusic_x86(FileName, PlayType)
			Else
				Return dx_PlayMusic_x64(FileName, PlayType)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayMusicByMemImage")> _
		Shared Function dx_PlayMusicByMemImage_x86(FileImage As System.Void*, FileImageSize As Integer, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayMusicByMemImage")> _
		Shared Function dx_PlayMusicByMemImage_x64(FileImage As System.Void*, FileImageSize As Integer, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlayMusicByMemImage(FileImage As System.Void*, FileImageSize As Integer, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMusicByMemImage_x86(FileImage, FileImageSize, PlayType)
			Else
				Return dx_PlayMusicByMemImage_x64(FileImage, FileImageSize, PlayType)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_PlayMusicByResource")> _
		Shared Function dx_PlayMusicByResource_x86(ResourceName As String, ResourceType As String, PlayType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_PlayMusicByResource")> _
		Shared Function dx_PlayMusicByResource_x64(ResourceName As String, ResourceType As String, PlayType As Integer) As Integer
		End Function
		Public Shared Function PlayMusicByResource(ResourceName As String, ResourceType As String, PlayType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_PlayMusicByResource_x86(ResourceName, ResourceType, PlayType)
			Else
				Return dx_PlayMusicByResource_x64(ResourceName, ResourceType, PlayType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetVolumeMusic")> _
		Shared Function dx_SetVolumeMusic_x86(Volume As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetVolumeMusic")> _
		Shared Function dx_SetVolumeMusic_x64(Volume As Integer) As Integer
		End Function
		Public Shared Function SetVolumeMusic(Volume As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetVolumeMusic_x86(Volume)
			Else
				Return dx_SetVolumeMusic_x64(Volume)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_StopMusic")> _
		Shared Function dx_StopMusic_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_StopMusic")> _
		Shared Function dx_StopMusic_x64() As Integer
		End Function
		Public Shared Function StopMusic() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_StopMusic_x86()
			Else
				Return dx_StopMusic_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_CheckMusic")> _
		Shared Function dx_CheckMusic_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_CheckMusic")> _
		Shared Function dx_CheckMusic_x64() As Integer
		End Function
		Public Shared Function CheckMusic() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_CheckMusic_x86()
			Else
				Return dx_CheckMusic_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_GetMusicPosition")> _
		Shared Function dx_GetMusicPosition_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_GetMusicPosition")> _
		Shared Function dx_GetMusicPosition_x64() As Integer
		End Function
		Public Shared Function GetMusicPosition() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_GetMusicPosition_x86()
			Else
				Return dx_GetMusicPosition_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SelectMidiMode")> _
		Shared Function dx_SelectMidiMode_x86(Mode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SelectMidiMode")> _
		Shared Function dx_SelectMidiMode_x64(Mode As Integer) As Integer
		End Function
		Public Shared Function SelectMidiMode(Mode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SelectMidiMode_x86(Mode)
			Else
				Return dx_SelectMidiMode_x64(Mode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetUseDXArchiveFlag")> _
		Shared Function dx_SetUseDXArchiveFlag_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetUseDXArchiveFlag")> _
		Shared Function dx_SetUseDXArchiveFlag_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function SetUseDXArchiveFlag(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetUseDXArchiveFlag_x86(Flag)
			Else
				Return dx_SetUseDXArchiveFlag_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDXArchivePriority")> _
		Shared Function dx_SetDXArchivePriority_x86(Priority As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDXArchivePriority")> _
		Shared Function dx_SetDXArchivePriority_x64(Priority As Integer) As Integer
		End Function
		Public Shared Function SetDXArchivePriority() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDXArchivePriority_x86(0)
			Else
				Return dx_SetDXArchivePriority_x64(0)
			End If
		End Function
		Public Shared Function SetDXArchivePriority(Priority As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDXArchivePriority_x86(Priority)
			Else
				Return dx_SetDXArchivePriority_x64(Priority)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDXArchiveExtension")> _
		Shared Function dx_SetDXArchiveExtension_x86(Extension As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDXArchiveExtension")> _
		Shared Function dx_SetDXArchiveExtension_x64(Extension As String) As Integer
		End Function
		Public Shared Function SetDXArchiveExtension() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDXArchiveExtension_x86(Nothing)
			Else
				Return dx_SetDXArchiveExtension_x64(Nothing)
			End If
		End Function
		Public Shared Function SetDXArchiveExtension(Extension As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDXArchiveExtension_x86(Extension)
			Else
				Return dx_SetDXArchiveExtension_x64(Extension)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_SetDXArchiveKeyString")> _
		Shared Function dx_SetDXArchiveKeyString_x86(KeyString As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_SetDXArchiveKeyString")> _
		Shared Function dx_SetDXArchiveKeyString_x64(KeyString As String) As Integer
		End Function
		Public Shared Function SetDXArchiveKeyString() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDXArchiveKeyString_x86(Nothing)
			Else
				Return dx_SetDXArchiveKeyString_x64(Nothing)
			End If
		End Function
		Public Shared Function SetDXArchiveKeyString(KeyString As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_SetDXArchiveKeyString_x86(KeyString)
			Else
				Return dx_SetDXArchiveKeyString_x64(KeyString)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DXArchivePreLoad")> _
		Shared Function dx_DXArchivePreLoad_x86(FilePath As String, ASync As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DXArchivePreLoad")> _
		Shared Function dx_DXArchivePreLoad_x64(FilePath As String, ASync As Integer) As Integer
		End Function
		Public Shared Function DXArchivePreLoad(FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchivePreLoad_x86(FilePath, [FALSE])
			Else
				Return dx_DXArchivePreLoad_x64(FilePath, [FALSE])
			End If
		End Function
		Public Shared Function DXArchivePreLoad(FilePath As String, ASync As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchivePreLoad_x86(FilePath, ASync)
			Else
				Return dx_DXArchivePreLoad_x64(FilePath, ASync)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DXArchiveCheckIdle")> _
		Shared Function dx_DXArchiveCheckIdle_x86(FilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DXArchiveCheckIdle")> _
		Shared Function dx_DXArchiveCheckIdle_x64(FilePath As String) As Integer
		End Function
		Public Shared Function DXArchiveCheckIdle(FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveCheckIdle_x86(FilePath)
			Else
				Return dx_DXArchiveCheckIdle_x64(FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DXArchiveRelease")> _
		Shared Function dx_DXArchiveRelease_x86(FilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DXArchiveRelease")> _
		Shared Function dx_DXArchiveRelease_x64(FilePath As String) As Integer
		End Function
		Public Shared Function DXArchiveRelease(FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveRelease_x86(FilePath)
			Else
				Return dx_DXArchiveRelease_x64(FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_DXArchiveCheckFile")> _
		Shared Function dx_DXArchiveCheckFile_x86(FilePath As String, TargetFilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DXArchiveCheckFile")> _
		Shared Function dx_DXArchiveCheckFile_x64(FilePath As String, TargetFilePath As String) As Integer
		End Function
		Public Shared Function DXArchiveCheckFile(FilePath As String, TargetFilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveCheckFile_x86(FilePath, TargetFilePath)
			Else
				Return dx_DXArchiveCheckFile_x64(FilePath, TargetFilePath)
			End If
		End Function

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DXArchiveSetMemImage")> _
		Shared Function dx_DXArchiveSetMemImage_x86(ArchiveImage As System.Void*, ArchiveImageSize As Integer, EmulateFilePath As String, ArchiveImageCopyFlag As Integer, ArchiveImageReadOnly As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DXArchiveSetMemImage")> _
		Shared Function dx_DXArchiveSetMemImage_x64(ArchiveImage As System.Void*, ArchiveImageSize As Integer, EmulateFilePath As String, ArchiveImageCopyFlag As Integer, ArchiveImageReadOnly As Integer) As Integer
		End Function
		Public Shared Function DXArchiveSetMemImage(ArchiveImage As System.Void*, ArchiveImageSize As Integer, EmulateFilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveSetMemImage_x86(ArchiveImage, ArchiveImageSize, EmulateFilePath, [FALSE], [TRUE])
			Else
				Return dx_DXArchiveSetMemImage_x64(ArchiveImage, ArchiveImageSize, EmulateFilePath, [FALSE], [TRUE])
			End If
		End Function
		Public Shared Function DXArchiveSetMemImage(ArchiveImage As System.Void*, ArchiveImageSize As Integer, EmulateFilePath As String, ArchiveImageCopyFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveSetMemImage_x86(ArchiveImage, ArchiveImageSize, EmulateFilePath, ArchiveImageCopyFlag, [TRUE])
			Else
				Return dx_DXArchiveSetMemImage_x64(ArchiveImage, ArchiveImageSize, EmulateFilePath, ArchiveImageCopyFlag, [TRUE])
			End If
		End Function
		Public Shared Function DXArchiveSetMemImage(ArchiveImage As System.Void*, ArchiveImageSize As Integer, EmulateFilePath As String, ArchiveImageCopyFlag As Integer, ArchiveImageReadOnly As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveSetMemImage_x86(ArchiveImage, ArchiveImageSize, EmulateFilePath, ArchiveImageCopyFlag, ArchiveImageReadOnly)
			Else
				Return dx_DXArchiveSetMemImage_x64(ArchiveImage, ArchiveImageSize, EmulateFilePath, ArchiveImageCopyFlag, ArchiveImageReadOnly)
			End If
		End Function
		#End If

		#if DX_USE_UNSAFE Then
		<DllImport(DX_DLL_32, EntryPoint := "dx_DXArchiveReleaseMemImage")> _
		Shared Function dx_DXArchiveReleaseMemImage_x86(ArchiveImage As System.Void*) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_DXArchiveReleaseMemImage")> _
		Shared Function dx_DXArchiveReleaseMemImage_x64(ArchiveImage As System.Void*) As Integer
		End Function
		Public Shared Function DXArchiveReleaseMemImage(ArchiveImage As System.Void*) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_DXArchiveReleaseMemImage_x86(ArchiveImage)
			Else
				Return dx_DXArchiveReleaseMemImage_x64(ArchiveImage)
			End If
		End Function
		#End If

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1LoadModel")> _
		Shared Function dx_MV1LoadModel_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1LoadModel")> _
		Shared Function dx_MV1LoadModel_x64(FileName As String) As Integer
		End Function
		Public Shared Function MV1LoadModel(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1LoadModel_x86(FileName)
			Else
				Return dx_MV1LoadModel_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DuplicateModel")> _
		Shared Function dx_MV1DuplicateModel_x86(SrcMHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DuplicateModel")> _
		Shared Function dx_MV1DuplicateModel_x64(SrcMHandle As Integer) As Integer
		End Function
		Public Shared Function MV1DuplicateModel(SrcMHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DuplicateModel_x86(SrcMHandle)
			Else
				Return dx_MV1DuplicateModel_x64(SrcMHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CreateCloneModel")> _
		Shared Function dx_MV1CreateCloneModel_x86(SrcMHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CreateCloneModel")> _
		Shared Function dx_MV1CreateCloneModel_x64(SrcMHandle As Integer) As Integer
		End Function
		Public Shared Function MV1CreateCloneModel(SrcMHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CreateCloneModel_x86(SrcMHandle)
			Else
				Return dx_MV1CreateCloneModel_x64(SrcMHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DeleteModel")> _
		Shared Function dx_MV1DeleteModel_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DeleteModel")> _
		Shared Function dx_MV1DeleteModel_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1DeleteModel(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DeleteModel_x86(MHandle)
			Else
				Return dx_MV1DeleteModel_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1InitModel")> _
		Shared Function dx_MV1InitModel_x86() As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1InitModel")> _
		Shared Function dx_MV1InitModel_x64() As Integer
		End Function
		Public Shared Function MV1InitModel() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1InitModel_x86()
			Else
				Return dx_MV1InitModel_x64()
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelReMakeNormal")> _
		Shared Function dx_MV1SetLoadModelReMakeNormal_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelReMakeNormal")> _
		Shared Function dx_MV1SetLoadModelReMakeNormal_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetLoadModelReMakeNormal(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelReMakeNormal_x86(Flag)
			Else
				Return dx_MV1SetLoadModelReMakeNormal_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelReMakeNormalSmoothingAngle")> _
		Shared Function dx_MV1SetLoadModelReMakeNormalSmoothingAngle_x86(SmoothingAngle As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelReMakeNormalSmoothingAngle")> _
		Shared Function dx_MV1SetLoadModelReMakeNormalSmoothingAngle_x64(SmoothingAngle As Single) As Integer
		End Function
		Public Shared Function MV1SetLoadModelReMakeNormalSmoothingAngle() As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelReMakeNormalSmoothingAngle_x86(1.562069F)
			Else
				Return dx_MV1SetLoadModelReMakeNormalSmoothingAngle_x64(1.562069F)
			End If
		End Function
		Public Shared Function MV1SetLoadModelReMakeNormalSmoothingAngle(SmoothingAngle As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelReMakeNormalSmoothingAngle_x86(SmoothingAngle)
			Else
				Return dx_MV1SetLoadModelReMakeNormalSmoothingAngle_x64(SmoothingAngle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelIgnoreScaling")> _
		Shared Function dx_MV1SetLoadModelIgnoreScaling_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelIgnoreScaling")> _
		Shared Function dx_MV1SetLoadModelIgnoreScaling_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetLoadModelIgnoreScaling(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelIgnoreScaling_x86(Flag)
			Else
				Return dx_MV1SetLoadModelIgnoreScaling_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelPositionOptimize")> _
		Shared Function dx_MV1SetLoadModelPositionOptimize_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelPositionOptimize")> _
		Shared Function dx_MV1SetLoadModelPositionOptimize_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetLoadModelPositionOptimize(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelPositionOptimize_x86(Flag)
			Else
				Return dx_MV1SetLoadModelPositionOptimize_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelUsePhysicsMode")> _
		Shared Function dx_MV1SetLoadModelUsePhysicsMode_x86(PhysicsMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelUsePhysicsMode")> _
		Shared Function dx_MV1SetLoadModelUsePhysicsMode_x64(PhysicsMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetLoadModelUsePhysicsMode(PhysicsMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelUsePhysicsMode_x86(PhysicsMode)
			Else
				Return dx_MV1SetLoadModelUsePhysicsMode_x64(PhysicsMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelPhysicsWorldGravity")> _
		Shared Function dx_MV1SetLoadModelPhysicsWorldGravity_x86(Gravity As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelPhysicsWorldGravity")> _
		Shared Function dx_MV1SetLoadModelPhysicsWorldGravity_x64(Gravity As Single) As Integer
		End Function
		Public Shared Function MV1SetLoadModelPhysicsWorldGravity(Gravity As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelPhysicsWorldGravity_x86(Gravity)
			Else
				Return dx_MV1SetLoadModelPhysicsWorldGravity_x64(Gravity)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadCalcPhysicsWorldGravity")> _
		Shared Function dx_MV1SetLoadCalcPhysicsWorldGravity_x86(GravityNo As Integer, Gravity As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadCalcPhysicsWorldGravity")> _
		Shared Function dx_MV1SetLoadCalcPhysicsWorldGravity_x64(GravityNo As Integer, Gravity As VECTOR) As Integer
		End Function
		Public Shared Function MV1SetLoadCalcPhysicsWorldGravity(GravityNo As Integer, Gravity As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadCalcPhysicsWorldGravity_x86(GravityNo, Gravity)
			Else
				Return dx_MV1SetLoadCalcPhysicsWorldGravity_x64(GravityNo, Gravity)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelAnimFilePath")> _
		Shared Function dx_MV1SetLoadModelAnimFilePath_x86(FileName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelAnimFilePath")> _
		Shared Function dx_MV1SetLoadModelAnimFilePath_x64(FileName As String) As Integer
		End Function
		Public Shared Function MV1SetLoadModelAnimFilePath(FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelAnimFilePath_x86(FileName)
			Else
				Return dx_MV1SetLoadModelAnimFilePath_x64(FileName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetLoadModelUsePackDraw")> _
		Shared Function dx_MV1SetLoadModelUsePackDraw_x86(Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetLoadModelUsePackDraw")> _
		Shared Function dx_MV1SetLoadModelUsePackDraw_x64(Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetLoadModelUsePackDraw(Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetLoadModelUsePackDraw_x86(Flag)
			Else
				Return dx_MV1SetLoadModelUsePackDraw_x64(Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SaveModelToMV1File")> _
		Shared Function dx_MV1SaveModelToMV1File_x86(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer, Normal8BitFlag As Integer, _
			Position16BitFlag As Integer, Weight8BitFlag As Integer, Anim16BitFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SaveModelToMV1File")> _
		Shared Function dx_MV1SaveModelToMV1File_x64(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer, Normal8BitFlag As Integer, _
			Position16BitFlag As Integer, Weight8BitFlag As Integer, Anim16BitFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, MV1_SAVETYPE_NORMAL, -1, [TRUE], 1, _
					1, 0, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, MV1_SAVETYPE_NORMAL, -1, [TRUE], 1, _
					1, 0, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, -1, [TRUE], 1, _
					1, 0, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, -1, [TRUE], 1, _
					1, 0, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, AnimMHandle, [TRUE], 1, _
					1, 0, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, AnimMHandle, [TRUE], 1, _
					1, 0, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, 1, _
					1, 0, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, 1, _
					1, 0, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer, Normal8BitFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					1, 0, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					1, 0, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer, Normal8BitFlag As Integer, _
			Position16BitFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					Position16BitFlag, 0, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					Position16BitFlag, 0, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer, Normal8BitFlag As Integer, _
			Position16BitFlag As Integer, Weight8BitFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					Position16BitFlag, Weight8BitFlag, 1)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					Position16BitFlag, Weight8BitFlag, 1)
			End If
		End Function
		Public Shared Function MV1SaveModelToMV1File(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer, Normal8BitFlag As Integer, _
			Position16BitFlag As Integer, Weight8BitFlag As Integer, Anim16BitFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToMV1File_x86(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					Position16BitFlag, Weight8BitFlag, Anim16BitFlag)
			Else
				Return dx_MV1SaveModelToMV1File_x64(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck, Normal8BitFlag, _
					Position16BitFlag, Weight8BitFlag, Anim16BitFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SaveModelToXFile")> _
		Shared Function dx_MV1SaveModelToXFile_x86(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SaveModelToXFile")> _
		Shared Function dx_MV1SaveModelToXFile_x64(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer) As Integer
		End Function
		Public Shared Function MV1SaveModelToXFile(MHandle As Integer, FileName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToXFile_x86(MHandle, FileName, MV1_SAVETYPE_NORMAL, -1, [TRUE])
			Else
				Return dx_MV1SaveModelToXFile_x64(MHandle, FileName, MV1_SAVETYPE_NORMAL, -1, [TRUE])
			End If
		End Function
		Public Shared Function MV1SaveModelToXFile(MHandle As Integer, FileName As String, SaveType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToXFile_x86(MHandle, FileName, SaveType, -1, [TRUE])
			Else
				Return dx_MV1SaveModelToXFile_x64(MHandle, FileName, SaveType, -1, [TRUE])
			End If
		End Function
		Public Shared Function MV1SaveModelToXFile(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToXFile_x86(MHandle, FileName, SaveType, AnimMHandle, [TRUE])
			Else
				Return dx_MV1SaveModelToXFile_x64(MHandle, FileName, SaveType, AnimMHandle, [TRUE])
			End If
		End Function
		Public Shared Function MV1SaveModelToXFile(MHandle As Integer, FileName As String, SaveType As Integer, AnimMHandle As Integer, AnimNameCheck As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SaveModelToXFile_x86(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck)
			Else
				Return dx_MV1SaveModelToXFile_x64(MHandle, FileName, SaveType, AnimMHandle, AnimNameCheck)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DrawModel")> _
		Shared Function dx_MV1DrawModel_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DrawModel")> _
		Shared Function dx_MV1DrawModel_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1DrawModel(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DrawModel_x86(MHandle)
			Else
				Return dx_MV1DrawModel_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DrawFrame")> _
		Shared Function dx_MV1DrawFrame_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DrawFrame")> _
		Shared Function dx_MV1DrawFrame_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1DrawFrame(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DrawFrame_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1DrawFrame_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DrawMesh")> _
		Shared Function dx_MV1DrawMesh_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DrawMesh")> _
		Shared Function dx_MV1DrawMesh_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1DrawMesh(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DrawMesh_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1DrawMesh_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DrawTriangleList")> _
		Shared Function dx_MV1DrawTriangleList_x86(MHandle As Integer, TriangleListIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DrawTriangleList")> _
		Shared Function dx_MV1DrawTriangleList_x64(MHandle As Integer, TriangleListIndex As Integer) As Integer
		End Function
		Public Shared Function MV1DrawTriangleList(MHandle As Integer, TriangleListIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DrawTriangleList_x86(MHandle, TriangleListIndex)
			Else
				Return dx_MV1DrawTriangleList_x64(MHandle, TriangleListIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DrawModelDebug")> _
		Shared Function dx_MV1DrawModelDebug_x86(MHandle As Integer, Color As Integer, IsNormalLine As Integer, NormalLineLength As Single, IsPolyLine As Integer, IsCollisionBox As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DrawModelDebug")> _
		Shared Function dx_MV1DrawModelDebug_x64(MHandle As Integer, Color As Integer, IsNormalLine As Integer, NormalLineLength As Single, IsPolyLine As Integer, IsCollisionBox As Integer) As Integer
		End Function
		Public Shared Function MV1DrawModelDebug(MHandle As Integer, Color As Integer, IsNormalLine As Integer, NormalLineLength As Single, IsPolyLine As Integer, IsCollisionBox As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DrawModelDebug_x86(MHandle, Color, IsNormalLine, NormalLineLength, IsPolyLine, IsCollisionBox)
			Else
				Return dx_MV1DrawModelDebug_x64(MHandle, Color, IsNormalLine, NormalLineLength, IsPolyLine, IsCollisionBox)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetUseOrigShader")> _
		Shared Function dx_MV1SetUseOrigShader_x86(UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetUseOrigShader")> _
		Shared Function dx_MV1SetUseOrigShader_x64(UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetUseOrigShader(UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetUseOrigShader_x86(UseFlag)
			Else
				Return dx_MV1SetUseOrigShader_x64(UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetSemiTransDrawMode")> _
		Shared Function dx_MV1SetSemiTransDrawMode_x86(DrawMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetSemiTransDrawMode")> _
		Shared Function dx_MV1SetSemiTransDrawMode_x64(DrawMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetSemiTransDrawMode(DrawMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetSemiTransDrawMode_x86(DrawMode)
			Else
				Return dx_MV1SetSemiTransDrawMode_x64(DrawMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetLocalWorldMatrix")> _
		Shared Function dx_MV1GetLocalWorldMatrix_x86(MHandle As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetLocalWorldMatrix")> _
		Shared Function dx_MV1GetLocalWorldMatrix_x64(MHandle As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetLocalWorldMatrix(MHandle As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetLocalWorldMatrix_x86(MHandle)
			Else
				Return dx_MV1GetLocalWorldMatrix_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetLocalWorldMatrixD")> _
		Shared Function dx_MV1GetLocalWorldMatrixD_x86(MHandle As Integer) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetLocalWorldMatrixD")> _
		Shared Function dx_MV1GetLocalWorldMatrixD_x64(MHandle As Integer) As MATRIX_D
		End Function
		Public Shared Function MV1GetLocalWorldMatrixD(MHandle As Integer) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetLocalWorldMatrixD_x86(MHandle)
			Else
				Return dx_MV1GetLocalWorldMatrixD_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetPosition")> _
		Shared Function dx_MV1SetPosition_x86(MHandle As Integer, Position As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetPosition")> _
		Shared Function dx_MV1SetPosition_x64(MHandle As Integer, Position As VECTOR) As Integer
		End Function
		Public Shared Function MV1SetPosition(MHandle As Integer, Position As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetPosition_x86(MHandle, Position)
			Else
				Return dx_MV1SetPosition_x64(MHandle, Position)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetPositionD")> _
		Shared Function dx_MV1SetPositionD_x86(MHandle As Integer, Position As VECTOR_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetPositionD")> _
		Shared Function dx_MV1SetPositionD_x64(MHandle As Integer, Position As VECTOR_D) As Integer
		End Function
		Public Shared Function MV1SetPositionD(MHandle As Integer, Position As VECTOR_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetPositionD_x86(MHandle, Position)
			Else
				Return dx_MV1SetPositionD_x64(MHandle, Position)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetPosition")> _
		Shared Function dx_MV1GetPosition_x86(MHandle As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetPosition")> _
		Shared Function dx_MV1GetPosition_x64(MHandle As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetPosition(MHandle As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetPosition_x86(MHandle)
			Else
				Return dx_MV1GetPosition_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetPositionD")> _
		Shared Function dx_MV1GetPositionD_x86(MHandle As Integer) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetPositionD")> _
		Shared Function dx_MV1GetPositionD_x64(MHandle As Integer) As VECTOR_D
		End Function
		Public Shared Function MV1GetPositionD(MHandle As Integer) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetPositionD_x86(MHandle)
			Else
				Return dx_MV1GetPositionD_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetScale")> _
		Shared Function dx_MV1SetScale_x86(MHandle As Integer, Scale As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetScale")> _
		Shared Function dx_MV1SetScale_x64(MHandle As Integer, Scale As VECTOR) As Integer
		End Function
		Public Shared Function MV1SetScale(MHandle As Integer, Scale As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetScale_x86(MHandle, Scale)
			Else
				Return dx_MV1SetScale_x64(MHandle, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetScale")> _
		Shared Function dx_MV1GetScale_x86(MHandle As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetScale")> _
		Shared Function dx_MV1GetScale_x64(MHandle As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetScale(MHandle As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetScale_x86(MHandle)
			Else
				Return dx_MV1GetScale_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetRotationXYZ")> _
		Shared Function dx_MV1SetRotationXYZ_x86(MHandle As Integer, Rotate As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetRotationXYZ")> _
		Shared Function dx_MV1SetRotationXYZ_x64(MHandle As Integer, Rotate As VECTOR) As Integer
		End Function
		Public Shared Function MV1SetRotationXYZ(MHandle As Integer, Rotate As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetRotationXYZ_x86(MHandle, Rotate)
			Else
				Return dx_MV1SetRotationXYZ_x64(MHandle, Rotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetRotationXYZ")> _
		Shared Function dx_MV1GetRotationXYZ_x86(MHandle As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetRotationXYZ")> _
		Shared Function dx_MV1GetRotationXYZ_x64(MHandle As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetRotationXYZ(MHandle As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetRotationXYZ_x86(MHandle)
			Else
				Return dx_MV1GetRotationXYZ_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetRotationZYAxis")> _
		Shared Function dx_MV1SetRotationZYAxis_x86(MHandle As Integer, ZAxisDirection As VECTOR, YAxisDirection As VECTOR, ZAxisTwistRotate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetRotationZYAxis")> _
		Shared Function dx_MV1SetRotationZYAxis_x64(MHandle As Integer, ZAxisDirection As VECTOR, YAxisDirection As VECTOR, ZAxisTwistRotate As Single) As Integer
		End Function
		Public Shared Function MV1SetRotationZYAxis(MHandle As Integer, ZAxisDirection As VECTOR, YAxisDirection As VECTOR, ZAxisTwistRotate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetRotationZYAxis_x86(MHandle, ZAxisDirection, YAxisDirection, ZAxisTwistRotate)
			Else
				Return dx_MV1SetRotationZYAxis_x64(MHandle, ZAxisDirection, YAxisDirection, ZAxisTwistRotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetRotationMatrix")> _
		Shared Function dx_MV1SetRotationMatrix_x86(MHandle As Integer, Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetRotationMatrix")> _
		Shared Function dx_MV1SetRotationMatrix_x64(MHandle As Integer, Matrix As MATRIX) As Integer
		End Function
		Public Shared Function MV1SetRotationMatrix(MHandle As Integer, Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetRotationMatrix_x86(MHandle, Matrix)
			Else
				Return dx_MV1SetRotationMatrix_x64(MHandle, Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetRotationMatrix")> _
		Shared Function dx_MV1GetRotationMatrix_x86(MHandle As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetRotationMatrix")> _
		Shared Function dx_MV1GetRotationMatrix_x64(MHandle As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetRotationMatrix(MHandle As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetRotationMatrix_x86(MHandle)
			Else
				Return dx_MV1GetRotationMatrix_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMatrix")> _
		Shared Function dx_MV1SetMatrix_x86(MHandle As Integer, Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMatrix")> _
		Shared Function dx_MV1SetMatrix_x64(MHandle As Integer, Matrix As MATRIX) As Integer
		End Function
		Public Shared Function MV1SetMatrix(MHandle As Integer, Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMatrix_x86(MHandle, Matrix)
			Else
				Return dx_MV1SetMatrix_x64(MHandle, Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMatrixD")> _
		Shared Function dx_MV1SetMatrixD_x86(MHandle As Integer, Matrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMatrixD")> _
		Shared Function dx_MV1SetMatrixD_x64(MHandle As Integer, Matrix As MATRIX_D) As Integer
		End Function
		Public Shared Function MV1SetMatrixD(MHandle As Integer, Matrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMatrixD_x86(MHandle, Matrix)
			Else
				Return dx_MV1SetMatrixD_x64(MHandle, Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMatrix")> _
		Shared Function dx_MV1GetMatrix_x86(MHandle As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMatrix")> _
		Shared Function dx_MV1GetMatrix_x64(MHandle As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetMatrix(MHandle As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMatrix_x86(MHandle)
			Else
				Return dx_MV1GetMatrix_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMatrixD")> _
		Shared Function dx_MV1GetMatrixD_x86(MHandle As Integer) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMatrixD")> _
		Shared Function dx_MV1GetMatrixD_x64(MHandle As Integer) As MATRIX_D
		End Function
		Public Shared Function MV1GetMatrixD(MHandle As Integer) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMatrixD_x86(MHandle)
			Else
				Return dx_MV1GetMatrixD_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetVisible")> _
		Shared Function dx_MV1SetVisible_x86(MHandle As Integer, VisibleFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetVisible")> _
		Shared Function dx_MV1SetVisible_x64(MHandle As Integer, VisibleFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetVisible(MHandle As Integer, VisibleFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetVisible_x86(MHandle, VisibleFlag)
			Else
				Return dx_MV1SetVisible_x64(MHandle, VisibleFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetVisible")> _
		Shared Function dx_MV1GetVisible_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetVisible")> _
		Shared Function dx_MV1GetVisible_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetVisible(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetVisible_x86(MHandle)
			Else
				Return dx_MV1GetVisible_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshCategoryVisible")> _
		Shared Function dx_MV1SetMeshCategoryVisible_x86(MHandle As Integer, MeshCategory As Integer, VisibleFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshCategoryVisible")> _
		Shared Function dx_MV1SetMeshCategoryVisible_x64(MHandle As Integer, MeshCategory As Integer, VisibleFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshCategoryVisible(MHandle As Integer, MeshCategory As Integer, VisibleFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshCategoryVisible_x86(MHandle, MeshCategory, VisibleFlag)
			Else
				Return dx_MV1SetMeshCategoryVisible_x64(MHandle, MeshCategory, VisibleFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshCategoryVisible")> _
		Shared Function dx_MV1GetMeshCategoryVisible_x86(MHandle As Integer, MeshCategory As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshCategoryVisible")> _
		Shared Function dx_MV1GetMeshCategoryVisible_x64(MHandle As Integer, MeshCategory As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshCategoryVisible(MHandle As Integer, MeshCategory As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshCategoryVisible_x86(MHandle, MeshCategory)
			Else
				Return dx_MV1GetMeshCategoryVisible_x64(MHandle, MeshCategory)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetDifColorScale")> _
		Shared Function dx_MV1SetDifColorScale_x86(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetDifColorScale")> _
		Shared Function dx_MV1SetDifColorScale_x64(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetDifColorScale(MHandle As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetDifColorScale_x86(MHandle, Scale)
			Else
				Return dx_MV1SetDifColorScale_x64(MHandle, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetDifColorScale")> _
		Shared Function dx_MV1GetDifColorScale_x86(MHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetDifColorScale")> _
		Shared Function dx_MV1GetDifColorScale_x64(MHandle As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetDifColorScale(MHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetDifColorScale_x86(MHandle)
			Else
				Return dx_MV1GetDifColorScale_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetSpcColorScale")> _
		Shared Function dx_MV1SetSpcColorScale_x86(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetSpcColorScale")> _
		Shared Function dx_MV1SetSpcColorScale_x64(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetSpcColorScale(MHandle As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetSpcColorScale_x86(MHandle, Scale)
			Else
				Return dx_MV1SetSpcColorScale_x64(MHandle, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetSpcColorScale")> _
		Shared Function dx_MV1GetSpcColorScale_x86(MHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetSpcColorScale")> _
		Shared Function dx_MV1GetSpcColorScale_x64(MHandle As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetSpcColorScale(MHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetSpcColorScale_x86(MHandle)
			Else
				Return dx_MV1GetSpcColorScale_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetEmiColorScale")> _
		Shared Function dx_MV1SetEmiColorScale_x86(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetEmiColorScale")> _
		Shared Function dx_MV1SetEmiColorScale_x64(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetEmiColorScale(MHandle As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetEmiColorScale_x86(MHandle, Scale)
			Else
				Return dx_MV1SetEmiColorScale_x64(MHandle, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetEmiColorScale")> _
		Shared Function dx_MV1GetEmiColorScale_x86(MHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetEmiColorScale")> _
		Shared Function dx_MV1GetEmiColorScale_x64(MHandle As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetEmiColorScale(MHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetEmiColorScale_x86(MHandle)
			Else
				Return dx_MV1GetEmiColorScale_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetAmbColorScale")> _
		Shared Function dx_MV1SetAmbColorScale_x86(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetAmbColorScale")> _
		Shared Function dx_MV1SetAmbColorScale_x64(MHandle As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetAmbColorScale(MHandle As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAmbColorScale_x86(MHandle, Scale)
			Else
				Return dx_MV1SetAmbColorScale_x64(MHandle, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAmbColorScale")> _
		Shared Function dx_MV1GetAmbColorScale_x86(MHandle As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAmbColorScale")> _
		Shared Function dx_MV1GetAmbColorScale_x64(MHandle As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetAmbColorScale(MHandle As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAmbColorScale_x86(MHandle)
			Else
				Return dx_MV1GetAmbColorScale_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetSemiTransState")> _
		Shared Function dx_MV1GetSemiTransState_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetSemiTransState")> _
		Shared Function dx_MV1GetSemiTransState_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetSemiTransState(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetSemiTransState_x86(MHandle)
			Else
				Return dx_MV1GetSemiTransState_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetOpacityRate")> _
		Shared Function dx_MV1SetOpacityRate_x86(MHandle As Integer, Rate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetOpacityRate")> _
		Shared Function dx_MV1SetOpacityRate_x64(MHandle As Integer, Rate As Single) As Integer
		End Function
		Public Shared Function MV1SetOpacityRate(MHandle As Integer, Rate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetOpacityRate_x86(MHandle, Rate)
			Else
				Return dx_MV1SetOpacityRate_x64(MHandle, Rate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetOpacityRate")> _
		Shared Function dx_MV1GetOpacityRate_x86(MHandle As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetOpacityRate")> _
		Shared Function dx_MV1GetOpacityRate_x64(MHandle As Integer) As Single
		End Function
		Public Shared Function MV1GetOpacityRate(MHandle As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetOpacityRate_x86(MHandle)
			Else
				Return dx_MV1GetOpacityRate_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetUseDrawMulAlphaColor")> _
		Shared Function dx_MV1SetUseDrawMulAlphaColor_x86(MHandle As Integer, Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetUseDrawMulAlphaColor")> _
		Shared Function dx_MV1SetUseDrawMulAlphaColor_x64(MHandle As Integer, Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetUseDrawMulAlphaColor(MHandle As Integer, Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetUseDrawMulAlphaColor_x86(MHandle, Flag)
			Else
				Return dx_MV1SetUseDrawMulAlphaColor_x64(MHandle, Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetUseDrawMulAlphaColor")> _
		Shared Function dx_MV1GetUseDrawMulAlphaColor_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetUseDrawMulAlphaColor")> _
		Shared Function dx_MV1GetUseDrawMulAlphaColor_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetUseDrawMulAlphaColor(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetUseDrawMulAlphaColor_x86(MHandle)
			Else
				Return dx_MV1GetUseDrawMulAlphaColor_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetUseZBuffer")> _
		Shared Function dx_MV1SetUseZBuffer_x86(MHandle As Integer, Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetUseZBuffer")> _
		Shared Function dx_MV1SetUseZBuffer_x64(MHandle As Integer, Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetUseZBuffer(MHandle As Integer, Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetUseZBuffer_x86(MHandle, Flag)
			Else
				Return dx_MV1SetUseZBuffer_x64(MHandle, Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetWriteZBuffer")> _
		Shared Function dx_MV1SetWriteZBuffer_x86(MHandle As Integer, Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetWriteZBuffer")> _
		Shared Function dx_MV1SetWriteZBuffer_x64(MHandle As Integer, Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetWriteZBuffer(MHandle As Integer, Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetWriteZBuffer_x86(MHandle, Flag)
			Else
				Return dx_MV1SetWriteZBuffer_x64(MHandle, Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetZBufferCmpType")> _
		Shared Function dx_MV1SetZBufferCmpType_x86(MHandle As Integer, CmpType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetZBufferCmpType")> _
		Shared Function dx_MV1SetZBufferCmpType_x64(MHandle As Integer, CmpType As Integer) As Integer
		End Function
		Public Shared Function MV1SetZBufferCmpType(MHandle As Integer, CmpType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetZBufferCmpType_x86(MHandle, CmpType)
			Else
				Return dx_MV1SetZBufferCmpType_x64(MHandle, CmpType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetZBias")> _
		Shared Function dx_MV1SetZBias_x86(MHandle As Integer, Bias As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetZBias")> _
		Shared Function dx_MV1SetZBias_x64(MHandle As Integer, Bias As Integer) As Integer
		End Function
		Public Shared Function MV1SetZBias(MHandle As Integer, Bias As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetZBias_x86(MHandle, Bias)
			Else
				Return dx_MV1SetZBias_x64(MHandle, Bias)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetUseVertDifColor")> _
		Shared Function dx_MV1SetUseVertDifColor_x86(MHandle As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetUseVertDifColor")> _
		Shared Function dx_MV1SetUseVertDifColor_x64(MHandle As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetUseVertDifColor(MHandle As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetUseVertDifColor_x86(MHandle, UseFlag)
			Else
				Return dx_MV1SetUseVertDifColor_x64(MHandle, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetUseVertSpcColor")> _
		Shared Function dx_MV1SetUseVertSpcColor_x86(MHandle As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetUseVertSpcColor")> _
		Shared Function dx_MV1SetUseVertSpcColor_x64(MHandle As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetUseVertSpcColor(MHandle As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetUseVertSpcColor_x86(MHandle, UseFlag)
			Else
				Return dx_MV1SetUseVertSpcColor_x64(MHandle, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetSampleFilterMode")> _
		Shared Function dx_MV1SetSampleFilterMode_x86(MHandle As Integer, FilterMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetSampleFilterMode")> _
		Shared Function dx_MV1SetSampleFilterMode_x64(MHandle As Integer, FilterMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetSampleFilterMode(MHandle As Integer, FilterMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetSampleFilterMode_x86(MHandle, FilterMode)
			Else
				Return dx_MV1SetSampleFilterMode_x64(MHandle, FilterMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaxAnisotropy")> _
		Shared Function dx_MV1SetMaxAnisotropy_x86(MHandle As Integer, MaxAnisotropy As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaxAnisotropy")> _
		Shared Function dx_MV1SetMaxAnisotropy_x64(MHandle As Integer, MaxAnisotropy As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaxAnisotropy(MHandle As Integer, MaxAnisotropy As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaxAnisotropy_x86(MHandle, MaxAnisotropy)
			Else
				Return dx_MV1SetMaxAnisotropy_x64(MHandle, MaxAnisotropy)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetWireFrameDrawFlag")> _
		Shared Function dx_MV1SetWireFrameDrawFlag_x86(MHandle As Integer, Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetWireFrameDrawFlag")> _
		Shared Function dx_MV1SetWireFrameDrawFlag_x64(MHandle As Integer, Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetWireFrameDrawFlag(MHandle As Integer, Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetWireFrameDrawFlag_x86(MHandle, Flag)
			Else
				Return dx_MV1SetWireFrameDrawFlag_x64(MHandle, Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1RefreshVertColorFromMaterial")> _
		Shared Function dx_MV1RefreshVertColorFromMaterial_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1RefreshVertColorFromMaterial")> _
		Shared Function dx_MV1RefreshVertColorFromMaterial_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1RefreshVertColorFromMaterial(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1RefreshVertColorFromMaterial_x86(MHandle)
			Else
				Return dx_MV1RefreshVertColorFromMaterial_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetPhysicsWorldGravity")> _
		Shared Function dx_MV1SetPhysicsWorldGravity_x86(MHandle As Integer, Gravity As VECTOR) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetPhysicsWorldGravity")> _
		Shared Function dx_MV1SetPhysicsWorldGravity_x64(MHandle As Integer, Gravity As VECTOR) As Integer
		End Function
		Public Shared Function MV1SetPhysicsWorldGravity(MHandle As Integer, Gravity As VECTOR) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetPhysicsWorldGravity_x86(MHandle, Gravity)
			Else
				Return dx_MV1SetPhysicsWorldGravity_x64(MHandle, Gravity)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1PhysicsCalculation")> _
		Shared Function dx_MV1PhysicsCalculation_x86(MHandle As Integer, MillisecondTime As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1PhysicsCalculation")> _
		Shared Function dx_MV1PhysicsCalculation_x64(MHandle As Integer, MillisecondTime As Single) As Integer
		End Function
		Public Shared Function MV1PhysicsCalculation(MHandle As Integer, MillisecondTime As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1PhysicsCalculation_x86(MHandle, MillisecondTime)
			Else
				Return dx_MV1PhysicsCalculation_x64(MHandle, MillisecondTime)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1PhysicsResetState")> _
		Shared Function dx_MV1PhysicsResetState_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1PhysicsResetState")> _
		Shared Function dx_MV1PhysicsResetState_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1PhysicsResetState(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1PhysicsResetState_x86(MHandle)
			Else
				Return dx_MV1PhysicsResetState_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetUseShapeFlag")> _
		Shared Function dx_MV1SetUseShapeFlag_x86(MHandle As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetUseShapeFlag")> _
		Shared Function dx_MV1SetUseShapeFlag_x64(MHandle As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetUseShapeFlag(MHandle As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetUseShapeFlag_x86(MHandle, UseFlag)
			Else
				Return dx_MV1SetUseShapeFlag_x64(MHandle, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialNumberOrderFlag")> _
		Shared Function dx_MV1GetMaterialNumberOrderFlag_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialNumberOrderFlag")> _
		Shared Function dx_MV1GetMaterialNumberOrderFlag_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialNumberOrderFlag(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialNumberOrderFlag_x86(MHandle)
			Else
				Return dx_MV1GetMaterialNumberOrderFlag_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1AttachAnim")> _
		Shared Function dx_MV1AttachAnim_x86(MHandle As Integer, AnimIndex As Integer, AnimSrcMHandle As Integer, NameCheck As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1AttachAnim")> _
		Shared Function dx_MV1AttachAnim_x64(MHandle As Integer, AnimIndex As Integer, AnimSrcMHandle As Integer, NameCheck As Integer) As Integer
		End Function
		Public Shared Function MV1AttachAnim(MHandle As Integer, AnimIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1AttachAnim_x86(MHandle, AnimIndex, -1, [TRUE])
			Else
				Return dx_MV1AttachAnim_x64(MHandle, AnimIndex, -1, [TRUE])
			End If
		End Function
		Public Shared Function MV1AttachAnim(MHandle As Integer, AnimIndex As Integer, AnimSrcMHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1AttachAnim_x86(MHandle, AnimIndex, AnimSrcMHandle, [TRUE])
			Else
				Return dx_MV1AttachAnim_x64(MHandle, AnimIndex, AnimSrcMHandle, [TRUE])
			End If
		End Function
		Public Shared Function MV1AttachAnim(MHandle As Integer, AnimIndex As Integer, AnimSrcMHandle As Integer, NameCheck As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1AttachAnim_x86(MHandle, AnimIndex, AnimSrcMHandle, NameCheck)
			Else
				Return dx_MV1AttachAnim_x64(MHandle, AnimIndex, AnimSrcMHandle, NameCheck)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1DetachAnim")> _
		Shared Function dx_MV1DetachAnim_x86(MHandle As Integer, AttachIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1DetachAnim")> _
		Shared Function dx_MV1DetachAnim_x64(MHandle As Integer, AttachIndex As Integer) As Integer
		End Function
		Public Shared Function MV1DetachAnim(MHandle As Integer, AttachIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1DetachAnim_x86(MHandle, AttachIndex)
			Else
				Return dx_MV1DetachAnim_x64(MHandle, AttachIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetAttachAnimTime")> _
		Shared Function dx_MV1SetAttachAnimTime_x86(MHandle As Integer, AttachIndex As Integer, Time As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetAttachAnimTime")> _
		Shared Function dx_MV1SetAttachAnimTime_x64(MHandle As Integer, AttachIndex As Integer, Time As Single) As Integer
		End Function
		Public Shared Function MV1SetAttachAnimTime(MHandle As Integer, AttachIndex As Integer, Time As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAttachAnimTime_x86(MHandle, AttachIndex, Time)
			Else
				Return dx_MV1SetAttachAnimTime_x64(MHandle, AttachIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimTime")> _
		Shared Function dx_MV1GetAttachAnimTime_x86(MHandle As Integer, AttachIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimTime")> _
		Shared Function dx_MV1GetAttachAnimTime_x64(MHandle As Integer, AttachIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetAttachAnimTime(MHandle As Integer, AttachIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimTime_x86(MHandle, AttachIndex)
			Else
				Return dx_MV1GetAttachAnimTime_x64(MHandle, AttachIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimTotalTime")> _
		Shared Function dx_MV1GetAttachAnimTotalTime_x86(MHandle As Integer, AttachIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimTotalTime")> _
		Shared Function dx_MV1GetAttachAnimTotalTime_x64(MHandle As Integer, AttachIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetAttachAnimTotalTime(MHandle As Integer, AttachIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimTotalTime_x86(MHandle, AttachIndex)
			Else
				Return dx_MV1GetAttachAnimTotalTime_x64(MHandle, AttachIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetAttachAnimBlendRate")> _
		Shared Function dx_MV1SetAttachAnimBlendRate_x86(MHandle As Integer, AttachIndex As Integer, Rate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetAttachAnimBlendRate")> _
		Shared Function dx_MV1SetAttachAnimBlendRate_x64(MHandle As Integer, AttachIndex As Integer, Rate As Single) As Integer
		End Function
		Public Shared Function MV1SetAttachAnimBlendRate(MHandle As Integer, AttachIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAttachAnimBlendRate_x86(MHandle, AttachIndex, 1F)
			Else
				Return dx_MV1SetAttachAnimBlendRate_x64(MHandle, AttachIndex, 1F)
			End If
		End Function
		Public Shared Function MV1SetAttachAnimBlendRate(MHandle As Integer, AttachIndex As Integer, Rate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAttachAnimBlendRate_x86(MHandle, AttachIndex, Rate)
			Else
				Return dx_MV1SetAttachAnimBlendRate_x64(MHandle, AttachIndex, Rate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimBlendRate")> _
		Shared Function dx_MV1GetAttachAnimBlendRate_x86(MHandle As Integer, AttachIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimBlendRate")> _
		Shared Function dx_MV1GetAttachAnimBlendRate_x64(MHandle As Integer, AttachIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetAttachAnimBlendRate(MHandle As Integer, AttachIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimBlendRate_x86(MHandle, AttachIndex)
			Else
				Return dx_MV1GetAttachAnimBlendRate_x64(MHandle, AttachIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetAttachAnimBlendRateToFrame")> _
		Shared Function dx_MV1SetAttachAnimBlendRateToFrame_x86(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer, Rate As Single, SetChild As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetAttachAnimBlendRateToFrame")> _
		Shared Function dx_MV1SetAttachAnimBlendRateToFrame_x64(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer, Rate As Single, SetChild As Integer) As Integer
		End Function
		Public Shared Function MV1SetAttachAnimBlendRateToFrame(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer, Rate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAttachAnimBlendRateToFrame_x86(MHandle, AttachIndex, FrameIndex, Rate, [TRUE])
			Else
				Return dx_MV1SetAttachAnimBlendRateToFrame_x64(MHandle, AttachIndex, FrameIndex, Rate, [TRUE])
			End If
		End Function
		Public Shared Function MV1SetAttachAnimBlendRateToFrame(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer, Rate As Single, SetChild As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAttachAnimBlendRateToFrame_x86(MHandle, AttachIndex, FrameIndex, Rate, SetChild)
			Else
				Return dx_MV1SetAttachAnimBlendRateToFrame_x64(MHandle, AttachIndex, FrameIndex, Rate, SetChild)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimBlendRateToFrame")> _
		Shared Function dx_MV1GetAttachAnimBlendRateToFrame_x86(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimBlendRateToFrame")> _
		Shared Function dx_MV1GetAttachAnimBlendRateToFrame_x64(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetAttachAnimBlendRateToFrame(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimBlendRateToFrame_x86(MHandle, AttachIndex, FrameIndex)
			Else
				Return dx_MV1GetAttachAnimBlendRateToFrame_x64(MHandle, AttachIndex, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnim")> _
		Shared Function dx_MV1GetAttachAnim_x86(MHandle As Integer, AttachIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnim")> _
		Shared Function dx_MV1GetAttachAnim_x64(MHandle As Integer, AttachIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAttachAnim(MHandle As Integer, AttachIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnim_x86(MHandle, AttachIndex)
			Else
				Return dx_MV1GetAttachAnim_x64(MHandle, AttachIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetAttachAnimUseShapeFlag")> _
		Shared Function dx_MV1SetAttachAnimUseShapeFlag_x86(MHandle As Integer, AttachIndex As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetAttachAnimUseShapeFlag")> _
		Shared Function dx_MV1SetAttachAnimUseShapeFlag_x64(MHandle As Integer, AttachIndex As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetAttachAnimUseShapeFlag(MHandle As Integer, AttachIndex As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAttachAnimUseShapeFlag_x86(MHandle, AttachIndex, UseFlag)
			Else
				Return dx_MV1SetAttachAnimUseShapeFlag_x64(MHandle, AttachIndex, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimUseShapeFlag")> _
		Shared Function dx_MV1GetAttachAnimUseShapeFlag_x86(MHandle As Integer, AttachIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimUseShapeFlag")> _
		Shared Function dx_MV1GetAttachAnimUseShapeFlag_x64(MHandle As Integer, AttachIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAttachAnimUseShapeFlag(MHandle As Integer, AttachIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimUseShapeFlag_x86(MHandle, AttachIndex)
			Else
				Return dx_MV1GetAttachAnimUseShapeFlag_x64(MHandle, AttachIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimFrameLocalPosition")> _
		Shared Function dx_MV1GetAttachAnimFrameLocalPosition_x86(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimFrameLocalPosition")> _
		Shared Function dx_MV1GetAttachAnimFrameLocalPosition_x64(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetAttachAnimFrameLocalPosition(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimFrameLocalPosition_x86(MHandle, AttachIndex, FrameIndex)
			Else
				Return dx_MV1GetAttachAnimFrameLocalPosition_x64(MHandle, AttachIndex, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAttachAnimFrameLocalMatrix")> _
		Shared Function dx_MV1GetAttachAnimFrameLocalMatrix_x86(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAttachAnimFrameLocalMatrix")> _
		Shared Function dx_MV1GetAttachAnimFrameLocalMatrix_x64(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetAttachAnimFrameLocalMatrix(MHandle As Integer, AttachIndex As Integer, FrameIndex As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAttachAnimFrameLocalMatrix_x86(MHandle, AttachIndex, FrameIndex)
			Else
				Return dx_MV1GetAttachAnimFrameLocalMatrix_x64(MHandle, AttachIndex, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimNum")> _
		Shared Function dx_MV1GetAnimNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimNum")> _
		Shared Function dx_MV1GetAnimNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimNum_x86(MHandle)
			Else
				Return dx_MV1GetAnimNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetAnimName")> _
		Shared Function dx_MV1SetAnimName_x86(MHandle As Integer, AnimIndex As Integer, AnimName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetAnimName")> _
		Shared Function dx_MV1SetAnimName_x64(MHandle As Integer, AnimIndex As Integer, AnimName As String) As Integer
		End Function
		Public Shared Function MV1SetAnimName(MHandle As Integer, AnimIndex As Integer, AnimName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetAnimName_x86(MHandle, AnimIndex, AnimName)
			Else
				Return dx_MV1SetAnimName_x64(MHandle, AnimIndex, AnimName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimIndex")> _
		Shared Function dx_MV1GetAnimIndex_x86(MHandle As Integer, AnimName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimIndex")> _
		Shared Function dx_MV1GetAnimIndex_x64(MHandle As Integer, AnimName As String) As Integer
		End Function
		Public Shared Function MV1GetAnimIndex(MHandle As Integer, AnimName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimIndex_x86(MHandle, AnimName)
			Else
				Return dx_MV1GetAnimIndex_x64(MHandle, AnimName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimTotalTime")> _
		Shared Function dx_MV1GetAnimTotalTime_x86(MHandle As Integer, AnimIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimTotalTime")> _
		Shared Function dx_MV1GetAnimTotalTime_x64(MHandle As Integer, AnimIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetAnimTotalTime(MHandle As Integer, AnimIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimTotalTime_x86(MHandle, AnimIndex)
			Else
				Return dx_MV1GetAnimTotalTime_x64(MHandle, AnimIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimTargetFrameNum")> _
		Shared Function dx_MV1GetAnimTargetFrameNum_x86(MHandle As Integer, AnimIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimTargetFrameNum")> _
		Shared Function dx_MV1GetAnimTargetFrameNum_x64(MHandle As Integer, AnimIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimTargetFrameNum(MHandle As Integer, AnimIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimTargetFrameNum_x86(MHandle, AnimIndex)
			Else
				Return dx_MV1GetAnimTargetFrameNum_x64(MHandle, AnimIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimTargetFrame")> _
		Shared Function dx_MV1GetAnimTargetFrame_x86(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimTargetFrame")> _
		Shared Function dx_MV1GetAnimTargetFrame_x64(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimTargetFrame(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimTargetFrame_x86(MHandle, AnimIndex, AnimFrameIndex)
			Else
				Return dx_MV1GetAnimTargetFrame_x64(MHandle, AnimIndex, AnimFrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimTargetFrameKeySetNum")> _
		Shared Function dx_MV1GetAnimTargetFrameKeySetNum_x86(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimTargetFrameKeySetNum")> _
		Shared Function dx_MV1GetAnimTargetFrameKeySetNum_x64(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimTargetFrameKeySetNum(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimTargetFrameKeySetNum_x86(MHandle, AnimIndex, AnimFrameIndex)
			Else
				Return dx_MV1GetAnimTargetFrameKeySetNum_x64(MHandle, AnimIndex, AnimFrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimTargetFrameKeySet")> _
		Shared Function dx_MV1GetAnimTargetFrameKeySet_x86(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer, Index As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimTargetFrameKeySet")> _
		Shared Function dx_MV1GetAnimTargetFrameKeySet_x64(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer, Index As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimTargetFrameKeySet(MHandle As Integer, AnimIndex As Integer, AnimFrameIndex As Integer, Index As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimTargetFrameKeySet_x86(MHandle, AnimIndex, AnimFrameIndex, Index)
			Else
				Return dx_MV1GetAnimTargetFrameKeySet_x64(MHandle, AnimIndex, AnimFrameIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeySetNum")> _
		Shared Function dx_MV1GetAnimKeySetNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeySetNum")> _
		Shared Function dx_MV1GetAnimKeySetNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimKeySetNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeySetNum_x86(MHandle)
			Else
				Return dx_MV1GetAnimKeySetNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeySetType")> _
		Shared Function dx_MV1GetAnimKeySetType_x86(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeySetType")> _
		Shared Function dx_MV1GetAnimKeySetType_x64(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimKeySetType(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeySetType_x86(MHandle, AnimKeySetIndex)
			Else
				Return dx_MV1GetAnimKeySetType_x64(MHandle, AnimKeySetIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeySetDataType")> _
		Shared Function dx_MV1GetAnimKeySetDataType_x86(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeySetDataType")> _
		Shared Function dx_MV1GetAnimKeySetDataType_x64(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimKeySetDataType(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeySetDataType_x86(MHandle, AnimKeySetIndex)
			Else
				Return dx_MV1GetAnimKeySetDataType_x64(MHandle, AnimKeySetIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeySetTimeType")> _
		Shared Function dx_MV1GetAnimKeySetTimeType_x86(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeySetTimeType")> _
		Shared Function dx_MV1GetAnimKeySetTimeType_x64(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimKeySetTimeType(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeySetTimeType_x86(MHandle, AnimKeySetIndex)
			Else
				Return dx_MV1GetAnimKeySetTimeType_x64(MHandle, AnimKeySetIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeySetDataNum")> _
		Shared Function dx_MV1GetAnimKeySetDataNum_x86(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeySetDataNum")> _
		Shared Function dx_MV1GetAnimKeySetDataNum_x64(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetAnimKeySetDataNum(MHandle As Integer, AnimKeySetIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeySetDataNum_x86(MHandle, AnimKeySetIndex)
			Else
				Return dx_MV1GetAnimKeySetDataNum_x64(MHandle, AnimKeySetIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataTime")> _
		Shared Function dx_MV1GetAnimKeyDataTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataTime")> _
		Shared Function dx_MV1GetAnimKeyDataTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
		End Function
		Public Shared Function MV1GetAnimKeyDataTime(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataTime_x86(MHandle, AnimKeySetIndex, Index)
			Else
				Return dx_MV1GetAnimKeyDataTime_x64(MHandle, AnimKeySetIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataIndexFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataIndexFromTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataIndexFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataIndexFromTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Integer
		End Function
		Public Shared Function MV1GetAnimKeyDataIndexFromTime(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataIndexFromTime_x86(MHandle, AnimKeySetIndex, Time)
			Else
				Return dx_MV1GetAnimKeyDataIndexFromTime_x64(MHandle, AnimKeySetIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToQuaternion")> _
		Shared Function dx_MV1GetAnimKeyDataToQuaternion_x86(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As FLOAT4
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToQuaternion")> _
		Shared Function dx_MV1GetAnimKeyDataToQuaternion_x64(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As FLOAT4
		End Function
		Public Shared Function MV1GetAnimKeyDataToQuaternion(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As FLOAT4
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToQuaternion_x86(MHandle, AnimKeySetIndex, Index)
			Else
				Return dx_MV1GetAnimKeyDataToQuaternion_x64(MHandle, AnimKeySetIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToQuaternionFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToQuaternionFromTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As FLOAT4
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToQuaternionFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToQuaternionFromTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As FLOAT4
		End Function
		Public Shared Function MV1GetAnimKeyDataToQuaternionFromTime(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As FLOAT4
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToQuaternionFromTime_x86(MHandle, AnimKeySetIndex, Time)
			Else
				Return dx_MV1GetAnimKeyDataToQuaternionFromTime_x64(MHandle, AnimKeySetIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToVector")> _
		Shared Function dx_MV1GetAnimKeyDataToVector_x86(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToVector")> _
		Shared Function dx_MV1GetAnimKeyDataToVector_x64(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetAnimKeyDataToVector(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToVector_x86(MHandle, AnimKeySetIndex, Index)
			Else
				Return dx_MV1GetAnimKeyDataToVector_x64(MHandle, AnimKeySetIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToVectorFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToVectorFromTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToVectorFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToVectorFromTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As VECTOR
		End Function
		Public Shared Function MV1GetAnimKeyDataToVectorFromTime(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToVectorFromTime_x86(MHandle, AnimKeySetIndex, Time)
			Else
				Return dx_MV1GetAnimKeyDataToVectorFromTime_x64(MHandle, AnimKeySetIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToMatrix")> _
		Shared Function dx_MV1GetAnimKeyDataToMatrix_x86(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToMatrix")> _
		Shared Function dx_MV1GetAnimKeyDataToMatrix_x64(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetAnimKeyDataToMatrix(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToMatrix_x86(MHandle, AnimKeySetIndex, Index)
			Else
				Return dx_MV1GetAnimKeyDataToMatrix_x64(MHandle, AnimKeySetIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToMatrixFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToMatrixFromTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToMatrixFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToMatrixFromTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As MATRIX
		End Function
		Public Shared Function MV1GetAnimKeyDataToMatrixFromTime(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToMatrixFromTime_x86(MHandle, AnimKeySetIndex, Time)
			Else
				Return dx_MV1GetAnimKeyDataToMatrixFromTime_x64(MHandle, AnimKeySetIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToFlat")> _
		Shared Function dx_MV1GetAnimKeyDataToFlat_x86(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToFlat")> _
		Shared Function dx_MV1GetAnimKeyDataToFlat_x64(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
		End Function
		Public Shared Function MV1GetAnimKeyDataToFlat(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToFlat_x86(MHandle, AnimKeySetIndex, Index)
			Else
				Return dx_MV1GetAnimKeyDataToFlat_x64(MHandle, AnimKeySetIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToFlatFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToFlatFromTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToFlatFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToFlatFromTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Single
		End Function
		Public Shared Function MV1GetAnimKeyDataToFlatFromTime(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToFlatFromTime_x86(MHandle, AnimKeySetIndex, Time)
			Else
				Return dx_MV1GetAnimKeyDataToFlatFromTime_x64(MHandle, AnimKeySetIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToLinear")> _
		Shared Function dx_MV1GetAnimKeyDataToLinear_x86(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToLinear")> _
		Shared Function dx_MV1GetAnimKeyDataToLinear_x64(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
		End Function
		Public Shared Function MV1GetAnimKeyDataToLinear(MHandle As Integer, AnimKeySetIndex As Integer, Index As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToLinear_x86(MHandle, AnimKeySetIndex, Index)
			Else
				Return dx_MV1GetAnimKeyDataToLinear_x64(MHandle, AnimKeySetIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetAnimKeyDataToLinearFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToLinearFromTime_x86(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetAnimKeyDataToLinearFromTime")> _
		Shared Function dx_MV1GetAnimKeyDataToLinearFromTime_x64(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Single
		End Function
		Public Shared Function MV1GetAnimKeyDataToLinearFromTime(MHandle As Integer, AnimKeySetIndex As Integer, Time As Single) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetAnimKeyDataToLinearFromTime_x86(MHandle, AnimKeySetIndex, Time)
			Else
				Return dx_MV1GetAnimKeyDataToLinearFromTime_x64(MHandle, AnimKeySetIndex, Time)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialNum")> _
		Shared Function dx_MV1GetMaterialNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialNum")> _
		Shared Function dx_MV1GetMaterialNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialNum_x86(MHandle)
			Else
				Return dx_MV1GetMaterialNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialTypeAll")> _
		Shared Function dx_MV1SetMaterialTypeAll_x86(MHandle As Integer, Type As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialTypeAll")> _
		Shared Function dx_MV1SetMaterialTypeAll_x64(MHandle As Integer, Type As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialTypeAll(MHandle As Integer, Type As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialTypeAll_x86(MHandle, Type)
			Else
				Return dx_MV1SetMaterialTypeAll_x64(MHandle, Type)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialType")> _
		Shared Function dx_MV1SetMaterialType_x86(MHandle As Integer, MaterialIndex As Integer, Type As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialType")> _
		Shared Function dx_MV1SetMaterialType_x64(MHandle As Integer, MaterialIndex As Integer, Type As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialType(MHandle As Integer, MaterialIndex As Integer, Type As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialType_x86(MHandle, MaterialIndex, Type)
			Else
				Return dx_MV1SetMaterialType_x64(MHandle, MaterialIndex, Type)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialType")> _
		Shared Function dx_MV1GetMaterialType_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialType")> _
		Shared Function dx_MV1GetMaterialType_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialType(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialType_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialType_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDifColor")> _
		Shared Function dx_MV1SetMaterialDifColor_x86(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDifColor")> _
		Shared Function dx_MV1SetMaterialDifColor_x64(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMaterialDifColor(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDifColor_x86(MHandle, MaterialIndex, Color)
			Else
				Return dx_MV1SetMaterialDifColor_x64(MHandle, MaterialIndex, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDifColor")> _
		Shared Function dx_MV1GetMaterialDifColor_x86(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDifColor")> _
		Shared Function dx_MV1GetMaterialDifColor_x64(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMaterialDifColor(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDifColor_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDifColor_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSpcColor")> _
		Shared Function dx_MV1SetMaterialSpcColor_x86(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSpcColor")> _
		Shared Function dx_MV1SetMaterialSpcColor_x64(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMaterialSpcColor(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSpcColor_x86(MHandle, MaterialIndex, Color)
			Else
				Return dx_MV1SetMaterialSpcColor_x64(MHandle, MaterialIndex, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSpcColor")> _
		Shared Function dx_MV1GetMaterialSpcColor_x86(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSpcColor")> _
		Shared Function dx_MV1GetMaterialSpcColor_x64(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMaterialSpcColor(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSpcColor_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSpcColor_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialEmiColor")> _
		Shared Function dx_MV1SetMaterialEmiColor_x86(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialEmiColor")> _
		Shared Function dx_MV1SetMaterialEmiColor_x64(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMaterialEmiColor(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialEmiColor_x86(MHandle, MaterialIndex, Color)
			Else
				Return dx_MV1SetMaterialEmiColor_x64(MHandle, MaterialIndex, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialEmiColor")> _
		Shared Function dx_MV1GetMaterialEmiColor_x86(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialEmiColor")> _
		Shared Function dx_MV1GetMaterialEmiColor_x64(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMaterialEmiColor(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialEmiColor_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialEmiColor_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialAmbColor")> _
		Shared Function dx_MV1SetMaterialAmbColor_x86(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialAmbColor")> _
		Shared Function dx_MV1SetMaterialAmbColor_x64(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMaterialAmbColor(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialAmbColor_x86(MHandle, MaterialIndex, Color)
			Else
				Return dx_MV1SetMaterialAmbColor_x64(MHandle, MaterialIndex, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialAmbColor")> _
		Shared Function dx_MV1GetMaterialAmbColor_x86(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialAmbColor")> _
		Shared Function dx_MV1GetMaterialAmbColor_x64(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMaterialAmbColor(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialAmbColor_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialAmbColor_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSpcPower")> _
		Shared Function dx_MV1SetMaterialSpcPower_x86(MHandle As Integer, MaterialIndex As Integer, Power As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSpcPower")> _
		Shared Function dx_MV1SetMaterialSpcPower_x64(MHandle As Integer, MaterialIndex As Integer, Power As Single) As Integer
		End Function
		Public Shared Function MV1SetMaterialSpcPower(MHandle As Integer, MaterialIndex As Integer, Power As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSpcPower_x86(MHandle, MaterialIndex, Power)
			Else
				Return dx_MV1SetMaterialSpcPower_x64(MHandle, MaterialIndex, Power)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSpcPower")> _
		Shared Function dx_MV1GetMaterialSpcPower_x86(MHandle As Integer, MaterialIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSpcPower")> _
		Shared Function dx_MV1GetMaterialSpcPower_x64(MHandle As Integer, MaterialIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetMaterialSpcPower(MHandle As Integer, MaterialIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSpcPower_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSpcPower_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDifMapTexture")> _
		Shared Function dx_MV1SetMaterialDifMapTexture_x86(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDifMapTexture")> _
		Shared Function dx_MV1SetMaterialDifMapTexture_x64(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDifMapTexture(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDifMapTexture_x86(MHandle, MaterialIndex, TexIndex)
			Else
				Return dx_MV1SetMaterialDifMapTexture_x64(MHandle, MaterialIndex, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDifMapTexture")> _
		Shared Function dx_MV1GetMaterialDifMapTexture_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDifMapTexture")> _
		Shared Function dx_MV1GetMaterialDifMapTexture_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDifMapTexture(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDifMapTexture_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDifMapTexture_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSpcMapTexture")> _
		Shared Function dx_MV1SetMaterialSpcMapTexture_x86(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSpcMapTexture")> _
		Shared Function dx_MV1SetMaterialSpcMapTexture_x64(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSpcMapTexture(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSpcMapTexture_x86(MHandle, MaterialIndex, TexIndex)
			Else
				Return dx_MV1SetMaterialSpcMapTexture_x64(MHandle, MaterialIndex, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSpcMapTexture")> _
		Shared Function dx_MV1GetMaterialSpcMapTexture_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSpcMapTexture")> _
		Shared Function dx_MV1GetMaterialSpcMapTexture_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialSpcMapTexture(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSpcMapTexture_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSpcMapTexture_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialNormalMapTexture")> _
		Shared Function dx_MV1GetMaterialNormalMapTexture_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialNormalMapTexture")> _
		Shared Function dx_MV1GetMaterialNormalMapTexture_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialNormalMapTexture(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialNormalMapTexture_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialNormalMapTexture_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDifGradTexture")> _
		Shared Function dx_MV1SetMaterialDifGradTexture_x86(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDifGradTexture")> _
		Shared Function dx_MV1SetMaterialDifGradTexture_x64(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDifGradTexture(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDifGradTexture_x86(MHandle, MaterialIndex, TexIndex)
			Else
				Return dx_MV1SetMaterialDifGradTexture_x64(MHandle, MaterialIndex, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDifGradTexture")> _
		Shared Function dx_MV1GetMaterialDifGradTexture_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDifGradTexture")> _
		Shared Function dx_MV1GetMaterialDifGradTexture_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDifGradTexture(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDifGradTexture_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDifGradTexture_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSpcGradTexture")> _
		Shared Function dx_MV1SetMaterialSpcGradTexture_x86(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSpcGradTexture")> _
		Shared Function dx_MV1SetMaterialSpcGradTexture_x64(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSpcGradTexture(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSpcGradTexture_x86(MHandle, MaterialIndex, TexIndex)
			Else
				Return dx_MV1SetMaterialSpcGradTexture_x64(MHandle, MaterialIndex, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSpcGradTexture")> _
		Shared Function dx_MV1GetMaterialSpcGradTexture_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSpcGradTexture")> _
		Shared Function dx_MV1GetMaterialSpcGradTexture_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialSpcGradTexture(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSpcGradTexture_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSpcGradTexture_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSphereMapTexture")> _
		Shared Function dx_MV1SetMaterialSphereMapTexture_x86(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSphereMapTexture")> _
		Shared Function dx_MV1SetMaterialSphereMapTexture_x64(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSphereMapTexture(MHandle As Integer, MaterialIndex As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSphereMapTexture_x86(MHandle, MaterialIndex, TexIndex)
			Else
				Return dx_MV1SetMaterialSphereMapTexture_x64(MHandle, MaterialIndex, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSphereMapTexture")> _
		Shared Function dx_MV1GetMaterialSphereMapTexture_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSphereMapTexture")> _
		Shared Function dx_MV1GetMaterialSphereMapTexture_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialSphereMapTexture(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSphereMapTexture_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSphereMapTexture_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDifGradBlendTypeAll")> _
		Shared Function dx_MV1SetMaterialDifGradBlendTypeAll_x86(MHandle As Integer, BlendType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDifGradBlendTypeAll")> _
		Shared Function dx_MV1SetMaterialDifGradBlendTypeAll_x64(MHandle As Integer, BlendType As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDifGradBlendTypeAll(MHandle As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDifGradBlendTypeAll_x86(MHandle, BlendType)
			Else
				Return dx_MV1SetMaterialDifGradBlendTypeAll_x64(MHandle, BlendType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDifGradBlendType")> _
		Shared Function dx_MV1SetMaterialDifGradBlendType_x86(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDifGradBlendType")> _
		Shared Function dx_MV1SetMaterialDifGradBlendType_x64(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDifGradBlendType(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDifGradBlendType_x86(MHandle, MaterialIndex, BlendType)
			Else
				Return dx_MV1SetMaterialDifGradBlendType_x64(MHandle, MaterialIndex, BlendType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDifGradBlendType")> _
		Shared Function dx_MV1GetMaterialDifGradBlendType_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDifGradBlendType")> _
		Shared Function dx_MV1GetMaterialDifGradBlendType_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDifGradBlendType(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDifGradBlendType_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDifGradBlendType_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSpcGradBlendTypeAll")> _
		Shared Function dx_MV1SetMaterialSpcGradBlendTypeAll_x86(MHandle As Integer, BlendType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSpcGradBlendTypeAll")> _
		Shared Function dx_MV1SetMaterialSpcGradBlendTypeAll_x64(MHandle As Integer, BlendType As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSpcGradBlendTypeAll(MHandle As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSpcGradBlendTypeAll_x86(MHandle, BlendType)
			Else
				Return dx_MV1SetMaterialSpcGradBlendTypeAll_x64(MHandle, BlendType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSpcGradBlendType")> _
		Shared Function dx_MV1SetMaterialSpcGradBlendType_x86(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSpcGradBlendType")> _
		Shared Function dx_MV1SetMaterialSpcGradBlendType_x64(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSpcGradBlendType(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSpcGradBlendType_x86(MHandle, MaterialIndex, BlendType)
			Else
				Return dx_MV1SetMaterialSpcGradBlendType_x64(MHandle, MaterialIndex, BlendType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSpcGradBlendType")> _
		Shared Function dx_MV1GetMaterialSpcGradBlendType_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSpcGradBlendType")> _
		Shared Function dx_MV1GetMaterialSpcGradBlendType_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialSpcGradBlendType(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSpcGradBlendType_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSpcGradBlendType_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSphereMapBlendTypeAll")> _
		Shared Function dx_MV1SetMaterialSphereMapBlendTypeAll_x86(MHandle As Integer, BlendType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSphereMapBlendTypeAll")> _
		Shared Function dx_MV1SetMaterialSphereMapBlendTypeAll_x64(MHandle As Integer, BlendType As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSphereMapBlendTypeAll(MHandle As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSphereMapBlendTypeAll_x86(MHandle, BlendType)
			Else
				Return dx_MV1SetMaterialSphereMapBlendTypeAll_x64(MHandle, BlendType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialSphereMapBlendType")> _
		Shared Function dx_MV1SetMaterialSphereMapBlendType_x86(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialSphereMapBlendType")> _
		Shared Function dx_MV1SetMaterialSphereMapBlendType_x64(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialSphereMapBlendType(MHandle As Integer, MaterialIndex As Integer, BlendType As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialSphereMapBlendType_x86(MHandle, MaterialIndex, BlendType)
			Else
				Return dx_MV1SetMaterialSphereMapBlendType_x64(MHandle, MaterialIndex, BlendType)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialSphereMapBlendType")> _
		Shared Function dx_MV1GetMaterialSphereMapBlendType_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialSphereMapBlendType")> _
		Shared Function dx_MV1GetMaterialSphereMapBlendType_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialSphereMapBlendType(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialSphereMapBlendType_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialSphereMapBlendType_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialOutLineWidthAll")> _
		Shared Function dx_MV1SetMaterialOutLineWidthAll_x86(MHandle As Integer, Width As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialOutLineWidthAll")> _
		Shared Function dx_MV1SetMaterialOutLineWidthAll_x64(MHandle As Integer, Width As Single) As Integer
		End Function
		Public Shared Function MV1SetMaterialOutLineWidthAll(MHandle As Integer, Width As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialOutLineWidthAll_x86(MHandle, Width)
			Else
				Return dx_MV1SetMaterialOutLineWidthAll_x64(MHandle, Width)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialOutLineWidth")> _
		Shared Function dx_MV1SetMaterialOutLineWidth_x86(MHandle As Integer, MaterialIndex As Integer, Width As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialOutLineWidth")> _
		Shared Function dx_MV1SetMaterialOutLineWidth_x64(MHandle As Integer, MaterialIndex As Integer, Width As Single) As Integer
		End Function
		Public Shared Function MV1SetMaterialOutLineWidth(MHandle As Integer, MaterialIndex As Integer, Width As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialOutLineWidth_x86(MHandle, MaterialIndex, Width)
			Else
				Return dx_MV1SetMaterialOutLineWidth_x64(MHandle, MaterialIndex, Width)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialOutLineWidth")> _
		Shared Function dx_MV1GetMaterialOutLineWidth_x86(MHandle As Integer, MaterialIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialOutLineWidth")> _
		Shared Function dx_MV1GetMaterialOutLineWidth_x64(MHandle As Integer, MaterialIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetMaterialOutLineWidth(MHandle As Integer, MaterialIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialOutLineWidth_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialOutLineWidth_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialOutLineDotWidthAll")> _
		Shared Function dx_MV1SetMaterialOutLineDotWidthAll_x86(MHandle As Integer, Width As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialOutLineDotWidthAll")> _
		Shared Function dx_MV1SetMaterialOutLineDotWidthAll_x64(MHandle As Integer, Width As Single) As Integer
		End Function
		Public Shared Function MV1SetMaterialOutLineDotWidthAll(MHandle As Integer, Width As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialOutLineDotWidthAll_x86(MHandle, Width)
			Else
				Return dx_MV1SetMaterialOutLineDotWidthAll_x64(MHandle, Width)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialOutLineDotWidth")> _
		Shared Function dx_MV1SetMaterialOutLineDotWidth_x86(MHandle As Integer, MaterialIndex As Integer, Width As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialOutLineDotWidth")> _
		Shared Function dx_MV1SetMaterialOutLineDotWidth_x64(MHandle As Integer, MaterialIndex As Integer, Width As Single) As Integer
		End Function
		Public Shared Function MV1SetMaterialOutLineDotWidth(MHandle As Integer, MaterialIndex As Integer, Width As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialOutLineDotWidth_x86(MHandle, MaterialIndex, Width)
			Else
				Return dx_MV1SetMaterialOutLineDotWidth_x64(MHandle, MaterialIndex, Width)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialOutLineDotWidth")> _
		Shared Function dx_MV1GetMaterialOutLineDotWidth_x86(MHandle As Integer, MaterialIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialOutLineDotWidth")> _
		Shared Function dx_MV1GetMaterialOutLineDotWidth_x64(MHandle As Integer, MaterialIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetMaterialOutLineDotWidth(MHandle As Integer, MaterialIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialOutLineDotWidth_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialOutLineDotWidth_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialOutLineColorAll")> _
		Shared Function dx_MV1SetMaterialOutLineColorAll_x86(MHandle As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialOutLineColorAll")> _
		Shared Function dx_MV1SetMaterialOutLineColorAll_x64(MHandle As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMaterialOutLineColorAll(MHandle As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialOutLineColorAll_x86(MHandle, Color)
			Else
				Return dx_MV1SetMaterialOutLineColorAll_x64(MHandle, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialOutLineColor")> _
		Shared Function dx_MV1SetMaterialOutLineColor_x86(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialOutLineColor")> _
		Shared Function dx_MV1SetMaterialOutLineColor_x64(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMaterialOutLineColor(MHandle As Integer, MaterialIndex As Integer, Color As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialOutLineColor_x86(MHandle, MaterialIndex, Color)
			Else
				Return dx_MV1SetMaterialOutLineColor_x64(MHandle, MaterialIndex, Color)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialOutLineColor")> _
		Shared Function dx_MV1GetMaterialOutLineColor_x86(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialOutLineColor")> _
		Shared Function dx_MV1GetMaterialOutLineColor_x64(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMaterialOutLineColor(MHandle As Integer, MaterialIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialOutLineColor_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialOutLineColor_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDrawBlendModeAll")> _
		Shared Function dx_MV1SetMaterialDrawBlendModeAll_x86(MHandle As Integer, BlendMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDrawBlendModeAll")> _
		Shared Function dx_MV1SetMaterialDrawBlendModeAll_x64(MHandle As Integer, BlendMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDrawBlendModeAll(MHandle As Integer, BlendMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDrawBlendModeAll_x86(MHandle, BlendMode)
			Else
				Return dx_MV1SetMaterialDrawBlendModeAll_x64(MHandle, BlendMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDrawBlendMode")> _
		Shared Function dx_MV1SetMaterialDrawBlendMode_x86(MHandle As Integer, MaterialIndex As Integer, BlendMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDrawBlendMode")> _
		Shared Function dx_MV1SetMaterialDrawBlendMode_x64(MHandle As Integer, MaterialIndex As Integer, BlendMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDrawBlendMode(MHandle As Integer, MaterialIndex As Integer, BlendMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDrawBlendMode_x86(MHandle, MaterialIndex, BlendMode)
			Else
				Return dx_MV1SetMaterialDrawBlendMode_x64(MHandle, MaterialIndex, BlendMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDrawBlendMode")> _
		Shared Function dx_MV1GetMaterialDrawBlendMode_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDrawBlendMode")> _
		Shared Function dx_MV1GetMaterialDrawBlendMode_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDrawBlendMode(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDrawBlendMode_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDrawBlendMode_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDrawBlendParamAll")> _
		Shared Function dx_MV1SetMaterialDrawBlendParamAll_x86(MHandle As Integer, BlendParam As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDrawBlendParamAll")> _
		Shared Function dx_MV1SetMaterialDrawBlendParamAll_x64(MHandle As Integer, BlendParam As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDrawBlendParamAll(MHandle As Integer, BlendParam As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDrawBlendParamAll_x86(MHandle, BlendParam)
			Else
				Return dx_MV1SetMaterialDrawBlendParamAll_x64(MHandle, BlendParam)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDrawBlendParam")> _
		Shared Function dx_MV1SetMaterialDrawBlendParam_x86(MHandle As Integer, MaterialIndex As Integer, BlendParam As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDrawBlendParam")> _
		Shared Function dx_MV1SetMaterialDrawBlendParam_x64(MHandle As Integer, MaterialIndex As Integer, BlendParam As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDrawBlendParam(MHandle As Integer, MaterialIndex As Integer, BlendParam As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDrawBlendParam_x86(MHandle, MaterialIndex, BlendParam)
			Else
				Return dx_MV1SetMaterialDrawBlendParam_x64(MHandle, MaterialIndex, BlendParam)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDrawBlendParam")> _
		Shared Function dx_MV1GetMaterialDrawBlendParam_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDrawBlendParam")> _
		Shared Function dx_MV1GetMaterialDrawBlendParam_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDrawBlendParam(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDrawBlendParam_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDrawBlendParam_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDrawAlphaTestAll")> _
		Shared Function dx_MV1SetMaterialDrawAlphaTestAll_x86(MHandle As Integer, Enable As Integer, Mode As Integer, Param As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDrawAlphaTestAll")> _
		Shared Function dx_MV1SetMaterialDrawAlphaTestAll_x64(MHandle As Integer, Enable As Integer, Mode As Integer, Param As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDrawAlphaTestAll(MHandle As Integer, Enable As Integer, Mode As Integer, Param As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDrawAlphaTestAll_x86(MHandle, Enable, Mode, Param)
			Else
				Return dx_MV1SetMaterialDrawAlphaTestAll_x64(MHandle, Enable, Mode, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMaterialDrawAlphaTest")> _
		Shared Function dx_MV1SetMaterialDrawAlphaTest_x86(MHandle As Integer, MaterialIndex As Integer, Enable As Integer, Mode As Integer, Param As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMaterialDrawAlphaTest")> _
		Shared Function dx_MV1SetMaterialDrawAlphaTest_x64(MHandle As Integer, MaterialIndex As Integer, Enable As Integer, Mode As Integer, Param As Integer) As Integer
		End Function
		Public Shared Function MV1SetMaterialDrawAlphaTest(MHandle As Integer, MaterialIndex As Integer, Enable As Integer, Mode As Integer, Param As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMaterialDrawAlphaTest_x86(MHandle, MaterialIndex, Enable, Mode, Param)
			Else
				Return dx_MV1SetMaterialDrawAlphaTest_x64(MHandle, MaterialIndex, Enable, Mode, Param)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDrawAlphaTestEnable")> _
		Shared Function dx_MV1GetMaterialDrawAlphaTestEnable_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDrawAlphaTestEnable")> _
		Shared Function dx_MV1GetMaterialDrawAlphaTestEnable_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDrawAlphaTestEnable(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDrawAlphaTestEnable_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDrawAlphaTestEnable_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDrawAlphaTestMode")> _
		Shared Function dx_MV1GetMaterialDrawAlphaTestMode_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDrawAlphaTestMode")> _
		Shared Function dx_MV1GetMaterialDrawAlphaTestMode_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDrawAlphaTestMode(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDrawAlphaTestMode_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDrawAlphaTestMode_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMaterialDrawAlphaTestParam")> _
		Shared Function dx_MV1GetMaterialDrawAlphaTestParam_x86(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMaterialDrawAlphaTestParam")> _
		Shared Function dx_MV1GetMaterialDrawAlphaTestParam_x64(MHandle As Integer, MaterialIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMaterialDrawAlphaTestParam(MHandle As Integer, MaterialIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMaterialDrawAlphaTestParam_x86(MHandle, MaterialIndex)
			Else
				Return dx_MV1GetMaterialDrawAlphaTestParam_x64(MHandle, MaterialIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureNum")> _
		Shared Function dx_MV1GetTextureNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureNum")> _
		Shared Function dx_MV1GetTextureNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureNum_x86(MHandle)
			Else
				Return dx_MV1GetTextureNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureColorFilePath")> _
		Shared Function dx_MV1SetTextureColorFilePath_x86(MHandle As Integer, TexIndex As Integer, FilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureColorFilePath")> _
		Shared Function dx_MV1SetTextureColorFilePath_x64(MHandle As Integer, TexIndex As Integer, FilePath As String) As Integer
		End Function
		Public Shared Function MV1SetTextureColorFilePath(MHandle As Integer, TexIndex As Integer, FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureColorFilePath_x86(MHandle, TexIndex, FilePath)
			Else
				Return dx_MV1SetTextureColorFilePath_x64(MHandle, TexIndex, FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureAlphaFilePath")> _
		Shared Function dx_MV1SetTextureAlphaFilePath_x86(MHandle As Integer, TexIndex As Integer, FilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureAlphaFilePath")> _
		Shared Function dx_MV1SetTextureAlphaFilePath_x64(MHandle As Integer, TexIndex As Integer, FilePath As String) As Integer
		End Function
		Public Shared Function MV1SetTextureAlphaFilePath(MHandle As Integer, TexIndex As Integer, FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureAlphaFilePath_x86(MHandle, TexIndex, FilePath)
			Else
				Return dx_MV1SetTextureAlphaFilePath_x64(MHandle, TexIndex, FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureGraphHandle")> _
		Shared Function dx_MV1SetTextureGraphHandle_x86(MHandle As Integer, TexIndex As Integer, GrHandle As Integer, SemiTransFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureGraphHandle")> _
		Shared Function dx_MV1SetTextureGraphHandle_x64(MHandle As Integer, TexIndex As Integer, GrHandle As Integer, SemiTransFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetTextureGraphHandle(MHandle As Integer, TexIndex As Integer, GrHandle As Integer, SemiTransFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureGraphHandle_x86(MHandle, TexIndex, GrHandle, SemiTransFlag)
			Else
				Return dx_MV1SetTextureGraphHandle_x64(MHandle, TexIndex, GrHandle, SemiTransFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureGraphHandle")> _
		Shared Function dx_MV1GetTextureGraphHandle_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureGraphHandle")> _
		Shared Function dx_MV1GetTextureGraphHandle_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureGraphHandle(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureGraphHandle_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureGraphHandle_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureAddressMode")> _
		Shared Function dx_MV1SetTextureAddressMode_x86(MHandle As Integer, TexIndex As Integer, AddrUMode As Integer, AddrVMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureAddressMode")> _
		Shared Function dx_MV1SetTextureAddressMode_x64(MHandle As Integer, TexIndex As Integer, AddrUMode As Integer, AddrVMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetTextureAddressMode(MHandle As Integer, TexIndex As Integer, AddrUMode As Integer, AddrVMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureAddressMode_x86(MHandle, TexIndex, AddrUMode, AddrVMode)
			Else
				Return dx_MV1SetTextureAddressMode_x64(MHandle, TexIndex, AddrUMode, AddrVMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureAddressModeU")> _
		Shared Function dx_MV1GetTextureAddressModeU_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureAddressModeU")> _
		Shared Function dx_MV1GetTextureAddressModeU_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureAddressModeU(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureAddressModeU_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureAddressModeU_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureAddressModeV")> _
		Shared Function dx_MV1GetTextureAddressModeV_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureAddressModeV")> _
		Shared Function dx_MV1GetTextureAddressModeV_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureAddressModeV(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureAddressModeV_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureAddressModeV_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureWidth")> _
		Shared Function dx_MV1GetTextureWidth_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureWidth")> _
		Shared Function dx_MV1GetTextureWidth_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureWidth(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureWidth_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureWidth_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureHeight")> _
		Shared Function dx_MV1GetTextureHeight_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureHeight")> _
		Shared Function dx_MV1GetTextureHeight_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureHeight(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureHeight_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureHeight_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureSemiTransState")> _
		Shared Function dx_MV1GetTextureSemiTransState_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureSemiTransState")> _
		Shared Function dx_MV1GetTextureSemiTransState_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureSemiTransState(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureSemiTransState_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureSemiTransState_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureBumpImageFlag")> _
		Shared Function dx_MV1SetTextureBumpImageFlag_x86(MHandle As Integer, TexIndex As Integer, Flag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureBumpImageFlag")> _
		Shared Function dx_MV1SetTextureBumpImageFlag_x64(MHandle As Integer, TexIndex As Integer, Flag As Integer) As Integer
		End Function
		Public Shared Function MV1SetTextureBumpImageFlag(MHandle As Integer, TexIndex As Integer, Flag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureBumpImageFlag_x86(MHandle, TexIndex, Flag)
			Else
				Return dx_MV1SetTextureBumpImageFlag_x64(MHandle, TexIndex, Flag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureBumpImageFlag")> _
		Shared Function dx_MV1GetTextureBumpImageFlag_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureBumpImageFlag")> _
		Shared Function dx_MV1GetTextureBumpImageFlag_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureBumpImageFlag(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureBumpImageFlag_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureBumpImageFlag_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureBumpImageNextPixelLength")> _
		Shared Function dx_MV1SetTextureBumpImageNextPixelLength_x86(MHandle As Integer, TexIndex As Integer, Length As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureBumpImageNextPixelLength")> _
		Shared Function dx_MV1SetTextureBumpImageNextPixelLength_x64(MHandle As Integer, TexIndex As Integer, Length As Single) As Integer
		End Function
		Public Shared Function MV1SetTextureBumpImageNextPixelLength(MHandle As Integer, TexIndex As Integer, Length As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureBumpImageNextPixelLength_x86(MHandle, TexIndex, Length)
			Else
				Return dx_MV1SetTextureBumpImageNextPixelLength_x64(MHandle, TexIndex, Length)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureBumpImageNextPixelLength")> _
		Shared Function dx_MV1GetTextureBumpImageNextPixelLength_x86(MHandle As Integer, TexIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureBumpImageNextPixelLength")> _
		Shared Function dx_MV1GetTextureBumpImageNextPixelLength_x64(MHandle As Integer, TexIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetTextureBumpImageNextPixelLength(MHandle As Integer, TexIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureBumpImageNextPixelLength_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureBumpImageNextPixelLength_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetTextureSampleFilterMode")> _
		Shared Function dx_MV1SetTextureSampleFilterMode_x86(MHandle As Integer, TexIndex As Integer, FilterMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetTextureSampleFilterMode")> _
		Shared Function dx_MV1SetTextureSampleFilterMode_x64(MHandle As Integer, TexIndex As Integer, FilterMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetTextureSampleFilterMode(MHandle As Integer, TexIndex As Integer, FilterMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetTextureSampleFilterMode_x86(MHandle, TexIndex, FilterMode)
			Else
				Return dx_MV1SetTextureSampleFilterMode_x64(MHandle, TexIndex, FilterMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTextureSampleFilterMode")> _
		Shared Function dx_MV1GetTextureSampleFilterMode_x86(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTextureSampleFilterMode")> _
		Shared Function dx_MV1GetTextureSampleFilterMode_x64(MHandle As Integer, TexIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTextureSampleFilterMode(MHandle As Integer, TexIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTextureSampleFilterMode_x86(MHandle, TexIndex)
			Else
				Return dx_MV1GetTextureSampleFilterMode_x64(MHandle, TexIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1LoadTexture")> _
		Shared Function dx_MV1LoadTexture_x86(FilePath As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1LoadTexture")> _
		Shared Function dx_MV1LoadTexture_x64(FilePath As String) As Integer
		End Function
		Public Shared Function MV1LoadTexture(FilePath As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1LoadTexture_x86(FilePath)
			Else
				Return dx_MV1LoadTexture_x64(FilePath)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameNum")> _
		Shared Function dx_MV1GetFrameNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameNum")> _
		Shared Function dx_MV1GetFrameNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameNum_x86(MHandle)
			Else
				Return dx_MV1GetFrameNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SearchFrame")> _
		Shared Function dx_MV1SearchFrame_x86(MHandle As Integer, FrameName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SearchFrame")> _
		Shared Function dx_MV1SearchFrame_x64(MHandle As Integer, FrameName As String) As Integer
		End Function
		Public Shared Function MV1SearchFrame(MHandle As Integer, FrameName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SearchFrame_x86(MHandle, FrameName)
			Else
				Return dx_MV1SearchFrame_x64(MHandle, FrameName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SearchFrameChild")> _
		Shared Function dx_MV1SearchFrameChild_x86(MHandle As Integer, FrameIndex As Integer, ChildName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SearchFrameChild")> _
		Shared Function dx_MV1SearchFrameChild_x64(MHandle As Integer, FrameIndex As Integer, ChildName As String) As Integer
		End Function
		Public Shared Function MV1SearchFrameChild(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SearchFrameChild_x86(MHandle, -1, Nothing)
			Else
				Return dx_MV1SearchFrameChild_x64(MHandle, -1, Nothing)
			End If
		End Function
		Public Shared Function MV1SearchFrameChild(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SearchFrameChild_x86(MHandle, FrameIndex, Nothing)
			Else
				Return dx_MV1SearchFrameChild_x64(MHandle, FrameIndex, Nothing)
			End If
		End Function
		Public Shared Function MV1SearchFrameChild(MHandle As Integer, FrameIndex As Integer, ChildName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SearchFrameChild_x86(MHandle, FrameIndex, ChildName)
			Else
				Return dx_MV1SearchFrameChild_x64(MHandle, FrameIndex, ChildName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameName2")> _
		Shared Function dx_MV1GetFrameName2_x86(MHandle As Integer, FrameIndex As Integer, StrBuffer As System.Text.StringBuilder) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameName2")> _
		Shared Function dx_MV1GetFrameName2_x64(MHandle As Integer, FrameIndex As Integer, StrBuffer As System.Text.StringBuilder) As Integer
		End Function
		Public Shared Function MV1GetFrameName2(MHandle As Integer, FrameIndex As Integer, StrBuffer As System.Text.StringBuilder) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameName2_x86(MHandle, FrameIndex, StrBuffer)
			Else
				Return dx_MV1GetFrameName2_x64(MHandle, FrameIndex, StrBuffer)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameParent")> _
		Shared Function dx_MV1GetFrameParent_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameParent")> _
		Shared Function dx_MV1GetFrameParent_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameParent(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameParent_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameParent_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameChildNum")> _
		Shared Function dx_MV1GetFrameChildNum_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameChildNum")> _
		Shared Function dx_MV1GetFrameChildNum_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameChildNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameChildNum_x86(MHandle, -1)
			Else
				Return dx_MV1GetFrameChildNum_x64(MHandle, -1)
			End If
		End Function
		Public Shared Function MV1GetFrameChildNum(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameChildNum_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameChildNum_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameChild")> _
		Shared Function dx_MV1GetFrameChild_x86(MHandle As Integer, FrameIndex As Integer, ChildIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameChild")> _
		Shared Function dx_MV1GetFrameChild_x64(MHandle As Integer, FrameIndex As Integer, ChildIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameChild(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameChild_x86(MHandle, -1, 0)
			Else
				Return dx_MV1GetFrameChild_x64(MHandle, -1, 0)
			End If
		End Function
		Public Shared Function MV1GetFrameChild(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameChild_x86(MHandle, FrameIndex, 0)
			Else
				Return dx_MV1GetFrameChild_x64(MHandle, FrameIndex, 0)
			End If
		End Function
		Public Shared Function MV1GetFrameChild(MHandle As Integer, FrameIndex As Integer, ChildIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameChild_x86(MHandle, FrameIndex, ChildIndex)
			Else
				Return dx_MV1GetFrameChild_x64(MHandle, FrameIndex, ChildIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFramePosition")> _
		Shared Function dx_MV1GetFramePosition_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFramePosition")> _
		Shared Function dx_MV1GetFramePosition_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetFramePosition(MHandle As Integer, FrameIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFramePosition_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFramePosition_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFramePositionD")> _
		Shared Function dx_MV1GetFramePositionD_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFramePositionD")> _
		Shared Function dx_MV1GetFramePositionD_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		Public Shared Function MV1GetFramePositionD(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFramePositionD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFramePositionD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameBaseLocalMatrix")> _
		Shared Function dx_MV1GetFrameBaseLocalMatrix_x86(MHandle As Integer, FrameIndex As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameBaseLocalMatrix")> _
		Shared Function dx_MV1GetFrameBaseLocalMatrix_x64(MHandle As Integer, FrameIndex As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetFrameBaseLocalMatrix(MHandle As Integer, FrameIndex As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameBaseLocalMatrix_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameBaseLocalMatrix_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameBaseLocalMatrixD")> _
		Shared Function dx_MV1GetFrameBaseLocalMatrixD_x86(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameBaseLocalMatrixD")> _
		Shared Function dx_MV1GetFrameBaseLocalMatrixD_x64(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
		End Function
		Public Shared Function MV1GetFrameBaseLocalMatrixD(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameBaseLocalMatrixD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameBaseLocalMatrixD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameLocalMatrix")> _
		Shared Function dx_MV1GetFrameLocalMatrix_x86(MHandle As Integer, FrameIndex As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameLocalMatrix")> _
		Shared Function dx_MV1GetFrameLocalMatrix_x64(MHandle As Integer, FrameIndex As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetFrameLocalMatrix(MHandle As Integer, FrameIndex As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameLocalMatrix_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameLocalMatrix_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameLocalMatrixD")> _
		Shared Function dx_MV1GetFrameLocalMatrixD_x86(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameLocalMatrixD")> _
		Shared Function dx_MV1GetFrameLocalMatrixD_x64(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
		End Function
		Public Shared Function MV1GetFrameLocalMatrixD(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameLocalMatrixD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameLocalMatrixD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameLocalWorldMatrix")> _
		Shared Function dx_MV1GetFrameLocalWorldMatrix_x86(MHandle As Integer, FrameIndex As Integer) As MATRIX
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameLocalWorldMatrix")> _
		Shared Function dx_MV1GetFrameLocalWorldMatrix_x64(MHandle As Integer, FrameIndex As Integer) As MATRIX
		End Function
		Public Shared Function MV1GetFrameLocalWorldMatrix(MHandle As Integer, FrameIndex As Integer) As MATRIX
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameLocalWorldMatrix_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameLocalWorldMatrix_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameLocalWorldMatrixD")> _
		Shared Function dx_MV1GetFrameLocalWorldMatrixD_x86(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameLocalWorldMatrixD")> _
		Shared Function dx_MV1GetFrameLocalWorldMatrixD_x64(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
		End Function
		Public Shared Function MV1GetFrameLocalWorldMatrixD(MHandle As Integer, FrameIndex As Integer) As MATRIX_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameLocalWorldMatrixD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameLocalWorldMatrixD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameUserLocalMatrix")> _
		Shared Function dx_MV1SetFrameUserLocalMatrix_x86(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameUserLocalMatrix")> _
		Shared Function dx_MV1SetFrameUserLocalMatrix_x64(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX) As Integer
		End Function
		Public Shared Function MV1SetFrameUserLocalMatrix(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameUserLocalMatrix_x86(MHandle, FrameIndex, Matrix)
			Else
				Return dx_MV1SetFrameUserLocalMatrix_x64(MHandle, FrameIndex, Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameUserLocalMatrixD")> _
		Shared Function dx_MV1SetFrameUserLocalMatrixD_x86(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX_D) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameUserLocalMatrixD")> _
		Shared Function dx_MV1SetFrameUserLocalMatrixD_x64(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX_D) As Integer
		End Function
		Public Shared Function MV1SetFrameUserLocalMatrixD(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX_D) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameUserLocalMatrixD_x86(MHandle, FrameIndex, Matrix)
			Else
				Return dx_MV1SetFrameUserLocalMatrixD_x64(MHandle, FrameIndex, Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1ResetFrameUserLocalMatrix")> _
		Shared Function dx_MV1ResetFrameUserLocalMatrix_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1ResetFrameUserLocalMatrix")> _
		Shared Function dx_MV1ResetFrameUserLocalMatrix_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1ResetFrameUserLocalMatrix(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1ResetFrameUserLocalMatrix_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1ResetFrameUserLocalMatrix_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameMaxVertexLocalPosition")> _
		Shared Function dx_MV1GetFrameMaxVertexLocalPosition_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameMaxVertexLocalPosition")> _
		Shared Function dx_MV1GetFrameMaxVertexLocalPosition_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetFrameMaxVertexLocalPosition(MHandle As Integer, FrameIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameMaxVertexLocalPosition_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameMaxVertexLocalPosition_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameMaxVertexLocalPositionD")> _
		Shared Function dx_MV1GetFrameMaxVertexLocalPositionD_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameMaxVertexLocalPositionD")> _
		Shared Function dx_MV1GetFrameMaxVertexLocalPositionD_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		Public Shared Function MV1GetFrameMaxVertexLocalPositionD(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameMaxVertexLocalPositionD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameMaxVertexLocalPositionD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameMinVertexLocalPosition")> _
		Shared Function dx_MV1GetFrameMinVertexLocalPosition_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameMinVertexLocalPosition")> _
		Shared Function dx_MV1GetFrameMinVertexLocalPosition_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetFrameMinVertexLocalPosition(MHandle As Integer, FrameIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameMinVertexLocalPosition_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameMinVertexLocalPosition_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameMinVertexLocalPositionD")> _
		Shared Function dx_MV1GetFrameMinVertexLocalPositionD_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameMinVertexLocalPositionD")> _
		Shared Function dx_MV1GetFrameMinVertexLocalPositionD_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		Public Shared Function MV1GetFrameMinVertexLocalPositionD(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameMinVertexLocalPositionD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameMinVertexLocalPositionD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameAvgVertexLocalPosition")> _
		Shared Function dx_MV1GetFrameAvgVertexLocalPosition_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameAvgVertexLocalPosition")> _
		Shared Function dx_MV1GetFrameAvgVertexLocalPosition_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetFrameAvgVertexLocalPosition(MHandle As Integer, FrameIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameAvgVertexLocalPosition_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameAvgVertexLocalPosition_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameAvgVertexLocalPositionD")> _
		Shared Function dx_MV1GetFrameAvgVertexLocalPositionD_x86(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameAvgVertexLocalPositionD")> _
		Shared Function dx_MV1GetFrameAvgVertexLocalPositionD_x64(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
		End Function
		Public Shared Function MV1GetFrameAvgVertexLocalPositionD(MHandle As Integer, FrameIndex As Integer) As VECTOR_D
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameAvgVertexLocalPositionD_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameAvgVertexLocalPositionD_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameTriangleNum")> _
		Shared Function dx_MV1GetFrameTriangleNum_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameTriangleNum")> _
		Shared Function dx_MV1GetFrameTriangleNum_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameTriangleNum(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameTriangleNum_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameTriangleNum_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameMeshNum")> _
		Shared Function dx_MV1GetFrameMeshNum_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameMeshNum")> _
		Shared Function dx_MV1GetFrameMeshNum_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameMeshNum(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameMeshNum_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameMeshNum_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameMesh")> _
		Shared Function dx_MV1GetFrameMesh_x86(MHandle As Integer, FrameIndex As Integer, Index As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameMesh")> _
		Shared Function dx_MV1GetFrameMesh_x64(MHandle As Integer, FrameIndex As Integer, Index As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameMesh(MHandle As Integer, FrameIndex As Integer, Index As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameMesh_x86(MHandle, FrameIndex, Index)
			Else
				Return dx_MV1GetFrameMesh_x64(MHandle, FrameIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameVisible")> _
		Shared Function dx_MV1SetFrameVisible_x86(MHandle As Integer, FrameIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameVisible")> _
		Shared Function dx_MV1SetFrameVisible_x64(MHandle As Integer, FrameIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetFrameVisible(MHandle As Integer, FrameIndex As Integer, VisibleFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameVisible_x86(MHandle, FrameIndex, VisibleFlag)
			Else
				Return dx_MV1SetFrameVisible_x64(MHandle, FrameIndex, VisibleFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameVisible")> _
		Shared Function dx_MV1GetFrameVisible_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameVisible")> _
		Shared Function dx_MV1GetFrameVisible_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameVisible(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameVisible_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameVisible_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameDifColorScale")> _
		Shared Function dx_MV1SetFrameDifColorScale_x86(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameDifColorScale")> _
		Shared Function dx_MV1SetFrameDifColorScale_x64(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetFrameDifColorScale(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameDifColorScale_x86(MHandle, FrameIndex, Scale)
			Else
				Return dx_MV1SetFrameDifColorScale_x64(MHandle, FrameIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameSpcColorScale")> _
		Shared Function dx_MV1SetFrameSpcColorScale_x86(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameSpcColorScale")> _
		Shared Function dx_MV1SetFrameSpcColorScale_x64(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetFrameSpcColorScale(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameSpcColorScale_x86(MHandle, FrameIndex, Scale)
			Else
				Return dx_MV1SetFrameSpcColorScale_x64(MHandle, FrameIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameEmiColorScale")> _
		Shared Function dx_MV1SetFrameEmiColorScale_x86(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameEmiColorScale")> _
		Shared Function dx_MV1SetFrameEmiColorScale_x64(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetFrameEmiColorScale(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameEmiColorScale_x86(MHandle, FrameIndex, Scale)
			Else
				Return dx_MV1SetFrameEmiColorScale_x64(MHandle, FrameIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameAmbColorScale")> _
		Shared Function dx_MV1SetFrameAmbColorScale_x86(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameAmbColorScale")> _
		Shared Function dx_MV1SetFrameAmbColorScale_x64(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetFrameAmbColorScale(MHandle As Integer, FrameIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameAmbColorScale_x86(MHandle, FrameIndex, Scale)
			Else
				Return dx_MV1SetFrameAmbColorScale_x64(MHandle, FrameIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameDifColorScale")> _
		Shared Function dx_MV1GetFrameDifColorScale_x86(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameDifColorScale")> _
		Shared Function dx_MV1GetFrameDifColorScale_x64(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetFrameDifColorScale(MHandle As Integer, FrameIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameDifColorScale_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameDifColorScale_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameSpcColorScale")> _
		Shared Function dx_MV1GetFrameSpcColorScale_x86(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameSpcColorScale")> _
		Shared Function dx_MV1GetFrameSpcColorScale_x64(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetFrameSpcColorScale(MHandle As Integer, FrameIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameSpcColorScale_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameSpcColorScale_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameEmiColorScale")> _
		Shared Function dx_MV1GetFrameEmiColorScale_x86(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameEmiColorScale")> _
		Shared Function dx_MV1GetFrameEmiColorScale_x64(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetFrameEmiColorScale(MHandle As Integer, FrameIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameEmiColorScale_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameEmiColorScale_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameAmbColorScale")> _
		Shared Function dx_MV1GetFrameAmbColorScale_x86(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameAmbColorScale")> _
		Shared Function dx_MV1GetFrameAmbColorScale_x64(MHandle As Integer, FrameIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetFrameAmbColorScale(MHandle As Integer, FrameIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameAmbColorScale_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameAmbColorScale_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameSemiTransState")> _
		Shared Function dx_MV1GetFrameSemiTransState_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameSemiTransState")> _
		Shared Function dx_MV1GetFrameSemiTransState_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameSemiTransState(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameSemiTransState_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameSemiTransState_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameOpacityRate")> _
		Shared Function dx_MV1SetFrameOpacityRate_x86(MHandle As Integer, FrameIndex As Integer, Rate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameOpacityRate")> _
		Shared Function dx_MV1SetFrameOpacityRate_x64(MHandle As Integer, FrameIndex As Integer, Rate As Single) As Integer
		End Function
		Public Shared Function MV1SetFrameOpacityRate(MHandle As Integer, FrameIndex As Integer, Rate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameOpacityRate_x86(MHandle, FrameIndex, Rate)
			Else
				Return dx_MV1SetFrameOpacityRate_x64(MHandle, FrameIndex, Rate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameOpacityRate")> _
		Shared Function dx_MV1GetFrameOpacityRate_x86(MHandle As Integer, FrameIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameOpacityRate")> _
		Shared Function dx_MV1GetFrameOpacityRate_x64(MHandle As Integer, FrameIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetFrameOpacityRate(MHandle As Integer, FrameIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameOpacityRate_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameOpacityRate_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameBaseVisible")> _
		Shared Function dx_MV1SetFrameBaseVisible_x86(MHandle As Integer, FrameIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameBaseVisible")> _
		Shared Function dx_MV1SetFrameBaseVisible_x64(MHandle As Integer, FrameIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetFrameBaseVisible(MHandle As Integer, FrameIndex As Integer, VisibleFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameBaseVisible_x86(MHandle, FrameIndex, VisibleFlag)
			Else
				Return dx_MV1SetFrameBaseVisible_x64(MHandle, FrameIndex, VisibleFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetFrameBaseVisible")> _
		Shared Function dx_MV1GetFrameBaseVisible_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetFrameBaseVisible")> _
		Shared Function dx_MV1GetFrameBaseVisible_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetFrameBaseVisible(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetFrameBaseVisible_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1GetFrameBaseVisible_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameTextureAddressTransform")> _
		Shared Function dx_MV1SetFrameTextureAddressTransform_x86(MHandle As Integer, FrameIndex As Integer, TransU As Single, TransV As Single, ScaleU As Single, ScaleV As Single, _
			RotCenterU As Single, RotCenterV As Single, Rotate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameTextureAddressTransform")> _
		Shared Function dx_MV1SetFrameTextureAddressTransform_x64(MHandle As Integer, FrameIndex As Integer, TransU As Single, TransV As Single, ScaleU As Single, ScaleV As Single, _
			RotCenterU As Single, RotCenterV As Single, Rotate As Single) As Integer
		End Function
		Public Shared Function MV1SetFrameTextureAddressTransform(MHandle As Integer, FrameIndex As Integer, TransU As Single, TransV As Single, ScaleU As Single, ScaleV As Single, _
			RotCenterU As Single, RotCenterV As Single, Rotate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameTextureAddressTransform_x86(MHandle, FrameIndex, TransU, TransV, ScaleU, ScaleV, _
					RotCenterU, RotCenterV, Rotate)
			Else
				Return dx_MV1SetFrameTextureAddressTransform_x64(MHandle, FrameIndex, TransU, TransV, ScaleU, ScaleV, _
					RotCenterU, RotCenterV, Rotate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetFrameTextureAddressTransformMatrix")> _
		Shared Function dx_MV1SetFrameTextureAddressTransformMatrix_x86(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetFrameTextureAddressTransformMatrix")> _
		Shared Function dx_MV1SetFrameTextureAddressTransformMatrix_x64(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX) As Integer
		End Function
		Public Shared Function MV1SetFrameTextureAddressTransformMatrix(MHandle As Integer, FrameIndex As Integer, Matrix As MATRIX) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetFrameTextureAddressTransformMatrix_x86(MHandle, FrameIndex, Matrix)
			Else
				Return dx_MV1SetFrameTextureAddressTransformMatrix_x64(MHandle, FrameIndex, Matrix)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1ResetFrameTextureAddressTransform")> _
		Shared Function dx_MV1ResetFrameTextureAddressTransform_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1ResetFrameTextureAddressTransform")> _
		Shared Function dx_MV1ResetFrameTextureAddressTransform_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1ResetFrameTextureAddressTransform(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1ResetFrameTextureAddressTransform_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1ResetFrameTextureAddressTransform_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshNum")> _
		Shared Function dx_MV1GetMeshNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshNum")> _
		Shared Function dx_MV1GetMeshNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshNum_x86(MHandle)
			Else
				Return dx_MV1GetMeshNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshMaterial")> _
		Shared Function dx_MV1GetMeshMaterial_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshMaterial")> _
		Shared Function dx_MV1GetMeshMaterial_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshMaterial(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshMaterial_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshMaterial_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshTriangleNum")> _
		Shared Function dx_MV1GetMeshTriangleNum_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshTriangleNum")> _
		Shared Function dx_MV1GetMeshTriangleNum_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshTriangleNum(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshTriangleNum_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshTriangleNum_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshVisible")> _
		Shared Function dx_MV1SetMeshVisible_x86(MHandle As Integer, MeshIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshVisible")> _
		Shared Function dx_MV1SetMeshVisible_x64(MHandle As Integer, MeshIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshVisible(MHandle As Integer, MeshIndex As Integer, VisibleFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshVisible_x86(MHandle, MeshIndex, VisibleFlag)
			Else
				Return dx_MV1SetMeshVisible_x64(MHandle, MeshIndex, VisibleFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshVisible")> _
		Shared Function dx_MV1GetMeshVisible_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshVisible")> _
		Shared Function dx_MV1GetMeshVisible_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshVisible(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshVisible_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshVisible_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshDifColorScale")> _
		Shared Function dx_MV1SetMeshDifColorScale_x86(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshDifColorScale")> _
		Shared Function dx_MV1SetMeshDifColorScale_x64(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMeshDifColorScale(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshDifColorScale_x86(MHandle, MeshIndex, Scale)
			Else
				Return dx_MV1SetMeshDifColorScale_x64(MHandle, MeshIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshSpcColorScale")> _
		Shared Function dx_MV1SetMeshSpcColorScale_x86(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshSpcColorScale")> _
		Shared Function dx_MV1SetMeshSpcColorScale_x64(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMeshSpcColorScale(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshSpcColorScale_x86(MHandle, MeshIndex, Scale)
			Else
				Return dx_MV1SetMeshSpcColorScale_x64(MHandle, MeshIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshEmiColorScale")> _
		Shared Function dx_MV1SetMeshEmiColorScale_x86(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshEmiColorScale")> _
		Shared Function dx_MV1SetMeshEmiColorScale_x64(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMeshEmiColorScale(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshEmiColorScale_x86(MHandle, MeshIndex, Scale)
			Else
				Return dx_MV1SetMeshEmiColorScale_x64(MHandle, MeshIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshAmbColorScale")> _
		Shared Function dx_MV1SetMeshAmbColorScale_x86(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshAmbColorScale")> _
		Shared Function dx_MV1SetMeshAmbColorScale_x64(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
		End Function
		Public Shared Function MV1SetMeshAmbColorScale(MHandle As Integer, MeshIndex As Integer, Scale As COLOR_F) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshAmbColorScale_x86(MHandle, MeshIndex, Scale)
			Else
				Return dx_MV1SetMeshAmbColorScale_x64(MHandle, MeshIndex, Scale)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshDifColorScale")> _
		Shared Function dx_MV1GetMeshDifColorScale_x86(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshDifColorScale")> _
		Shared Function dx_MV1GetMeshDifColorScale_x64(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMeshDifColorScale(MHandle As Integer, MeshIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshDifColorScale_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshDifColorScale_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshSpcColorScale")> _
		Shared Function dx_MV1GetMeshSpcColorScale_x86(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshSpcColorScale")> _
		Shared Function dx_MV1GetMeshSpcColorScale_x64(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMeshSpcColorScale(MHandle As Integer, MeshIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshSpcColorScale_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshSpcColorScale_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshEmiColorScale")> _
		Shared Function dx_MV1GetMeshEmiColorScale_x86(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshEmiColorScale")> _
		Shared Function dx_MV1GetMeshEmiColorScale_x64(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMeshEmiColorScale(MHandle As Integer, MeshIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshEmiColorScale_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshEmiColorScale_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshAmbColorScale")> _
		Shared Function dx_MV1GetMeshAmbColorScale_x86(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshAmbColorScale")> _
		Shared Function dx_MV1GetMeshAmbColorScale_x64(MHandle As Integer, MeshIndex As Integer) As COLOR_F
		End Function
		Public Shared Function MV1GetMeshAmbColorScale(MHandle As Integer, MeshIndex As Integer) As COLOR_F
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshAmbColorScale_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshAmbColorScale_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshOpacityRate")> _
		Shared Function dx_MV1SetMeshOpacityRate_x86(MHandle As Integer, MeshIndex As Integer, Rate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshOpacityRate")> _
		Shared Function dx_MV1SetMeshOpacityRate_x64(MHandle As Integer, MeshIndex As Integer, Rate As Single) As Integer
		End Function
		Public Shared Function MV1SetMeshOpacityRate(MHandle As Integer, MeshIndex As Integer, Rate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshOpacityRate_x86(MHandle, MeshIndex, Rate)
			Else
				Return dx_MV1SetMeshOpacityRate_x64(MHandle, MeshIndex, Rate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshOpacityRate")> _
		Shared Function dx_MV1GetMeshOpacityRate_x86(MHandle As Integer, MeshIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshOpacityRate")> _
		Shared Function dx_MV1GetMeshOpacityRate_x64(MHandle As Integer, MeshIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetMeshOpacityRate(MHandle As Integer, MeshIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshOpacityRate_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshOpacityRate_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshDrawBlendMode")> _
		Shared Function dx_MV1SetMeshDrawBlendMode_x86(MHandle As Integer, MeshIndex As Integer, BlendMode As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshDrawBlendMode")> _
		Shared Function dx_MV1SetMeshDrawBlendMode_x64(MHandle As Integer, MeshIndex As Integer, BlendMode As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshDrawBlendMode(MHandle As Integer, MeshIndex As Integer, BlendMode As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshDrawBlendMode_x86(MHandle, MeshIndex, BlendMode)
			Else
				Return dx_MV1SetMeshDrawBlendMode_x64(MHandle, MeshIndex, BlendMode)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshDrawBlendParam")> _
		Shared Function dx_MV1SetMeshDrawBlendParam_x86(MHandle As Integer, MeshIndex As Integer, BlendParam As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshDrawBlendParam")> _
		Shared Function dx_MV1SetMeshDrawBlendParam_x64(MHandle As Integer, MeshIndex As Integer, BlendParam As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshDrawBlendParam(MHandle As Integer, MeshIndex As Integer, BlendParam As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshDrawBlendParam_x86(MHandle, MeshIndex, BlendParam)
			Else
				Return dx_MV1SetMeshDrawBlendParam_x64(MHandle, MeshIndex, BlendParam)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshDrawBlendMode")> _
		Shared Function dx_MV1GetMeshDrawBlendMode_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshDrawBlendMode")> _
		Shared Function dx_MV1GetMeshDrawBlendMode_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshDrawBlendMode(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshDrawBlendMode_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshDrawBlendMode_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshDrawBlendParam")> _
		Shared Function dx_MV1GetMeshDrawBlendParam_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshDrawBlendParam")> _
		Shared Function dx_MV1GetMeshDrawBlendParam_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshDrawBlendParam(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshDrawBlendParam_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshDrawBlendParam_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshBaseVisible")> _
		Shared Function dx_MV1SetMeshBaseVisible_x86(MHandle As Integer, MeshIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshBaseVisible")> _
		Shared Function dx_MV1SetMeshBaseVisible_x64(MHandle As Integer, MeshIndex As Integer, VisibleFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshBaseVisible(MHandle As Integer, MeshIndex As Integer, VisibleFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshBaseVisible_x86(MHandle, MeshIndex, VisibleFlag)
			Else
				Return dx_MV1SetMeshBaseVisible_x64(MHandle, MeshIndex, VisibleFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshBaseVisible")> _
		Shared Function dx_MV1GetMeshBaseVisible_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshBaseVisible")> _
		Shared Function dx_MV1GetMeshBaseVisible_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshBaseVisible(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshBaseVisible_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshBaseVisible_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshBackCulling")> _
		Shared Function dx_MV1SetMeshBackCulling_x86(MHandle As Integer, MeshIndex As Integer, CullingFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshBackCulling")> _
		Shared Function dx_MV1SetMeshBackCulling_x64(MHandle As Integer, MeshIndex As Integer, CullingFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshBackCulling(MHandle As Integer, MeshIndex As Integer, CullingFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshBackCulling_x86(MHandle, MeshIndex, CullingFlag)
			Else
				Return dx_MV1SetMeshBackCulling_x64(MHandle, MeshIndex, CullingFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshBackCulling")> _
		Shared Function dx_MV1GetMeshBackCulling_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshBackCulling")> _
		Shared Function dx_MV1GetMeshBackCulling_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshBackCulling(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshBackCulling_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshBackCulling_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshMaxPosition")> _
		Shared Function dx_MV1GetMeshMaxPosition_x86(MHandle As Integer, MeshIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshMaxPosition")> _
		Shared Function dx_MV1GetMeshMaxPosition_x64(MHandle As Integer, MeshIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetMeshMaxPosition(MHandle As Integer, MeshIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshMaxPosition_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshMaxPosition_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshMinPosition")> _
		Shared Function dx_MV1GetMeshMinPosition_x86(MHandle As Integer, MeshIndex As Integer) As VECTOR
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshMinPosition")> _
		Shared Function dx_MV1GetMeshMinPosition_x64(MHandle As Integer, MeshIndex As Integer) As VECTOR
		End Function
		Public Shared Function MV1GetMeshMinPosition(MHandle As Integer, MeshIndex As Integer) As VECTOR
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshMinPosition_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshMinPosition_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshTListNum")> _
		Shared Function dx_MV1GetMeshTListNum_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshTListNum")> _
		Shared Function dx_MV1GetMeshTListNum_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshTListNum(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshTListNum_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshTListNum_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshTList")> _
		Shared Function dx_MV1GetMeshTList_x86(MHandle As Integer, MeshIndex As Integer, Index As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshTList")> _
		Shared Function dx_MV1GetMeshTList_x64(MHandle As Integer, MeshIndex As Integer, Index As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshTList(MHandle As Integer, MeshIndex As Integer, Index As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshTList_x86(MHandle, MeshIndex, Index)
			Else
				Return dx_MV1GetMeshTList_x64(MHandle, MeshIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshSemiTransState")> _
		Shared Function dx_MV1GetMeshSemiTransState_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshSemiTransState")> _
		Shared Function dx_MV1GetMeshSemiTransState_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshSemiTransState(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshSemiTransState_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshSemiTransState_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshUseVertDifColor")> _
		Shared Function dx_MV1SetMeshUseVertDifColor_x86(MHandle As Integer, MeshIndex As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshUseVertDifColor")> _
		Shared Function dx_MV1SetMeshUseVertDifColor_x64(MHandle As Integer, MeshIndex As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshUseVertDifColor(MHandle As Integer, MeshIndex As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshUseVertDifColor_x86(MHandle, MeshIndex, UseFlag)
			Else
				Return dx_MV1SetMeshUseVertDifColor_x64(MHandle, MeshIndex, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetMeshUseVertSpcColor")> _
		Shared Function dx_MV1SetMeshUseVertSpcColor_x86(MHandle As Integer, MeshIndex As Integer, UseFlag As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetMeshUseVertSpcColor")> _
		Shared Function dx_MV1SetMeshUseVertSpcColor_x64(MHandle As Integer, MeshIndex As Integer, UseFlag As Integer) As Integer
		End Function
		Public Shared Function MV1SetMeshUseVertSpcColor(MHandle As Integer, MeshIndex As Integer, UseFlag As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetMeshUseVertSpcColor_x86(MHandle, MeshIndex, UseFlag)
			Else
				Return dx_MV1SetMeshUseVertSpcColor_x64(MHandle, MeshIndex, UseFlag)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshUseVertDifColor")> _
		Shared Function dx_MV1GetMeshUseVertDifColor_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshUseVertDifColor")> _
		Shared Function dx_MV1GetMeshUseVertDifColor_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshUseVertDifColor(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshUseVertDifColor_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshUseVertDifColor_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshUseVertSpcColor")> _
		Shared Function dx_MV1GetMeshUseVertSpcColor_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshUseVertSpcColor")> _
		Shared Function dx_MV1GetMeshUseVertSpcColor_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshUseVertSpcColor(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshUseVertSpcColor_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshUseVertSpcColor_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetMeshShapeFlag")> _
		Shared Function dx_MV1GetMeshShapeFlag_x86(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetMeshShapeFlag")> _
		Shared Function dx_MV1GetMeshShapeFlag_x64(MHandle As Integer, MeshIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetMeshShapeFlag(MHandle As Integer, MeshIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetMeshShapeFlag_x86(MHandle, MeshIndex)
			Else
				Return dx_MV1GetMeshShapeFlag_x64(MHandle, MeshIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetShapeNum")> _
		Shared Function dx_MV1GetShapeNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetShapeNum")> _
		Shared Function dx_MV1GetShapeNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetShapeNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetShapeNum_x86(MHandle)
			Else
				Return dx_MV1GetShapeNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SearchShape")> _
		Shared Function dx_MV1SearchShape_x86(MHandle As Integer, ShapeName As String) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SearchShape")> _
		Shared Function dx_MV1SearchShape_x64(MHandle As Integer, ShapeName As String) As Integer
		End Function
		Public Shared Function MV1SearchShape(MHandle As Integer, ShapeName As String) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SearchShape_x86(MHandle, ShapeName)
			Else
				Return dx_MV1SearchShape_x64(MHandle, ShapeName)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetShapeTargetMeshNum")> _
		Shared Function dx_MV1GetShapeTargetMeshNum_x86(MHandle As Integer, ShapeIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetShapeTargetMeshNum")> _
		Shared Function dx_MV1GetShapeTargetMeshNum_x64(MHandle As Integer, ShapeIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetShapeTargetMeshNum(MHandle As Integer, ShapeIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetShapeTargetMeshNum_x86(MHandle, ShapeIndex)
			Else
				Return dx_MV1GetShapeTargetMeshNum_x64(MHandle, ShapeIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetShapeTargetMesh")> _
		Shared Function dx_MV1GetShapeTargetMesh_x86(MHandle As Integer, ShapeIndex As Integer, Index As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetShapeTargetMesh")> _
		Shared Function dx_MV1GetShapeTargetMesh_x64(MHandle As Integer, ShapeIndex As Integer, Index As Integer) As Integer
		End Function
		Public Shared Function MV1GetShapeTargetMesh(MHandle As Integer, ShapeIndex As Integer, Index As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetShapeTargetMesh_x86(MHandle, ShapeIndex, Index)
			Else
				Return dx_MV1GetShapeTargetMesh_x64(MHandle, ShapeIndex, Index)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetShapeRate")> _
		Shared Function dx_MV1SetShapeRate_x86(MHandle As Integer, ShapeIndex As Integer, Rate As Single) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetShapeRate")> _
		Shared Function dx_MV1SetShapeRate_x64(MHandle As Integer, ShapeIndex As Integer, Rate As Single) As Integer
		End Function
		Public Shared Function MV1SetShapeRate(MHandle As Integer, ShapeIndex As Integer, Rate As Single) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetShapeRate_x86(MHandle, ShapeIndex, Rate)
			Else
				Return dx_MV1SetShapeRate_x64(MHandle, ShapeIndex, Rate)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetShapeRate")> _
		Shared Function dx_MV1GetShapeRate_x86(MHandle As Integer, ShapeIndex As Integer) As Single
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetShapeRate")> _
		Shared Function dx_MV1GetShapeRate_x64(MHandle As Integer, ShapeIndex As Integer) As Single
		End Function
		Public Shared Function MV1GetShapeRate(MHandle As Integer, ShapeIndex As Integer) As Single
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetShapeRate_x86(MHandle, ShapeIndex)
			Else
				Return dx_MV1GetShapeRate_x64(MHandle, ShapeIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTriangleListNum")> _
		Shared Function dx_MV1GetTriangleListNum_x86(MHandle As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTriangleListNum")> _
		Shared Function dx_MV1GetTriangleListNum_x64(MHandle As Integer) As Integer
		End Function
		Public Shared Function MV1GetTriangleListNum(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTriangleListNum_x86(MHandle)
			Else
				Return dx_MV1GetTriangleListNum_x64(MHandle)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTriangleListVertexType")> _
		Shared Function dx_MV1GetTriangleListVertexType_x86(MHandle As Integer, TListIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTriangleListVertexType")> _
		Shared Function dx_MV1GetTriangleListVertexType_x64(MHandle As Integer, TListIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTriangleListVertexType(MHandle As Integer, TListIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTriangleListVertexType_x86(MHandle, TListIndex)
			Else
				Return dx_MV1GetTriangleListVertexType_x64(MHandle, TListIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTriangleListPolygonNum")> _
		Shared Function dx_MV1GetTriangleListPolygonNum_x86(MHandle As Integer, TListIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTriangleListPolygonNum")> _
		Shared Function dx_MV1GetTriangleListPolygonNum_x64(MHandle As Integer, TListIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTriangleListPolygonNum(MHandle As Integer, TListIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTriangleListPolygonNum_x86(MHandle, TListIndex)
			Else
				Return dx_MV1GetTriangleListPolygonNum_x64(MHandle, TListIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1GetTriangleListVertexNum")> _
		Shared Function dx_MV1GetTriangleListVertexNum_x86(MHandle As Integer, TListIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1GetTriangleListVertexNum")> _
		Shared Function dx_MV1GetTriangleListVertexNum_x64(MHandle As Integer, TListIndex As Integer) As Integer
		End Function
		Public Shared Function MV1GetTriangleListVertexNum(MHandle As Integer, TListIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1GetTriangleListVertexNum_x86(MHandle, TListIndex)
			Else
				Return dx_MV1GetTriangleListVertexNum_x64(MHandle, TListIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetupCollInfo")> _
		Shared Function dx_MV1SetupCollInfo_x86(MHandle As Integer, FrameIndex As Integer, XDivNum As Integer, YDivNum As Integer, ZDivNum As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetupCollInfo")> _
		Shared Function dx_MV1SetupCollInfo_x64(MHandle As Integer, FrameIndex As Integer, XDivNum As Integer, YDivNum As Integer, ZDivNum As Integer) As Integer
		End Function
		Public Shared Function MV1SetupCollInfo(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupCollInfo_x86(MHandle, -1, 32, 8, 32)
			Else
				Return dx_MV1SetupCollInfo_x64(MHandle, -1, 32, 8, 32)
			End If
		End Function
		Public Shared Function MV1SetupCollInfo(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupCollInfo_x86(MHandle, FrameIndex, 32, 8, 32)
			Else
				Return dx_MV1SetupCollInfo_x64(MHandle, FrameIndex, 32, 8, 32)
			End If
		End Function
		Public Shared Function MV1SetupCollInfo(MHandle As Integer, FrameIndex As Integer, XDivNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupCollInfo_x86(MHandle, FrameIndex, XDivNum, 8, 32)
			Else
				Return dx_MV1SetupCollInfo_x64(MHandle, FrameIndex, XDivNum, 8, 32)
			End If
		End Function
		Public Shared Function MV1SetupCollInfo(MHandle As Integer, FrameIndex As Integer, XDivNum As Integer, YDivNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupCollInfo_x86(MHandle, FrameIndex, XDivNum, YDivNum, 32)
			Else
				Return dx_MV1SetupCollInfo_x64(MHandle, FrameIndex, XDivNum, YDivNum, 32)
			End If
		End Function
		Public Shared Function MV1SetupCollInfo(MHandle As Integer, FrameIndex As Integer, XDivNum As Integer, YDivNum As Integer, ZDivNum As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupCollInfo_x86(MHandle, FrameIndex, XDivNum, YDivNum, ZDivNum)
			Else
				Return dx_MV1SetupCollInfo_x64(MHandle, FrameIndex, XDivNum, YDivNum, ZDivNum)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1TerminateCollInfo")> _
		Shared Function dx_MV1TerminateCollInfo_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1TerminateCollInfo")> _
		Shared Function dx_MV1TerminateCollInfo_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1TerminateCollInfo(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1TerminateCollInfo_x86(MHandle, -1)
			Else
				Return dx_MV1TerminateCollInfo_x64(MHandle, -1)
			End If
		End Function
		Public Shared Function MV1TerminateCollInfo(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1TerminateCollInfo_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1TerminateCollInfo_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1RefreshCollInfo")> _
		Shared Function dx_MV1RefreshCollInfo_x86(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1RefreshCollInfo")> _
		Shared Function dx_MV1RefreshCollInfo_x64(MHandle As Integer, FrameIndex As Integer) As Integer
		End Function
		Public Shared Function MV1RefreshCollInfo(MHandle As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1RefreshCollInfo_x86(MHandle, -1)
			Else
				Return dx_MV1RefreshCollInfo_x64(MHandle, -1)
			End If
		End Function
		Public Shared Function MV1RefreshCollInfo(MHandle As Integer, FrameIndex As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1RefreshCollInfo_x86(MHandle, FrameIndex)
			Else
				Return dx_MV1RefreshCollInfo_x64(MHandle, FrameIndex)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollCheck_Line")> _
		Shared Function dx_MV1CollCheck_Line_x86(MHandle As Integer, FrameIndex As Integer, PosStart As VECTOR, PosEnd As VECTOR) As MV1_COLL_RESULT_POLY
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollCheck_Line")> _
		Shared Function dx_MV1CollCheck_Line_x64(MHandle As Integer, FrameIndex As Integer, PosStart As VECTOR, PosEnd As VECTOR) As MV1_COLL_RESULT_POLY
		End Function
		Public Shared Function MV1CollCheck_Line(MHandle As Integer, FrameIndex As Integer, PosStart As VECTOR, PosEnd As VECTOR) As MV1_COLL_RESULT_POLY
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollCheck_Line_x86(MHandle, FrameIndex, PosStart, PosEnd)
			Else
				Return dx_MV1CollCheck_Line_x64(MHandle, FrameIndex, PosStart, PosEnd)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollCheck_LineDim")> _
		Shared Function dx_MV1CollCheck_LineDim_x86(MHandle As Integer, FrameIndex As Integer, PosStart As VECTOR, PosEnd As VECTOR) As MV1_COLL_RESULT_POLY_DIM
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollCheck_LineDim")> _
		Shared Function dx_MV1CollCheck_LineDim_x64(MHandle As Integer, FrameIndex As Integer, PosStart As VECTOR, PosEnd As VECTOR) As MV1_COLL_RESULT_POLY_DIM
		End Function
		Public Shared Function MV1CollCheck_LineDim(MHandle As Integer, FrameIndex As Integer, PosStart As VECTOR, PosEnd As VECTOR) As MV1_COLL_RESULT_POLY_DIM
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollCheck_LineDim_x86(MHandle, FrameIndex, PosStart, PosEnd)
			Else
				Return dx_MV1CollCheck_LineDim_x64(MHandle, FrameIndex, PosStart, PosEnd)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollCheck_Sphere")> _
		Shared Function dx_MV1CollCheck_Sphere_x86(MHandle As Integer, FrameIndex As Integer, CenterPos As VECTOR, r As Single) As MV1_COLL_RESULT_POLY_DIM
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollCheck_Sphere")> _
		Shared Function dx_MV1CollCheck_Sphere_x64(MHandle As Integer, FrameIndex As Integer, CenterPos As VECTOR, r As Single) As MV1_COLL_RESULT_POLY_DIM
		End Function
		Public Shared Function MV1CollCheck_Sphere(MHandle As Integer, FrameIndex As Integer, CenterPos As VECTOR, r As Single) As MV1_COLL_RESULT_POLY_DIM
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollCheck_Sphere_x86(MHandle, FrameIndex, CenterPos, r)
			Else
				Return dx_MV1CollCheck_Sphere_x64(MHandle, FrameIndex, CenterPos, r)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollCheck_Capsule")> _
		Shared Function dx_MV1CollCheck_Capsule_x86(MHandle As Integer, FrameIndex As Integer, Pos1 As VECTOR, Pos2 As VECTOR, r As Single) As MV1_COLL_RESULT_POLY_DIM
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollCheck_Capsule")> _
		Shared Function dx_MV1CollCheck_Capsule_x64(MHandle As Integer, FrameIndex As Integer, Pos1 As VECTOR, Pos2 As VECTOR, r As Single) As MV1_COLL_RESULT_POLY_DIM
		End Function
		Public Shared Function MV1CollCheck_Capsule(MHandle As Integer, FrameIndex As Integer, Pos1 As VECTOR, Pos2 As VECTOR, r As Single) As MV1_COLL_RESULT_POLY_DIM
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollCheck_Capsule_x86(MHandle, FrameIndex, Pos1, Pos2, r)
			Else
				Return dx_MV1CollCheck_Capsule_x64(MHandle, FrameIndex, Pos1, Pos2, r)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollCheck_Triangle")> _
		Shared Function dx_MV1CollCheck_Triangle_x86(MHandle As Integer, FrameIndex As Integer, Pos1 As VECTOR, Pos2 As VECTOR, Pos3 As VECTOR) As MV1_COLL_RESULT_POLY_DIM
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollCheck_Triangle")> _
		Shared Function dx_MV1CollCheck_Triangle_x64(MHandle As Integer, FrameIndex As Integer, Pos1 As VECTOR, Pos2 As VECTOR, Pos3 As VECTOR) As MV1_COLL_RESULT_POLY_DIM
		End Function
		Public Shared Function MV1CollCheck_Triangle(MHandle As Integer, FrameIndex As Integer, Pos1 As VECTOR, Pos2 As VECTOR, Pos3 As VECTOR) As MV1_COLL_RESULT_POLY_DIM
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollCheck_Triangle_x86(MHandle, FrameIndex, Pos1, Pos2, Pos3)
			Else
				Return dx_MV1CollCheck_Triangle_x64(MHandle, FrameIndex, Pos1, Pos2, Pos3)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollCheck_GetResultPoly")> _
		Shared Function dx_MV1CollCheck_GetResultPoly_x86(ResultPolyDim As MV1_COLL_RESULT_POLY_DIM, PolyNo As Integer) As MV1_COLL_RESULT_POLY
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollCheck_GetResultPoly")> _
		Shared Function dx_MV1CollCheck_GetResultPoly_x64(ResultPolyDim As MV1_COLL_RESULT_POLY_DIM, PolyNo As Integer) As MV1_COLL_RESULT_POLY
		End Function
		Public Shared Function MV1CollCheck_GetResultPoly(ResultPolyDim As MV1_COLL_RESULT_POLY_DIM, PolyNo As Integer) As MV1_COLL_RESULT_POLY
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollCheck_GetResultPoly_x86(ResultPolyDim, PolyNo)
			Else
				Return dx_MV1CollCheck_GetResultPoly_x64(ResultPolyDim, PolyNo)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1CollResultPolyDimTerminate")> _
		Shared Function dx_MV1CollResultPolyDimTerminate_x86(ResultPolyDim As MV1_COLL_RESULT_POLY_DIM) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1CollResultPolyDimTerminate")> _
		Shared Function dx_MV1CollResultPolyDimTerminate_x64(ResultPolyDim As MV1_COLL_RESULT_POLY_DIM) As Integer
		End Function
		Public Shared Function MV1CollResultPolyDimTerminate(ResultPolyDim As MV1_COLL_RESULT_POLY_DIM) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1CollResultPolyDimTerminate_x86(ResultPolyDim)
			Else
				Return dx_MV1CollResultPolyDimTerminate_x64(ResultPolyDim)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1SetupReferenceMesh")> _
		Shared Function dx_MV1SetupReferenceMesh_x86(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1SetupReferenceMesh")> _
		Shared Function dx_MV1SetupReferenceMesh_x64(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
		End Function
		Public Shared Function MV1SetupReferenceMesh(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupReferenceMesh_x86(MHandle, FrameIndex, IsTransform, [FALSE])
			Else
				Return dx_MV1SetupReferenceMesh_x64(MHandle, FrameIndex, IsTransform, [FALSE])
			End If
		End Function
		Public Shared Function MV1SetupReferenceMesh(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1SetupReferenceMesh_x86(MHandle, FrameIndex, IsTransform, IsPositionOnly)
			Else
				Return dx_MV1SetupReferenceMesh_x64(MHandle, FrameIndex, IsTransform, IsPositionOnly)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1TerminateReferenceMesh")> _
		Shared Function dx_MV1TerminateReferenceMesh_x86(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1TerminateReferenceMesh")> _
		Shared Function dx_MV1TerminateReferenceMesh_x64(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
		End Function
		Public Shared Function MV1TerminateReferenceMesh(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1TerminateReferenceMesh_x86(MHandle, FrameIndex, IsTransform, [FALSE])
			Else
				Return dx_MV1TerminateReferenceMesh_x64(MHandle, FrameIndex, IsTransform, [FALSE])
			End If
		End Function
		Public Shared Function MV1TerminateReferenceMesh(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1TerminateReferenceMesh_x86(MHandle, FrameIndex, IsTransform, IsPositionOnly)
			Else
				Return dx_MV1TerminateReferenceMesh_x64(MHandle, FrameIndex, IsTransform, IsPositionOnly)
			End If
		End Function

		<DllImport(DX_DLL_32, EntryPoint := "dx_MV1RefreshReferenceMesh")> _
		Shared Function dx_MV1RefreshReferenceMesh_x86(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
		End Function
		<DllImport(DX_DLL_64, EntryPoint := "dx_MV1RefreshReferenceMesh")> _
		Shared Function dx_MV1RefreshReferenceMesh_x64(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
		End Function
		Public Shared Function MV1RefreshReferenceMesh(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1RefreshReferenceMesh_x86(MHandle, FrameIndex, IsTransform, [FALSE])
			Else
				Return dx_MV1RefreshReferenceMesh_x64(MHandle, FrameIndex, IsTransform, [FALSE])
			End If
		End Function
		Public Shared Function MV1RefreshReferenceMesh(MHandle As Integer, FrameIndex As Integer, IsTransform As Integer, IsPositionOnly As Integer) As Integer
			If System.IntPtr.Size = 4 Then
				Return dx_MV1RefreshReferenceMesh_x86(MHandle, FrameIndex, IsTransform, IsPositionOnly)
			Else
				Return dx_MV1RefreshReferenceMesh_x64(MHandle, FrameIndex, IsTransform, IsPositionOnly)
			End If
		End Function



	End Class
End Namespace